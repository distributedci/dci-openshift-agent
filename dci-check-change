#!/bin/bash
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -ex

cleanup() {
    if [ -d "$DIR.bootstrap" ]; then
        rm -rf "$DIR.bootstrap"
    fi
}

VIRT=
DCI_QUEUE=
SNO_DCI_QUEUE=
SUPPORTED_HINTS=

if [ -r /etc/dci-openshift-agent/config ]; then
    . /etc/dci-openshift-agent/config
fi

BASEDIR=$(cd $(dirname $0); pwd)

if [ $# = 0 ] || [ "$1" = -h ]; then
  name=$(basename -- "$0")
    cat << EOF
    echo "Usage: $name [--virt|--sno] [-s] [-f] (<GitHub PR URL>|<Gerrit review id>) [<kubeconfig path>] [<ctl args>]" 1>&2
    Extract changes from Gerrit or GitHub and test them without impacting what is on the system.

    arguments:
    --virt            Use OCP on Libvirt.
    --sno             Use SNO on Libvirt.
    -s                Force a suffix to be added.
    -f                Force to run without obeying hints.
    <kubeconfig path> To avoid running an OCP installation.
    <ctl args>        Arguments passed to the ctl.
EOF
    exit 1
fi

if [ ! -x $BASEDIR/extract-dependencies ]; then
    BASEDIR=/usr/share/dci-openshift-agent
fi

ARGS="$@"

SUFFIX=-$(echo "$@"|md5sum|cut -f1|cut -f1 -d ' ')

if [ $1 = --virt ]; then
    VIRT=--virt
    shift
elif [ $1 = --sno ]; then
    VIRT=--sno
    if [ -n "$SNO_DCI_QUEUE" ]; then
        DCI_QUEUE="$SNO_DCI_QUEUE"
    fi
    shift
fi

# force a suffix to be added on -s
if [ "$1" = "-s" ]; then
    # manage recursive call (bootstrap): extract the directory name
    # from the path of the command
    if grep -Fq '.bootstrap' <<< $BASEDIR; then
        SUFFIX=
        DIR=$(dirname $(dirname $BASEDIR))
        DIR=$(sed -e 's/\.bootstrap//' <<< $DIR)
    else
        SUFFIX=-$SUFFIX-$$
    fi
    CHANGEID=$2
    shift 2
else
    DIR=
    CHANGEID=$1
    shift
fi

# disable hints
if [ "$1" = "-f" ]; then
    SUPPORTED_HINTS=
fi

case $CHANGEID in
    https://*)
        PR=$(sed -e 's@.*github.com/.*/\([^/]*\)/pull/\([0-9]*\)@\1-pr\2@' <<< $CHANGEID)
        if [ -z "$PR" ]; then
            echo "Unable to extract PR from $CHANGEID" 1>&2
            exit 1
        fi
        [ -n "$DIR" ] || DIR=$HOME/github/$PR$SUFFIX
        TYPE=github
        ;;
    *)
        [ -n "$DIR" ] || DIR=$HOME/gerrit/$CHANGEID$SUFFIX
        TYPE=gerrit
        ;;
esac

if [ -d $DIR ]; then
    if [ -n "$DCI_QUEUE" ] && type -p dci-queue >& /dev/null; then
        jobid="$(dci-queue searchdir $DCI_QUEUE $DIR || :)"
        if [ -n "$jobid" ]; then
            dci-queue unschedule $DCI_QUEUE $jobid
        else
            if [ -n "$SNO_DCI_QUEUE" ] && [ "$DCI_QUEUE" != "$SNO_DCI_QUEUE" ]; then
                jobid="$(dci-queue searchdir $SNO_DCI_QUEUE $DIR || :)"
                if [ -n "$jobid" ]; then
                    dci-queue unschedule $SNO_DCI_QUEUE $jobid
                fi
            fi
        fi
     fi
     if [ -d "$DIR" ]; then
        find "$DIR" -type d -not -perm -u=w -exec chmod u+w {} \;
        rm -rf "$DIR"
     fi
fi

trap cleanup 0

mkdir -p $DIR
cd $DIR

echo "Depends-On: $CHANGEID" | $BASEDIR/extract-dependencies $DIR

# rerun check from the local repo
if [ -d dci-openshift-agent ]; then
    if [ $0 != $DIR.bootstrap/dci-openshift-agent/$(basename $0) ]; then
        echo "re-exec"
        cd
        mv $DIR $DIR.bootstrap
        exec $DIR.bootstrap/dci-openshift-agent/$(basename $0) $ARGS
    fi
fi

BASEDIR=$(sed -e 's/\.bootstrap//' <<< $BASEDIR)

# we should have only one directory and one or zero json file
if [ "$TYPE" = "github" ]; then
    mv *.json github.json
    DESC=$(jq -r .body github.json)
else
    DESC=$(cd $(ls|fgrep -v .json); git log -1)
fi

# extract Depends-On
echo "$DESC" | tr -d '\r' | sort -u | $BASEDIR/extract-dependencies $DIR

# process Test-Hints (only no-check, sno or libvirt for now)
if [[ sno =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*sno\s*" <<< $DESC; then
    VIRT=--sno
    if [ -n "$SNO_DCI_QUEUE" ]; then
        DCI_QUEUE="$SNO_DCI_QUEUE"
    fi
fi

if [[ libvirt =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*libvirt\s*" <<< $DESC; then
    VIRT=--virt
fi

if [[ no-check =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*no-check\s*" <<< $DESC; then
    VIRT=--no-check
    NO_DCI_QUEUE=1
fi

# process Test-Args-Hints
if [[ args =~ $SUPPORTED_HINTS ]]; then
    OPTS=$(sed -n -e "s/^\s*Test-Args-Hints:\s*//pi" <<< $DESC)
else
    OPTS=
fi

# process Test-App-Hints
if [[ app =~ $SUPPORTED_HINTS ]]; then
    APP_NAME=$(sed -n -e "s/^\s*Test-App-Hints:\s*//pi" <<< $DESC)
fi

if [ -z "$APP_NAME" ]; then
    APP_NAME=basic_example
fi

# take test-runner from the local dir
if [ -d dci-openshift-agent ]; then
    BASEDIR=$PWD/dci-openshift-agent
fi

if [ -z "$NO_DCI_QUEUE" ] && [ -n "$DCI_QUEUE" ] && type -p dci-queue >& /dev/null; then
    if [ -n "$USE_PREFIX" ]; then
        dci-queue schedule $DCI_QUEUE -- env APP_NAME=$APP_NAME $BASEDIR/test-runner $VIRT $DIR -p @RESOURCE "$@" $OPTS
    else
        dci-queue schedule $DCI_QUEUE -- bash -c "echo @RESOURCE; export APP_NAME=$APP_NAME; exec $BASEDIR/test-runner $VIRT $DIR $@ $OPTS"
    fi
else
    env APP_NAME=$APP_NAME $BASEDIR/test-runner $VIRT $DIR "$@" $OPTS
fi

# dci-check-change ends here
