#!/bin/bash
#
# Copyright (C) 2021-2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -ex

cleanup() {
    if [ -d "$DIR.bootstrap" ]; then
        rm -rf "$DIR.bootstrap"
    fi
}

VIRT=
DCI_QUEUE=
SNO_DCI_QUEUE=
SUPPORTED_HINTS=
NO_DCI_QUEUE=${NO_DCI_QUEUE:-}
NO_COMMENT=
UPGRADE=
UPGRADE_ARGS=
APP_NAME=
APP_ARGS=
FORCE_CHECK=
TAG=

if [ -r /etc/dci-openshift-agent/config ]; then
    . /etc/dci-openshift-agent/config
fi

BASEDIR=$(cd $(dirname $0); pwd)

if [ $# = 0 ] || [ "$1" = -h ]; then
  name=$(basename -- "$0")
    cat << EOF
    echo "Usage: $name [--virt|--sno|--assisted|--sno-ai] [--force-check] [--tag <tag>] [--upgrade [--from-topic <topic>] [--to-topic <topic>] [--upgrade-args <args>]] [--app-args <args>] [-n] [-f] [-s] (<GitHub PR URL>|<Gerrit review id>) [<kubeconfig path>] [<ctl args>]" 1>&2
    Extract changes from Gerrit or GitHub and test them without impacting what is on the system.

    arguments:
    --virt                Use OCP on Libvirt.
    --sno                 Use SNO on Libvirt.
    --assisted            Use Assisted Installer on Libvirt.
    --sno-ai              Use SNO with Assisted Installer on Libvirt.
    --force-check         Force to run a check even if there is no code change.
    --tag <tag>           Specify the tag to set on the job (default: debug).
    --upgrade             Run an upgrade job.
    --from-topic          In upgrade, from topic.
    --to-topic            In upgrade, destination topic.
    --upgrade-args <args> Pass <args> to the upgrade command line.
    --app-args <args>     Pass <args> to the CNF command line.
    -n                    Do not vote or comment on Gerrit reviews or GitHub PR.
    -f                    Force to run without obeying hints.
    -s                    Force a suffix to be added.
    <kubeconfig path>     To avoid running an OCP installation.
    <ctl args>            Arguments passed to the ctl.

    Env variables:
    NO_DCI_QUEUE      Skips the use of dci-queue, when dci-queue is available

EOF
    exit 1
fi

if [ ! -x $BASEDIR/extract-dependencies ]; then
    BASEDIR=/usr/share/dci-openshift-agent
fi

ARGS="$@"
ARGVIRT=

SUFFIX=-$(echo "$@"|md5sum|cut -f1|cut -f1 -d ' ')

if [ $1 = --virt ]; then
    ARGVIRT=--virt
    shift
elif [ $1 = --sno ]; then
    ARGVIRT=--sno
    if [ -n "$SNO_DCI_QUEUE" ]; then
        DCI_QUEUE="$SNO_DCI_QUEUE"
    fi
    shift
elif [ $1 = --assisted ]; then
    ARGVIRT=--assisted
    if [ -n "$ASSISTED_DCI_QUEUE" ]; then
        DCI_QUEUE="$ASSISTED_DCI_QUEUE"
    fi
    shift
elif [ $1 = --sno-ai ]; then
    ARGVIRT=--sno-ai
    if [ -n "$SNO_AI_DCI_QUEUE" ]; then
        DCI_QUEUE="$SNO_AI_DCI_QUEUE"
    fi
    shift
fi

if [ "$1" = --force-check ]; then
    FORCE_CHECK=--force-check
    shift
fi

if [ "$1" = --tag ]; then
    shift
    TAG="--tag $1"
    shift
fi

if [ "$1" = --upgrade ]; then
    UPGRADE=--upgrade
    shift
    if [ $1 = --from-topic ]; then
        shift
        UPGRADE="$UPGRADE --from-topic $1"
        shift
    fi

    if [ "$1" = --to-topic ]; then
        shift
        UPGRADE="$UPGRADE --to-topic $1"
        shift
    fi
    if [ "$1" = --upgrade-args ]; then
        shift
        UPGRADE_ARGS="$1"
        shift
    fi
fi

if [ "$1" = --app-args ]; then
    shift
    APP_ARGS="$1"
    shift
fi

# no comment
if [ "$1" = "-n" ]; then
    NO_COMMENT=-n
    shift
fi

# disable hints
if [ "$1" = "-f" ]; then
    SUPPORTED_HINTS=NO_SUPPORTED_HINTS
    shift
fi

# force a suffix to be added on -s
if [ "$1" = "-s" ]; then
    # manage recursive call (bootstrap): extract the directory name
    # from the path of the command
    if grep -Fq '.bootstrap' <<< $BASEDIR; then
        SUFFIX=
        DIR=$(dirname $(dirname $BASEDIR))
        DIR=$(sed -e 's/\.bootstrap//' <<< $DIR)
    else
        SUFFIX=-$SUFFIX-$$
    fi
    CHANGEID=$2
    shift 2
else
    DIR=
    CHANGEID=$1
    shift
fi

# validate kubeconfig or stop
if [[ "$1" =~ .*/kubeconfig ]]; then
    OC_CLIENT="${1/%kubeconfig/oc}"
    if ! $OC_CLIENT --kubeconfig "$1" version || ! $OC_CLIENT --kubeconfig "$1" get nodes; then
        echo "Unable to use $1 to connect to OCP" 1>&2
        exit 1
    fi
    NO_DCI_QUEUE=1
fi

case $CHANGEID in
    https://*)
        PR=$(sed -e 's@.*github.com/.*/\([^/]*\)/pull/\([0-9]*\)@\1-pr\2@' <<< $CHANGEID)
        if [ -z "$PR" ]; then
            echo "Unable to extract PR from $CHANGEID" 1>&2
            exit 1
        fi
        [ -n "$DIR" ] || DIR=$HOME/github/$PR$SUFFIX
        TYPE=github
        ;;
    *)
        [ -n "$DIR" ] || DIR=$HOME/gerrit/$CHANGEID$SUFFIX
        TYPE=gerrit
        ;;
esac

if [ -d $DIR ]; then
    if [ -n "$DCI_QUEUE" ] && type -p dci-queue >& /dev/null; then
        jobid="$(dci-queue searchdir $DCI_QUEUE $DIR || :)"
        if [ -n "$jobid" ]; then
            dci-queue unschedule $DCI_QUEUE $jobid
        else
            if [ -n "$SNO_DCI_QUEUE" ] && [ "$DCI_QUEUE" != "$SNO_DCI_QUEUE" ]; then
                jobid="$(dci-queue searchdir $SNO_DCI_QUEUE $DIR || :)"
                if [ -n "$jobid" ]; then
                    dci-queue unschedule $SNO_DCI_QUEUE $jobid
                fi
            fi
        fi
     fi
     if [ -d "$DIR" ]; then
        find "$DIR" -type d -not -perm -u=w -exec chmod u+w {} \;
        rm -rf "$DIR"
     fi
fi

trap cleanup 0

mkdir -p $DIR
cd $DIR

echo "Depends-On: $CHANGEID" | $BASEDIR/extract-dependencies $DIR

# rerun check from the local repo
if [ -d dci-openshift-agent ]; then
    if [ $0 != $DIR.bootstrap/dci-openshift-agent/$(basename $0) ]; then
        echo "re-exec"
        cd
        mv $DIR $DIR.bootstrap
        exec $DIR.bootstrap/dci-openshift-agent/$(basename $0) $ARGS
    fi
fi

BASEDIR=$(sed -e 's/\.bootstrap//' <<< $BASEDIR)

# we should have only one directory and one or zero json file
if [ "$TYPE" = "github" ]; then
    mv *.json github.json
    DESC=$(jq -r .body github.json)
else
    DESC=$(cd $(ls|fgrep -v .json); git log -1)
fi

# extract Depends-On
echo "$DESC" | tr -d '\r' | sort -u | $BASEDIR/extract-dependencies $DIR

# process Test-Hints if not specified on the command line
if [ -n "$ARGVIRT" ]; then
    VIRT="$ARGVIRT"
else
    if [[ sno =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*sno\s*" <<< $DESC; then
        VIRT=--sno
        if [ -n "$SNO_DCI_QUEUE" ]; then
            DCI_QUEUE="$SNO_DCI_QUEUE"
        fi
    fi

    if [[ sno-ai =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*sno-ai\s*" <<< $DESC; then
        VIRT=--sno-ai
        if [ -n "$SNO_AI_DCI_QUEUE" ]; then
            DCI_QUEUE="$SNO_AI_DCI_QUEUE"
        fi
    fi

    if [[ assisted =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*assisted\s*" <<< $DESC; then
        VIRT=--assisted
        if [ -n "$ASSISTED_DCI_QUEUE" ]; then
            DCI_QUEUE="$ASSISTED_DCI_QUEUE"
        fi
    fi

    if [[ libvirt =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*libvirt\s*" <<< $DESC; then
        VIRT=--virt
    fi

    if [[ no-check =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*no-check\s*" <<< $DESC; then
        VIRT=--no-check
        NO_DCI_QUEUE=1
    fi
fi

if [[ force-check =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Hints:\s*force-check\s*" <<< $DESC; then
    FORCE_CHECK=--force-check
fi

# process Test-Upgrade if not specified on the command line
if [ -z "$UPGRADE" ] && [[ upgrade =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Upgrade-Hints:\s*yes\s*" <<< $DESC; then
    UPGRADE=--upgrade

    # process Test-Upgrade-Args-Hints
    if [[ upgrade-args =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Upgrade-Args-Hints:" <<< $DESC; then
        UPGRADE_ARGS="$(sed -n -e 's/^\s*Test-Upgrade-Args-Hints:\s*//pi' <<< $DESC)"
    fi

    # process Test-Upgrade-From-Topic-Hints
    if [[ upgrade-from-topic =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Upgrade-From-Topic-Hints:" <<< $DESC; then
        UPGRADE="$UPGRADE --from-topic $(sed -n -e 's/^\s*Test-Upgrade-From-Topic-Hints:\s*//pi' <<< $DESC)"
    fi

    # process Test-Upgrade-To-Topic-Hints
    if [[ upgrade-to-topic =~ $SUPPORTED_HINTS ]] && grep -qi "^\s*Test-Upgrade-To-Topic-Hints:" <<< $DESC; then
        UPGRADE="$UPGRADE --to-topic $(sed -n -e 's/^\s*Test-Upgrade-To-Topic-Hints:\s*//pi' <<< $DESC)"
    fi
fi

# process Test-Args-Hints
if [[ args =~ $SUPPORTED_HINTS ]]; then
    OPTS=$(sed -n -e "s/^\s*Test-Args-Hints:\s*//pi" <<< $DESC)
else
    OPTS=
fi

# process Test-App-Hints
if [[ app =~ $SUPPORTED_HINTS ]]; then
    APP_NAME=$(sed -n -e "s/^\s*Test-App-Hints:\s*//pi" <<< $DESC)
fi

# process Test-App-Args-Hints
if [[ app-args =~ $SUPPORTED_HINTS ]]; then
    APP_ARGS=$(sed -n -e "s/^\s*Test-App-Args-Hints:\s*//pi" <<< $DESC)
fi

# take test-runner from the local dir
if [ -d dci-openshift-agent ]; then
    BASEDIR=$PWD/dci-openshift-agent
fi

if [ -z "$NO_DCI_QUEUE" ] && [ -n "$DCI_QUEUE" ] && type -p dci-queue >& /dev/null; then
    if [ -n "$USE_PREFIX" ]; then
        dci-queue schedule $DCI_QUEUE -- env UPGRADE_ARGS="$UPGRADE_ARGS" APP_NAME=$APP_NAME APP_ARGS="$APP_ARGS" $BASEDIR/test-runner $VIRT $FORCE_CHECK $TAG $UPGRADE $NO_COMMENT $DIR -p @RESOURCE "$@" $OPTS
    else
        dci-queue schedule $DCI_QUEUE -- env UPGRADE_ARGS="$UPGRADE_ARGS"  RES=@RESOURCE APP_NAME=$APP_NAME APP_ARGS="$APP_ARGS" $BASEDIR/test-runner $VIRT $FORCE_CHECK $TAG $UPGRADE $NO_COMMENT $DIR "$@" $OPTS
    fi
else
    env UPGRADE_ARGS="$UPGRADE_ARGS" APP_NAME=$APP_NAME APP_ARGS="$APP_ARGS" $BASEDIR/test-runner $VIRT $FORCE_CHECK $TAG $UPGRADE $NO_COMMENT $DIR "$@" $OPTS
fi

# dci-check-change ends here
