---
- name: "Pause 60 seconds to wait for MC to be triggered by a resource change"
  pause:
    seconds: 60

- name: "Check MCP application"
  block:
    # MachineConfigPool check
    - name: Get Machine config pools status
      community.kubernetes.k8s_info:
        api_version: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
      register: reg_mcpool_status
      vars:
        status_query: "resources[*].status.conditions[?type=='Updated'].status"
        update_status: "{{ reg_mcpool_status | json_query(status_query) | flatten | unique }}"
      until:
        - reg_mcpool_status.resources is defined
        - update_status == ['True']
      retries: "{{ check_wait_retries }}"
      delay: "{{ check_wait_delay }}"

  # If the last check failed, then move to the workaround
  rescue:
    - name: "Check MCP application failed - no workaround applied"
      fail:
        msg: "No workaround is defined, so the job has to fail at this point"
      when:
        - '"OCPBUGS-11779" not in dci_workarounds|default([])'
        - '"OCPBUGS-13278" not in dci_workarounds|default([])'

    # The workaround for OCPBUGS-11779 and OCPBUGS-13278 is currently the same, but
    # each bug comes from different places.
    # Also, OCPBUGS-13278 only applies for OCP versions from 4.12 to 4.14.
    - name: Apply workaround for OCPBUGS-11779 or OCPBUGS-13278
      block:
        # If nodes are NotReady, we cannot do much more than failing at this point.
        # This is related to OCPBUGS-6676, just to avoid wasting time applying
        # the OCPBUGS-11779/13278 workaround in the case of having NotReady nodes.
        # There may be cases where it takes some time to move from NotReady to Ready,
        # so retrying this task 5 minutes maximum.
        - name: Check for workers with NotReady,SchedulingDisabled status
          shell: >
            {{ oc_tool_path }} get nodes --no-headers=true |
            grep 'NotReady,SchedulingDisabled' | grep worker | awk '{ print $1 }'
          register: not_ready_disabled_nodes
          until: not_ready_disabled_nodes.stdout | length == 0
          retries: 30
          delay: 10

        # If retry_count > num_repetitions, we will not iterate more and make the job to fail
        - name: Fail if the maximum number of retries have been reached
          fail:
            msg: Maximum number of retries without success have been reached ({{ num_repetitions }})
          when: retry_count | int > num_repetitions

        # If retry_count <= num_repetitions, then do the workaround - uncordon nodes that are in Ready,SchedulingDisabled status
        - name: Check for workers with Ready,SchedulingDisabled status
          include_tasks: uncordon_workers.yml

        - name: Increment retry count
          set_fact:
            retry_count: "{{ retry_count | int + 1 }}"

        - name: Try a new attempt of this check
          include_tasks: wait-mcp.yml

      when: "(dci_workarounds is defined) and ('OCPBUGS-11779' in dci_workarounds
        or ('OCPBUGS-13278' in dci_workarounds and ocp_version is version('4.12', '>=') and ocp_version is version('4.14', '<=')))"

...
