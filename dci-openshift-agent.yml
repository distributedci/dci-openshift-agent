---
# Step 0 : DCI setup
- name: 'Set dci variables'
  hosts: localhost
  tags:
    - job
    - dci
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - name: Read credentials from env vars
      set_fact:
        dci_client_id="{{ lookup('env','DCI_CLIENT_ID') }}"
        dci_api_secret="{{ lookup('env','DCI_API_SECRET') }}"
        dci_cs_url="{{ lookup('env','DCI_CS_URL') }}"
        dci_ui_url="{{ lookup('env','DCI_UI_URL') | default('https://www.distributed-ci.io', True) }}"
      no_log: true

    # Schedule a new job only if not passed via dci-pipeline
    - name: Schedule a new job
      dci_job:
        components: "{{ dci_components }}"
        components_by_query: "{{ dci_components_by_query }}"
        topic: "{{ dci_topic }}"
        comment: "{{ dci_comment | default('') }}"
      register: job_info
      when: job_info is not defined
      no_log: true

    - name: set job id
      set_fact:
        job_id: '{{ job_info.job.id }}'

    - name: copy the job_id to the JOB_ID_FILE if it exists
      copy: content="{{ job_id }}" dest={{ JOB_ID_FILE }}
      when: JOB_ID_FILE is defined

    # Keep in sync with test-runner parsing
    - name: UI URL
      debug:
        msg: 'Follow the log at: {{ dci_ui_url }}/jobs/{{ hostvars.localhost.job_info.job.id }}/jobStates' # noqa 204

    - name: Set DCI tags for the current job
      dci_job:
        id: '{{ job_id }}'
        tags: '{{ dci_tags }}'
      when: dci_tags is defined

    - name: pre-run
      dci_job:
        id: "{{ job_id }}"
        status: "pre-run"

# Step 1 : pre run
- name: 'Launch pre-run'
  hosts: localhost
  tags:
    - pre-run
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        # prepare infrastructure
        - name: Run the pre-run
          include_tasks: plays/pre-run.yml

        - name: Run the pre-run hook
          include_tasks: '{{ hookdir }}/hooks/pre-run.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      rescue: &teardown_error
        - block:
            - name: error
              dci_job:
                id: "{{ hostvars.localhost.job_id }}"
                status: "error"
              tags: [dci]
              delegate_to: localhost

            - block:
                - name: Run the teardown process
                  include_tasks: "{{ hookdir }}/hooks/teardown.yml"
                  loop: "{{ dci_config_dirs }}"
                  loop_control:
                    loop_var: hookdir
                  when: dci_teardown_on_failure|bool
              ignore_unreachable: true
              ignore_errors: true

          always:
            - name: Run the error process
              include_tasks: plays/failure.yml

          ignore_unreachable: true

    - name: running
      dci_job:
        id: "{{ hostvars.localhost.job_id }}"
        status: "running"
      delegate_to: localhost
      tags: [dci]

# Step 2 : configure
- name: 'Launch configure'
  hosts: provisioner
  tags:
    - running
    - configure
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        # Prepare provisioner host
        - name: Configure provisioner
          include_tasks: plays/configure-provisioner.yml

        - name: Launch configure
          include_tasks: '{{ hookdir }}/hooks/configure.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      rescue: *teardown_error

# Step 3a : installing
- name: 'Launch install'
  hosts: provisioner
  tags:
    - running
    - installing
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - name: "dci-openshift-agent : Launch install"
          include_tasks: plays/install.yml

        - name: "dci-openshift-agent : Launch partner install"
          include_tasks: '{{ hookdir }}/hooks/install.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      when:
        - dci_main is not defined or dci_main == 'install'

      rescue: &teardown_failure
        - block:
            - name: failure
              dci_job:
                id: "{{ hostvars.localhost.job_id }}"
                status: "failure"
              delegate_to: localhost
              tags: [dci]

            - block:
                - name: Run the teardown process
                  include_tasks: "{{ hookdir }}/hooks/teardown.yml"
                  loop: "{{ dci_config_dirs }}"
                  loop_control:
                    loop_var: hookdir
                  when: dci_teardown_on_failure|bool
              ignore_unreachable: true
              ignore_errors: true

          always:
            - name: Run the failure process
              include_tasks: plays/failure.yml

          ignore_unreachable: true

# Step 3b : upgrading
- name: 'Launch upgrade'
  hosts: provisioner
  tags:
    - running
    - upgrading
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - name: "dci-openshift-agent : Launch upgrade"
          vars:
            local_registry: "{{ hostvars[groups['registry_host'][0]].local_registry }}"
            local_repo: "{{ hostvars[groups['registry_host'][0]].local_repo }}"
          include_tasks: plays/upgrade.yml

        - name: "dci-openshift-agent : Launch partner upgrade"
          vars:
            local_registry: "{{ hostvars[groups['registry_host'][0]].local_registry }}"
            local_repo: "{{ hostvars[groups['registry_host'][0]].local_repo }}"
          include_tasks: '{{ hookdir }}/hooks/upgrade.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      when:
        - dci_main is defined
        - dci_main == 'upgrade'

      rescue: *teardown_failure

# Step 4 : deploy operators, run on the provisioner so OC is automatically set
- name: 'Deploy operators to OCP cluster'
  hosts: provisioner
  tags:
    - running
    - operator-deployment
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - include_tasks: plays/deploy-operators.yml

      rescue: *teardown_failure

# Step 5 : redhat testing
- name: 'Launch Red Hat tests'
  hosts: localhost
  tags:
    - running
    - testing
    - redhat-testing
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - include_tasks: plays/tests.yml

      rescue: *teardown_failure

# Step 6 : partner testing
- name: 'Launch partner tests'
  hosts: localhost
  tags:
    - running
    - testing
    - partner-testing
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        # Launch user tests
        - name: Run the partner tests
          include_tasks: '{{ hookdir }}/hooks/tests.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      rescue: *teardown_failure

    - name: post-run
      dci_job:
        id: "{{ job_id }}"
        status: "post-run"
      tags: [dci]

# Step 7 : post run
- name: Launch post run
  hosts: localhost
  tags:
    - post-run
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - include_tasks: plays/post-run.yml

        - name: Run the partner post-run
          include_tasks: '{{ hookdir }}/hooks/post-run.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

      rescue: *teardown_error

    - name: success
      dci_job:
        id: "{{ job_id }}"
        status: "success"
      tags: [dci]

# Step 8 : state "success"
- name: 'Success'
  hosts: localhost
  tags:
    - success
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"
  tasks:
    - block:
        - name: Run the success hook
          include_tasks: '{{ hookdir }}/hooks/success.yml'
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir

        - name: Run the teardown process
          include_tasks: "{{ hookdir }}/hooks/teardown.yml"
          loop: "{{ dci_config_dirs }}"
          loop_control:
            loop_var: hookdir
          when: dci_teardown_on_failure|bool
      ignore_unreachable: true
      ignore_errors: true
