---
# Initial step
- hosts: localhost
  tags:
    - job
  tasks:
    - name: Read credentials from env vars
      set_fact:
        dci_client_id="{{ lookup('env','DCI_CLIENT_ID') }}"
        dci_api_secret="{{ lookup('env','DCI_API_SECRET') }}"
        dci_cs_url="{{ lookup('env','DCI_CS_URL') }}"
      no_log: true

    # Schedule a new job only if not passed via pipeline
    - name: Schedule a new job
      dci_job:
        components: "{{ dci_components }}"
        components_by_query: "{{ dci_components_by_query }}"
        topic: "{{ dci_topic }}"
      register: job_info
      when: job_info is not defined

    - name: set job id
      set_fact:
        job_id: '{{ job_info.job.id }}'

    - name: 'Set DCI tags for the current job'
      dci_job:
        id: '{{ job_id }}'
        tags: '{{ dci_tags }}'
      when: dci_tags

# Step 1 : state "New job"
- name: Prepare jumphost
  hosts: localhost
  vars:
    dci_status: 'new'
  tags:
    - configure
  tasks:
    - block:
        # Prepare host
        - name: Configure jumpbox
          include_tasks: plays/configure.yml

        # Download Openshift from DCI
        - name: Import Openshift files from DCI
          include_tasks: plays/fetch-bits.yml
      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 2 : state "Pre-run"
- name: 'Launch pre-run'
  hosts: localhost
  tags:
    - pre-run
  vars:
    dci_status: 'pre-run'
  tasks:
    - block:
        # prepare infrastructure
        - name: Run the pre-run hook
          include_tasks: 'plays/pre-run.yml'

        - name: Run the pre-run hook
          include_tasks: '{{ dci_config_dir }}/hooks/pre-run.yml'

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 3 : state "configure"
- name: 'Launch configure'
  hosts: provisioner
  tags:
    - running
    - configure
  vars:
    dci_status: 'running'
  tasks:
    - block:
        - name: Launch configure
          include_tasks: '{{ dci_config_dir }}/hooks/configure.yml'

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 4 : state "installing"
- name: 'Launch install'
  hosts: provisioner
  tags:
    - running
    - installing
  vars:
    dci_status: 'running'
  tasks:
    - block:
        # Launch installer
        - name: Launch installer
          include_tasks: plays/running.yml

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 5 : state "redhat-testing"
- name: 'Launch Red Hat tests'
  hosts: localhost
  tags:
    - running
    - testing
    - redhat-testing
  vars:
    dci_status: 'running'
  tasks:
    - block:
        - name: "dci-openshift-agent : Setup openshift access"
          include_role:
            name: oc-setup

        - name: "dci-openshift-agent : Setup podman on the jumphost"
          include_role:
            name: podman-setup

        - name: "dci-openshift-agent : Side-load podman images prior to testing"
          include_role:
            name: image-side-load

        - name: Run the Red Hat tests
          include_tasks: plays/dci-tests.yml
          when: dci_openshift_agent_conformance is defined and dci_openshift_agent_conformance != ""

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 6 : state "partner-testing"
- name: 'Launch partner tests'
  hosts: localhost
  tags:
    - running
    - testing
    - partner-testing
  vars:
    dci_status: 'running'
  tasks:
    - block:
        # Launch user tests
        - name: Run the partner tests hook
          include_tasks: '{{ dci_config_dir }}/hooks/user-tests.yml'

      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 7 : Post Run
- name: Launch post run
  hosts: localhost
  tags:
    - post-run
  vars:
    dci_status: 'post-run'
  tasks:
    - block:
        - include_tasks: plays/post-run.yml
      rescue:
        - name: Run the teardown process
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when: dci_teardown_on_failure|bool

        - name: Run the failure process
          include_tasks: plays/failure.yml

# Step 8 : state "success"
- name: 'Success'
  hosts: localhost
  tags:
    - success
  vars:
    dci_status: 'success'
  tasks:
    - name: Run the post-run hook
      include_tasks: '{{ dci_config_dir }}/hooks/success.yml'

    - name: Run the teardown process
      include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
      when: dci_teardown_on_failure|bool
