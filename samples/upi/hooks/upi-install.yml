---
- name: "Download kernel image"
  get_url:
    url: "{{ rhcos_pxe_kernel_path }}"
    dest: "/var/lib/tftpboot/rhcos/kernel"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: virt_content_t
    checksum: "sha256:{{ rhcos_pxe_kernel_sha256 }}"
    timeout: 1200
  register: pxe_img_file
  retries: 3
  delay: 10
  until: pxe_img_file is not failed
  become: true
  tags: rhcos_live

- name: "Download initramfs image"
  get_url:
    url: "{{ rhcos_pxe_initramfs_path }}"
    dest: "/var/lib/tftpboot/rhcos/initramfs.img"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: virt_content_t
    checksum: "sha256:{{ rhcos_pxe_initramfs_sha256 }}"
    timeout: 1200
  register: pxe_img_file
  retries: 3
  delay: 10
  until: pxe_img_file is not failed
  become: true
  tags: rhcos_live

- name: "Download rootfs image"
  get_url:
    url: "{{ rhcos_pxe_rootfs_path }}"
    dest: "/var/www/html/install/rootfs.img"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: virt_content_t
    checksum: "sha256:{{ rhcos_pxe_rootfs_sha256 }}"
    timeout: 1200
  register: pxe_img_file
  retries: 3
  delay: 10
  until: pxe_img_file is not failed
  become: true
  tags: rhcos_live

- name: Generate install-config.yaml
  template:
    src: install-config.j2
    dest: "{{ dir }}/install-config.yaml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644

- name: Make a backup of the install-config.yaml file
  copy:
    src: "{{ dir }}/install-config.yaml"
    dest: "{{ dir }}/install-config.yaml.bkup"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
    remote_src: yes

- name: Create OpenShift Manifests
  shell: |
    {{ ocp_binary_path }}/openshift-install --dir {{ dir }} create manifests
  
- name: Generate ignition configs
  shell: |
    {{ ocp_binary_path }}/openshift-install --dir {{ dir }} create ignition-configs

- name: Copy ignition files to /var/www/html/ignition
  copy:
    src: "{{ dir }}/{{ item }}.ign"
    dest: "/var/www/html/ignition/{{ item }}.ign"
    remote_src: yes
  become: true
  with_items:
    - "master"
    - "worker"
    - "bootstrap"

- name: Power off nodes
  ipmi_power:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    state: off
  register: power_off_hosts
  until: power_off_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Set boot to network
  ipmi_boot:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    bootdev: network
  register: network_boot_hosts
  until: network_boot_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Power on nodes
  ipmi_power:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    state: on
  register: power_on_hosts
  until: power_on_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Generate nodes var
  set_fact:
    nodes: "{{ nodes | default([]) + [{ 'node': item, 'ipmi_address': hostvars[item]['ipmi_address'], 'ipmi_user': hostvars[item]['ipmi_user'], 'ipmi_password': hostvars[item]['ipmi_password'], 'ipmi_port': hostvars[item]['ipmi_port'] | default(623) }]}}"
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Wait for nodes to provision
  upi_bootstrap:
    nodes: "{{ nodes }}"
    hostname: "{{ bootstrap_interface }}"
    serverport: 8000
  become: true

- name: Power off nodes
  ipmi_power:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    state: off
  register: power_off_hosts
  until: power_off_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Power on nodes
  ipmi_power:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    state: on
  register: power_on_hosts
  until: power_on_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['masters'] + groups['workers'] + groups['bootstrap'] }}"

- name: Wait for Bootstrap to Complete
  shell: |
    {{ ocp_binary_path }}/openshift-install --dir {{ dir }} --log-level debug wait-for bootstrap-complete
  register: wait_for_bootstrap_result
  until: wait_for_bootstrap_result is succeeded
  retries: "{{ increase_bootstrap_timeout| default(1)| int }}"
  delay: 1

- name: Power off Bootstrap Node
  ipmi_power:
    name: "{{ hostvars[item]['ipmi_address'] }}"
    user: "{{ hostvars[item]['ipmi_user'] }}"
    password: "{{ hostvars[item]['ipmi_password'] }}"
    port: "{{ hostvars[item]['ipmi_port'] | default(623) }}"
    state: off
  register: power_off_hosts
  until: power_off_hosts is not failed
  retries: 10
  delay: 5
  loop: "{{ groups['bootstrap'] }}"

- name: Wait for Install to Complete
  shell: |
    {{ ocp_binary_path }}/openshift-install --dir {{ dir }} --log-level debug wait-for install-complete
  register: wait_for_install_result
  until: wait_for_install_result is succeeded
  retries: "{{ increase_install_timeout| default(1)| int }}"
  delay: 1
...
