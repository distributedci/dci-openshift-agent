- name: Asserting target OS and version
  assert:
    that:
      - ansible_distribution in ['RedHat', 'CentOS']
      - ansible_distribution_major_version == '8'

- name: Verifying the status of subscription manager
  command: /usr/bin/subscription-manager status
  check_mode: no
  register: subscription_manager_status
  failed_when: no
  changed_when: no
  when: ansible_distribution == 'RedHat'

- name: Subscribe system to RHN
  redhat_subscription:
    state: present
    username: '{{ rhn_user }}'
    password: '{{ rhn_pass }}'
    syspurpose:
      usage: 'Development/Test'
      role: Red Hat Enterprise Linux Server
      service_level_agreement: 'Self-Support'
  register: new_subscription
  when: 'dci_disconnected | default(False) == False and ansible_distribution == "RedHat" and "Overall Status: Unknown" in subscription_manager_status.stdout'

- name: Enabling repositories
  rhsm_repository:
    name: '{{ item }}'
    state: enabled
  loop:
    - rhel-8-for-x86_64-appstream-rpms
    - rhel-8-for-x86_64-baseos-rpms
  when: 'ansible_distribution == "RedHat" and (new_subscription.changed or "Overall Status: Unknown" not in subscription_manager_status.stdout)'

- name: Installing the libvirt packages
  yum:
    name:
      - libvirt
      - qemu-kvm
      - mkisofs
      - python3-devel
      - jq
      - ipmitool
      - python3-libvirt
      - python3-lxml

- name: Installing the dnf-automatic package
  yum:
    name: dnf-automatic

- name: Setting up the dnf-automatic service
  #template:
  #dest: /etc/dnf/automatic.conf
  #src: etc_dnf_automatic.conf
  lineinfile:
    dest: /etc/dnf/automatic.conf
    line: apply_updates = yes
    regexp: .*apply_updates =.*
    create: yes

- name: Enabling the dnf-automatic service
  service:
    name: dnf-automatic.timer
    state: started
    enabled: yes

- name: Creating the dci user
  user:
    name: "{{ dci_provisioner_user | default(ansible_user) }}"
    groups: libvirt

- name: Setting sudo privileges for user dci
  copy:
    dest: "/etc/sudoers.d/{{ dci_provisioner_user | default(ansible_user) }}"
    content: "{{ dci_provisioner_user | default(ansible_user) }} ALL=(root) NOPASSWD:ALL\n"
    mode: 0440

- name: Setting the SSH directory
  file:
    path: "/home/{{ dci_provisioner_user | default(ansible_user) }}/.ssh"
    state: directory
    owner: "{{ dci_provisioner_user | default(ansible_user) }}"
    group: "{{ dci_provisioner_user | default(ansible_user) }}"
    mode: 0700

- name: Enabling the SSH public key for remote clients
  lineinfile:
    dest: "/home/{{ dci_provisioner_user | default(ansible_user) }}/.ssh/authorized_keys"
    line: '{{ lookup("file", "/tmp/" + hostvars[groups.jumpbox.0].inventory_hostname + "/var/lib/dci-openshift-agent/.ssh/id_rsa.pub") }}'
    create: yes
    owner: "{{ dci_provisioner_user | default(ansible_user) }}"
    group: "{{ dci_provisioner_user | default(ansible_user) }}"
    mode: 0600

- name: Check if firewalld is present
  service_facts:

- name: Activate firewall firewall
  service:
    name: firewalld
    state: started
    enabled: yes
  when: '"firewalld" in services'

- name: Set up firewall
  firewalld:
    zone: public
    service: http
    permanent: yes
    immediate: yes
    state: enabled
  when: '"firewalld" in services'

- name: Starting the libvirtd service
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: Gather libvirt_pool facts
  virt_pool:
    command: facts

- name: Setting up the default storage pool
  virt_pool:
    name: default
      #command: create
    command: define
      #state: active
    xml: |
      <pool type='dir'>
        <name>default</name>
        <target>
          <path>/var/lib/libvirt/images</path>
        </target>
      </pool>
  when: "'default' not in ansible_libvirt_pools"

- name: Build the storage pool
  virt_pool:
    name: default
    command: build
  when:
    - "'default' not in ansible_libvirt_pools"
    - "ansible_libvirt_pools.default.state is not 'active'"

- name: Activate the storage pool
  virt_pool:
    name: default
    state: activate
    autostart: yes
  when:
    - "'default' not in ansible_libvirt_pools"
    - "ansible_libvirt_pools.default.state is not 'active'"

- name: Disconnect provisioning bridge connection
  command: |
    nmcli dev dis "provisioning"
  ignore_errors: yes

- name: Delete provisioning due to modify nmcli bug
  nmcli:
    conn_name: provisioning
    type: ethernet
    state: absent

- name: Delete {{ prov_nic }} due to modify nmcli bug
  nmcli:
    conn_name: "{{ item }}"
    type: ethernet
    state: absent
  loop:
    - "{{ prov_nic }}"
    - "System {{ prov_nic }}"

- name: Delete provisioning bridge if it exists
  nmcli:
    conn_name: provisioning
    state: absent

- name: set provisioning network fact
  set_fact:
    prov_bridge_ip: "{{ prov_network | next_nth_usable(1) }}/{{ prov_network | ipaddr('prefix') }}"
  when:
    - prov_network is defined and prov_network

- name: Create Bridge labeled provisioning bridge ipv4
  nmcli:
    conn_name: provisioning
    type: bridge
    ifname: provisioning
    autoconnect: yes
      #ip4_method: manual
      #ip6_method: disabled
    stp: off
    ip4: "{{ prov_bridge_ip | default('172.22.0.1/21') }}"
    state: present

- name: Create Bridge slave on provisioning nic ipv4
  nmcli:
    conn_name: "{{ prov_nic }}"
    type: bridge-slave
    hairpin: no
    ifname: "{{ prov_nic }}"
    master: provisioning
    autoconnect: yes
    state: present

- name: Create Bridge labeled baremetal for ipv4
  nmcli:
    conn_name: baremetal
    type: bridge
    ifname: baremetal
    autoconnect: yes
    stp: off
    state: present

- name: Create Bridge slave on {{ pub_nic }}
  nmcli:
    conn_name: "{{ pub_nic }}"
    type: bridge-slave
    hairpin: no
      #id: "{{ pub_nic }}"
    ifname: "{{ pub_nic }}"
    master: baremetal
    autoconnect: yes
    state: present

- name: Reload baremetal bridge and slave interfaces
  shell: |
    /usr/bin/nmcli con reload {{ item }}; /usr/bin/nmcli con up {{ item }}
  loop:
    - baremetal
    - "{{ pub_nic }}"

- name: Reload provisioning bridge and slave interfaces
  shell: |
    /usr/bin/nmcli con reload {{ item }}; /usr/bin/nmcli con up {{ item }}
  loop:
    - baremetal
    - "{{ prov_nic }}"

- name: Start dhclient for the baremetal connection
  shell: |
    pkill dhclient;
    sleep 10;
    dhclient baremetal;
