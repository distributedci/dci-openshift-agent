---
- name: Get all worker nodes
  community.kubernetes.k8s_info:
    kind: Node
    label_selectors:
      - "node-role.kubernetes.io/worker"
  register: nodes

- name: "Modify the number of unavailable workers to n-2 when >= 4 are available"
  vars:
    worker_node_count: "{{ nodes.resources | length }}"
    mcp_def: |
      apiVersion: machineconfiguration.openshift.io/v1
      kind: MachineConfigPool
      metadata:
        name: worker
      spec:
        maxUnavailable: {{ worker_node_count | int - 2 }}
  community.kubernetes.k8s:
    state: present
    definition: "{{ mcp_def }}"
  when:
    - increase_unavailable_workers | default(True) | bool
    - install_type is undefined or install_type != 'sno'
    - acm_cluster_type | default('') not in ['hypershift', 'sno']
    - worker_node_count | int  >= 4

- name: Create NUMAResourcesOperator CRD
  vars:
    nro_def: |
      apiVersion: nodetopology.openshift.io/v1
      kind: NUMAResourcesOperator
      metadata:
        name: numaresourcesoperator
      spec:
        nodeGroups:
        - machineConfigPoolSelector:
            matchLabels:
              pools.operator.machineconfiguration.openshift.io/worker: ""
  community.kubernetes.k8s:
    state: present
    definition: "{{ nro_def }}"

- name: Get cluster install-config
  community.kubernetes.k8s_info:
    api: v1
    kind: ConfigMap
    name: cluster-config-v1
    namespace: kube-system
  register: ic
  until: "'resources' in ic and ic.resources != []"
  retries: 12
  delay: 5
  no_log: true

- name: Get worker MCP status
  community.kubernetes.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: worker
  register: reg_mcpool_worker

- name: Get control-plane MCP status
  community.kubernetes.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: master
  register: reg_mcpool_controlplane

- name: "Pause 60 seconds to wait for MC triggered by NRO CRD starts the node changes"
  pause:
    seconds: 60
  when:
    - install_type is undefined or install_type != 'sno'
    - reg_mcpool_worker.resources[0].status.machineCount >= 1 or reg_mcpool_controlplane.resources[0].status.machineCount >= 1
  no_log: true

- name: "Wait for SNO node to be available"
  vars:
    install_config: "{{ ic.resources[0].data['install-config'] | from_yaml }}"
    control_plane_size: "{{ install_config | json_query('controlPlane.replicas') }}"
  block:
    - name: "Pause 60 seconds to wait for NRO CRD triggers SNO reboot"
      pause:
        seconds: 60

    - name: "Wait for API to be available"
      uri:
        url: "https://api.{{ cluster }}.{{ domain is defined | ternary(domain, base_dns_domain) }}:6443/readyz"
        validate_certs: no
        return_content: yes
      register: api_ready
      until:
        - "'ok' in api_ready.content"
        - api_ready.status == 200
      retries: 15
      delay: 60

    - name: "Wait for SNO node to be in Ready state"
      community.kubernetes.k8s_info:
        api: v1
        kind: Node
      register: cluster_nodes
      until:
        - cluster_nodes.resources is defined
        - "'True' in cluster_nodes.resources[0].status.conditions | to_json | from_json | json_query(query)"
      vars:
        query: "[?contains(type, 'Ready')].status"
      retries: 90
      delay: 10
  when:
      control_plane_size | int == 1

- name: Wait for MCP status
  include_role:
    name: redhatci.ocp.check_resource
  vars:
    resource_to_check: "MachineConfigPool"
    check_wait_retries: "{{ 16 * (groups['workers'] | default(groups['masters']) | length + 1 ) }}"
    check_wait_delay: 60
    check_reason: "NRO installation"

- name: Mirroring the NRO scheduler image
  include_role:
    name: redhatci.ocp.mirror_images
  vars:
    nro_image_pub: "registry.redhat.io/openshift4/noderesourcetopology-scheduler-container-rhel8"
    nro_image_tag: "v{{ ocp_version_maj }}.{{ ocp_version_min }}"
    images: ["{{ nro_image_pub }}:{{ nro_image_tag }}"]
    authfile: "{{ dci_pullsecret_file }}"
  when:
    - dci_disconnected | default(false) | bool

- name: Deploying the NUMA-aware secondary pod scheduler
  vars:
    nro_image_pub: "registry.redhat.io/openshift4/noderesourcetopology-scheduler-container-rhel8"
    nro_image_tag: "v{{ ocp_version_maj }}.{{ ocp_version_min }}"
    nro_image: "{{ dci_disconnected | default(false) | bool |
               ternary (dci_local_registry+'/openshift4/noderesourcetopology-scheduler-container-rhel8:'+nro_image_tag,
               nro_image_pub+':'+nro_image_tag) }}"
    nro_sch_def: |
      apiVersion: nodetopology.openshift.io/v1alpha1
      kind: NUMAResourcesScheduler
      metadata:
        name: numaresourcesscheduler
      spec:
        imageSpec: "{{ nro_image }}"
  community.kubernetes.k8s:
    state: present
    definition: "{{ nro_sch_def }}"

- name: "Confirm that NUMA schedule pods are Running"
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Pod
    namespace: openshift-numaresources
    label_selectors:
      - app = secondary-scheduler
  register: pod_list
  until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
  retries: 9
  delay: 10

- name: Reset maxUnavailable count to default value 1
  community.kubernetes.k8s:
    definition:
      kind: MachineConfigPool
      metadata:
        name: worker
      spec:
        maxUnavailable: 1
...
