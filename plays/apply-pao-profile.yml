---
- name: Wait for Performance Addon Operator endpoint to become available
  pause:
    seconds: 60
  when:
    - install_type is defined and install_type == 'sno'
    - ocp_version_maj|int == 4
    - ocp_version_min|int <= 10

- name: Create PerformanceProfile
  community.kubernetes.k8s:
    definition: "{{ lookup('file', performance_definition) }}"
  register: profile_state
  retries: 5
  delay: 60
  until: profile_state is not failed

- name: Wait (up to 5 mins) for Performance Profile KubeletConfig creation
  community.kubernetes.k8s_info:
    api: machineconfiguration.openshift.io/v1
    kind: KubeletConfig
    name: "performance-{{ profile_state.result.metadata.name }}"
    namespace: default
  register: kubelet
  retries: 30
  delay: 10
  until:
    - kubelet.resources is defined
    - kubelet.resources | length == 1
  failed_when:
    - kubelet.resources | length != 1
  when:
    - profile_state is defined
    - profile_state.changed | bool

- name: Set Performance Profile KubeletConfig creation time
  set_fact:
    perf_kubelet_timestamp: "{{ kubelet.resources[0].metadata.creationTimestamp }}"

- name: Verify if there are worker nodes available in the MCP
  community.kubernetes.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: worker
  register: reg_mcpool_worker

- name: Wait (up to 10 mins) for rendered-worker MC triggered by Performance Profile
  community.kubernetes.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfig
  register: reg_worker_mc
  vars:
    worker_mc_query: "[?contains(metadata.name, 'rendered-worker')].metadata.creationTimestamp"
    worker_mc_timestamp: "{{ reg_worker_mc.resources | to_json | from_json | json_query(worker_mc_query) | sort | last }}"
  until:
    - reg_worker_mc.resources is defined
    - worker_mc_timestamp > perf_kubelet_timestamp
  retries: 60
  delay: 10
  when:
    - install_type is undefined or install_type != 'sno'
    - reg_mcpool_worker.resources[0].status.machineCount >= 1
    - profile_state.result.spec.nodeSelector is search('worker')

- name: Wait (up to 10 mins) for rendered-master MC triggered by Performance Profile
  community.kubernetes.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfig
  register: reg_master_mc
  vars:
    master_mc_query: "[?contains(metadata.name, 'rendered-master')].metadata.creationTimestamp"
    master_mc_timestamp: "{{ reg_master_mc.resources | to_json | from_json | json_query(master_mc_query) | sort | last }}"
  until:
    - reg_master_mc.resources is defined
    - master_mc_timestamp >= perf_kubelet_timestamp
  retries: 60
  delay: 10
  when:
    - install_type is undefined or install_type != 'sno'
    - reg_mcpool_worker.resources[0].status.machineCount >= 1
    - profile_state.result.spec.nodeSelector is search('master')

- name: "Pause 60 seconds to wait for MC triggered by Performance Profile starts the node changes"
  pause:
    seconds: 60
  when:
    - install_type is undefined or install_type != 'sno'
    - reg_mcpool_worker.resources[0].status.machineCount >= 1
  no_log: true

- name: "Wait for SNO node to be available"
  block:
    - name: "Pause 60 seconds to wait for Performance Profile triggers SNO reboot"
      pause:
        seconds: 60
      when:
        - profile_state is defined
        - profile_state.changed | bool

    - name: "Wait for API to be available"
      uri:
        url: "https://api.{{ cluster }}.{{ domain is defined | ternary(domain, base_dns_domain) }}:6443/readyz"
        validate_certs: no
        return_content: yes
      register: api_ready
      until:
        - "'ok' in api_ready.content"
        - api_ready.status == 200
      retries: 15
      delay: 60

    - name: "Wait for SNO node to be in Ready state"
      community.kubernetes.k8s_info:
        api: v1
        kind: Node
      register: cluster_nodes
      until:
        - cluster_nodes.resources is defined
        - "'True' in cluster_nodes.resources[0].status.conditions | to_json | from_json | json_query(query)"
      vars:
        query: "[?contains(type, 'Ready')].status"
      retries: 90
      delay: 10
  when:
    - install_type is defined
    - install_type == "sno" or reg_mcpool_worker.resources[0].status.machineCount == 0

- name: Wait for MCP status
  include_role:
    name: check-resource
  vars:
    resource_to_check: "MachineConfigPool"
    check_wait_retries: "{{ 14 * (groups['workers'] | default([]) | length + 1 ) }}"
    check_wait_delay: 60
    check_reason: "PAO installation"
...
