---
- name: Deploy a ZTP spoke cluster with SiteConf Operator
  ansible.builtin.include_tasks:
    file: acm-ztp-spoke-clusterinstance.yml
  when:
    - acm_cluster_type == 'ztp-spoke-clusterinstance'
  # TODO: ACM naming needs a review, now we have multiple ways to reference it
  # By number of nodes: SNO, MNO
  # By installer: AI, ABI, HCP.
  # By ZTP: with gitops, without it.
  # On top of that we have diff concepts for clusters from ACM: spoke, managed

- name: "Deploy a ZTP spoke cluster"
  ansible.builtin.include_tasks:
    file: acm-ztp-spoke.yml
  when:
    - acm_cluster_type == 'ztp-spoke'

- name: "Deploy an SNO node via ACM"
  vars:
    acm_ocp_version: "{{ hostvars.jumphost.version }}"
    acm_release_image: "{{ hostvars.jumphost.acm_release_image }}"
    acm_force_deploy: "{{ dci_force_deploy_spoke | default(false) | bool }}"
    acm_cluster_name: "{{ hostvars.jumphost.acm_cluster_name }}"
    acm_base_domain: "{{ hostvars.jumphost.acm_base_domain }}"
    acm_bmc_address: "{{ hostvars.jumphost.acm_bmc_address }}"
    acm_boot_mac_address: "{{ hostvars.jumphost.acm_boot_mac_address }}"
    acm_machine_cidr: "{{ hostvars.jumphost.acm_machine_cidr }}"
    acm_bmc_user: "{{ hostvars.jumphost.acm_bmc_user }}"
    acm_bmc_pass: "{{ hostvars.jumphost.acm_bmc_pass }}"
    acm_iso_url: "{{ hostvars.jumphost.acm_metal_iso_location }}"
    acm_root_fs_url: "{{ hostvars.jumphost.acm_rootfs_url }}"
    acm_disconnected: "{{ dci_disconnected | default(False) | bool }}"
    acm_user_registry: "{{ acm_registries }}"
  ansible.builtin.include_role:
    name: redhatci.ocp.acm_sno
    apply:
      environment:
        - KUBECONFIG: "{{ hub_kubeconfig_path }}"
  when:
    - acm_cluster_type == 'sno'

- name: "Deploy a MetalLB and Hypershift cluster via ACM"
  when:
    - acm_cluster_type == 'hypershift'
  block:
    - name: "Setup MetalLB in L2 mode"
      ansible.builtin.include_role:
        name: redhatci.ocp.metallb_setup
      vars:
        mlb_ipaddr_pool: "{{ metallb_ipaddr_pool_l2 }}"
        apply:
          environment:
            - KUBECONFIG: "{{ hub_kubeconfig_path }}"
      when:
        - metallb_ipaddr_pool_l2 | default('') | length

    - name: Set Release Image Digest
      when: not acm_release_image | regex_search('@sha256:')
      block:
        - name: Get catalog Digest
          ansible.builtin.shell:
            cmd: >
              set -eo pipefail;
              skopeo inspect
              --tls-verify=false
              --authfile "{{ dci_pullsecret_file }}"
              docker://{{ acm_release_image }} |
              jq -r '.Digest'
          register: release_digest
          retries: 5
          delay: 5
          changed_when: release_digest.rc == 0
          until:
            - release_digest.stdout | regex_search('^sha')

        - name: Set release image with digest
          vars:
            release_base_image: "{{ acm_release_image | regex_search('(^.+):', '\\1') | first }}"
          ansible.builtin.set_fact:
            acm_release_image: "{{ release_base_image }}@{{ release_digest.stdout }}"

    - name: "Deploy a Hypershift cluster via ACM"
      vars:
        ah_pullsecret_file: "{{ dci_pullsecret_file }}"
        ah_disconnected: "{{ dci_disconnected | default(False) | bool }}"
        ah_release_image: "{{ acm_release_image }}"
        ah_force_deploy: true
      ansible.builtin.include_role:
        name: redhatci.ocp.acm_hypershift
        apply:
          environment:
            - KUBECONFIG: "{{ hub_kubeconfig_path }}"

- name: Save the kubeconfig ({{ acm_cluster_type }})
  ansible.builtin.copy:
    content: "{{ acm_kubeconfig_text }}"
    dest: "{{ dci_cluster_configs_dir }}/kubeconfig"
    mode: '0600'

- name: Save credentials ({{ acm_cluster_type }})
  ansible.builtin.copy:
    content: "{{ acm_cluster_type }} credentials\n
              ---\n
              username: {{ acm_kubeconfig_user }}\n
              password: {{ acm_kubeconfig_pass }}\n"
    dest: "{{ dci_cluster_configs_dir }}/kubeadmin-password"
    mode: '0600'
  no_log: true
...
