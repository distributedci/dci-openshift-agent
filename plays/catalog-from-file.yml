---
- name: "Mirror operators from directory"
  ansible.builtin.include_role:
    name: redhatci.ocp.mirror_from_directory
  vars:
    mfd_local_registry: "{{ dci_local_registry }}"
    mfd_operators_dir: "{{ operator_catalog_dir }}"

- name: "Apply IDMS on 4.14+"
  block:
    - name: Transform ICSP to IDMS on 4.14+
      ansible.builtin.shell:
        cmd: >
          {{ oc_tool_path }} adm migrate icsp
          {{ mdf_image_source_file }}
          --dest-dir {{ image_dir }}
      register: migrate_result

    - name: Set image source file fact
      ansible.builtin.set_fact:
        image_source_file: "{{ migrate_result.stdout_lines[0].split(' ')[-1] }}"

    - name: "Apply the Image Source manifest"
      community.kubernetes.k8s:
        definition: "{{ lookup('template', image_source_file) | from_yaml }}"
  when: ocp_version is version('4.14', '>=')

- name: "Apply the Image Source manifest"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', mdf_image_source_file) | from_yaml }}"
  when: 
    - ocp_version is version('4.13', '<=')
    - mdf_image_source_file is defined

- name: "Create the Catalogsource for from-file operators"
  vars:
    catsrc_manifest: "{{ lookup('file', mdf_catalog_source_file) }}"
    index_image: "{{ catsrc_manifest | from_yaml | json_query('spec.image') }}"
  block:
    - name: "Create CatalogSource for from-file operators"
      ansible.builtin.include_role:
        name: redhatci.ocp.catalog_source
      vars:
        cs_name: "{{ operator_catalog_dir_name }}"
        cs_image: "{{ index_image }}"

    - name: "Get index image creation date"
      ansible.builtin.shell:
        cmd: >
          skopeo inspect
          --tls-verify=false
          {% if dci_pullsecret_file is defined %}
          --authfile {{ dci_pullsecret_file }}
          {% endif %}
          docker://{{ index_image }} |
          jq -r '.Created' |
          cut -d. -f1
      register: index_creation
      retries: 2
      delay: 10
      until: index_creation.rc == 0

    - name: "Create a component with the used tarball's data"
      environment:
        - DCI_CLIENT_ID: "{{ dci_client_id }}"
        - DCI_API_SECRET: "{{ dci_api_secret }}"
        - DCI_CS_URL: "{{ dci_cs_url }}"
      dci_component:
        display_name: "index_creation_date {{ index_creation.stdout }}"
        url: "{{ index_image }}"
        version: "{{ index_creation.stdout }}"
        team_id: "{{ job_info['job']['team_id'] }}"
        topic_id: "{{ job_info['job']['topic_id'] }}"
        type: index_creation_date
        state: present
      register: operator_component
      ignore_errors: yes

    - name: "Attach operators_dir component to the job"
      dci_job_component:
        component_id: "{{ operator_component.component.id }}"
        job_id: "{{ job_id }}"
      register: job_component_result
      until: job_component_result is not failed
      retries: 5
      delay: 20
      when:
        - "'component' in operator_component"
        - "'id' in operator_component.component"
      ignore_errors: true
  when:
    - mdf_catalog_source_file is defined
    - mdf_catalog_source_file | length

- name: "Check if operators.txt exists"
  ansible.builtin.stat:
    path: "{{ operator_catalog_dir }}/operators.txt"
  register: ops_stat

- name: "Move the operators.txt to the logs dir"
  ansible.builtin.copy:
    src: "{{ operator_catalog_dir }}/operators.txt"
    dest: "{{ job_logs.path }}/from-file-operators.txt"
    mode: "644"
  when: ops_stat.stat.exists

- name: "Delete workspaces directories"
  ansible.builtin.file:
    state: absent
    path: "{{ mdf_manifests_dir }}"
  when:
    - mdf_manifests_dir is defined
    - mdf_manifests_dir | length

- name: "Update catalogSource name"
  ansible.builtin.set_fact:
    opm_catalog_source_name: "{{ operator_catalog_dir_name }}"
...
