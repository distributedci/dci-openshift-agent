---

- name: "Get cluster pull-secret"
  include_tasks: get-cluster-pullsecret.yml

- name: "Get registry mirror registry details"
  when:
    - dci_disconnected | default(false) | bool
    - acm_cluster_type in ('sno', 'hypershift')

  block:
    - name: Check if IDMS is supported
      community.kubernetes.k8s_info:
        kind: CustomResourceDefinition
        name: imagedigestmirrorsets.config.openshift.io
      register: idms_res
      no_log: true

    - name: "Get Hub Image Source Type"
      community.kubernetes.k8s_info:
        api_version: "{{ idms_res.resources is defined and idms_res.resources | length | ternary('config.openshift.io/v1', 'operator.openshift.io/v1alpha1') }}"
        kind: "{{ idms_res.resources is defined and idms_res.resources | length | ternary('ImageDigestMirrorSet', 'ImageContentSourcePolicy') }}"
      register: hub_is
      no_log: true

    - name: "Set hub_registry"
      vars:
        hub_query: "spec.*[*].mirrors[0]"
      set_fact:
        hub_registry: "docker://{{ hub_is.resources[0] | json_query(hub_query) | flatten | first }}"

    - name: "Set hub_registry location"
      set_fact:
        ocp_release_path: "{{ local_repo | default('ocp-' + version.split('.')[:2] | join('.') + '/' + version, true) }}"

    - name: "Set hub_registry location - hypershift"
      set_fact:
        ocp_release_path: "{{ hub_registry | regex_replace('^.*?://[^/]+(:[0-9]+)?/', '') }}"
      when:
        - acm_cluster_type in ('hypershift')

    - name: "Set hub mirrors"
      vars:
        hub_mirrors_type: "resources[*].spec.*[*].{mirrors: mirrors, source: source}"
      set_fact:
        hub_mirrors: "{{ hub_is | json_query(hub_mirrors_type) | flatten }}"
      when: hub_is | length > 0
      no_log: true

    - name: "Validate webserver_url variable is defined"
      assert:
        that:
          - hostvars.localhost.webserver_url | string
          - (hostvars.localhost.webserver_url | urlsplit('scheme')) in ('http', 'https',)

    - name: "Mirror OCP release artifacts - Disconnected"
      include_role:
        name: redhatci.ocp.mirror_ocp_release
      vars:
        mor_version: "{{ version }}"
        mor_pull_url: "{{ version_pull_url }}"
        mor_cache_dir: "{{ provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}"
        mor_webserver_url: "{{ hub_webserver_url | default(None) }}"
        mor_registry_url: "{{ hub_registry | urlsplit('netloc') }}"
        mor_registry_path: "{{ ocp_release_path }}"
        mor_auths_file: "{{ dci_pullsecret_file }}"
        mor_force: false
        mor_install_type: "{{ install_type }}"
        mor_mirror_disk_images: "{{ dci_disconnected | default(False) | bool }}"
        mor_mirror_container_images: "{{ dci_disconnected | default(False) | bool }}"
        mor_write_custom_config: false
        mor_build: "{{ build }}"
        mor_oc: "{{ oc_tool_path }}"

    # This may be require for ACM baremetal based installation
    - name: "Convert Image Source to registries.conf format"
      vars:
        img_src_paths:
          - "{{ provision_cache_store }}/{{ version }}/imagesource.yaml"
          - "{{ provision_cache_store }}/{{ version }}/imagecontentsourcepolicy.yaml"
        hub_src_path: "{{ lookup('first_found', img_src_paths) }}"
        hub_query: "spec.*[*].{mirrors: mirrors, source: source}"
        spoke_mirrors: >
          {{ lookup('file', hub_src_path) |
             from_yaml |
             json_query(hub_query) |
             first
          }}
        combined_mirrors: |-
          {%- set c = dict() %}
          {%- for mirror in hub_mirrors + spoke_mirrors %}
          {%- set s = mirror.source %}
          {%- set m = mirror.mirrors %}
          {%- if c.get(s) %}
          {{ c.update({s: c[s] + m}) }}
          {%- else %}
          {{ c.update({s: m}) }}
          {%- endif %}
          {%- endfor %}
          {{ c }}
      set_fact:
        acm_registries: |
          unqualified-search-registries = ["registry.access.redhat.com", "docker.io"]
          short-name-mode = ""

          {% for registry in combined_mirrors.keys() | list %}
          [[registry]]
            prefix = ""
            location = "{{ registry }}"
            mirror-by-digest-only = true

          {% for mirror in combined_mirrors[registry] | unique | list %}
            [[registry.mirror]]
              location = "{{ mirror }}"

          {% endfor %}
          {% endfor %}

          [[registry]]
            prefix = ""
            location = "registry.redhat.io/multicluster-engine"
            mirror-by-digest-only = true

            [[registry.mirror]]
              location = "{{ hub_registry | urlsplit('netloc') }}/multicluster-engine"
      when:
        - acm_cluster_type in ('sno')

    - name: "Set facts for install via ACM - disconnected"
      set_fact:
        acm_metal_iso_location: "{{ hostvars.localhost.webserver_url }}/{{ ocp_release_data['rhcos_images']['metal_iso_location'] | basename }}"
        acm_rootfs_url: "{{ hostvars.localhost.webserver_url }}/{{ ocp_release_data['rhcos_images']['metal_pxe_rootfs_location'] | basename }}"
        acm_release_image: "{{ hub_registry | urlsplit('netloc') }}/{{ ocp_release_path }}"
        dci_local_registry: "{{ hub_registry | urlsplit('netloc') }}"

    - name: "Mirror must gather images"
      include_role:
        name: redhatci.ocp.mirror_images
      vars:
        images: "{{ dci_must_gather_images | default(['registry.redhat.io/openshift4/ose-must-gather']) }}"
        authfile: "{{ dci_pullsecret_file }}"

- name: "Get OCP release artifacts"
  when:
    - not (dci_disconnected | default(false) | bool)
    - acm_cluster_type in ('sno', 'hypershift')
  block:
    - name: Mirror release
      include_role:
        name: redhatci.ocp.mirror_ocp_release
      vars:
        mor_version: "{{ version }}"
        mor_pull_url: "{{ version_pull_url }}"
        mor_cache_dir: "{{ provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}"
        mor_webserver_url: "{{ hub_webserver_url | default(None) }}"
        mor_auths_file: "{{ dci_pullsecret_file }}"
        mor_force: true
        mor_install_type: "{{ install_type }}"
        mor_mirror_disk_images: false
        mor_mirror_container_images: false
        mor_write_custom_config: false
        mor_build: "{{ build }}"
        mor_oc: "{{ oc_tool_path }}"

    - name: "Set facts for install via ACM - connected"
      set_fact:
        acm_metal_iso_location: "{{ ocp_release_data.rhcos_images.metal_iso_location }}"
        acm_rootfs_url: "{{ ocp_release_data.rhcos_images.metal_pxe_rootfs_location }}"
        acm_release_image: "{{ ocp_release_data['container_image'] | quote }}"
...
