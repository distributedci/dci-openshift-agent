#!/bin/bash
#
# Copyright (C) 2020-2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Description: A shell script that collects logs from the infrastructure components
# used by the IPI installer
# It requires connections details for the provisioner host and the cluster servers

set -x

if [ $# -lt 3 ]; then
    echo "Usage: $0 <provisioner_user@<provisioner_host> <log_dir_dir> <servers>" 1>&2
    echo "Eg: kni@provisioner.lab /tmp/logs master-0.cluster.lab master-1.cluster.lab master-2.cluster.lab"
    exit 1
fi

user_at_provisioner=$1
log_dir="$2"

ssh_ops="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o ConnectTimeout=10"
prov_cmd="timeout -v 20m ssh ${ssh_ops} ${user_at_provisioner}"

# Copy openshift install log_dir and rendered install config
scp ${ssh_ops} "${user_at_provisioner}":clusterconfigs/.openshift_install.log "${log_dir}/openshift_install.log"
scp ${ssh_ops} "${user_at_provisioner}":clusterconfigs/install-config.yaml.bkup "${log_dir}/install-config-yaml.txt"
scp ${ssh_ops} "${user_at_provisioner}":clusterconfigs/.openshift_install_state.json "${log_dir}/openshift_install_state.json"

# Get all possible IPs used by bootstrap VM
ips=()
bm_data=$(jq '."*installconfig.InstallConfig".config.platform.baremetal' "${log_dir}/openshift_install_state.json")
## provisioning IP
if jq -e '.bootstrapProvisioningIP' <<< "${bm_data}" >/dev/null; then
  ips+=($(jq -r '.bootstrapProvisioningIP' <<< "${bm_data}"))
fi

## bootstrap static IP
if jq -e '.bootstrapExternalStaticIP' <<< "${bm_data}" >/dev/null; then
  ips+=($(jq -r '.bootstrapExternalStaticIP' <<< "${bm_data}"))
fi

## bootstrap DHCP IP
ext_mac=$(jq -r '.externalMACAddress' <<< "${bm_data}")
vm=$(LANG=en_US.UTF-8 ${prov_cmd} sudo virsh list | awk '/.*-bootstrap\s+running/ {print $2}')
if [ -n "${vm}" ]; then
  ips+=($(LANG=en_US.UTF-8 ${prov_cmd} sudo virsh domifaddr --source arp "${vm}" |
    awk '/'${ext_mac}'/ {print $4}' |
    cut -d'/' -f1)
  )
fi

## apiVIPs
api_key="apiVIPs[0]"
if jq -e '.apiVIP' <<< "${bm_data}" >/dev/null; then
  api_key=apiVIP
fi
ips+=($(jq -r ".${api_key}" <<< "${bm_data}"))

active_ip=""
if [ -n "${vm}" ]; then
  for ip in "${ips[@]}"; do
    if ${prov_cmd} ssh ${ssh_ops} core@"${ip}" hostname 2>/dev/null; then
      active_ip=${ip}
      break
    fi
  done
else
  echo "No running bootstrap VM found"
fi

echo "Collect logs from bootstrap VM if SSHable"
if [ -n "${active_ip}" ]; then
  echo "Collect logs on VM via: ${active_ip}"
  core="ssh ${ssh_ops} core@${active_ip}"

  # Installer logs
  for nodes in "${nodes[@]}"; do
    nodes_param+=" --master $nodes.$domain"
  done

  # Collect the bootstrap logs
  ${prov_cmd} openshift-baremetal-install gather bootstrap --dir=/tmp/gatherBootstrap --bootstrap "${active_ip} ${nodes_param}"
  scp ${ssh_ops} "${user_at_provisioner}:/tmp/gatherBootstrap/*" "${log_dir}"

  $prov_cmd rm /tmp/gatherBootstrap/*

  # Collect services logs
  for serv in release-image bootkube; do
    $prov_cmd "${core}" journalctl -b -u $serv.service > "${log_dir}"/$serv.log
  done

  # Log for  dnsmasq, httpd, ironic-api, ironic-conductor, ironic-inspector pods
  for pod in $(${prov_cmd} "${core}" sudo podman ps -a 2>&1 | sed 's/.* //'|grep -Ev '^(hosts\.|NAMES$)'); do
    $prov_cmd "${core}" sudo podman logs "${pod}" >> "${log_dir}/${pod}.log" 2>&1
  done
fi

echo "Gather host's journals"
domain=$(${prov_cmd} hostname -d)
shift 2
# Removing domain name
nodes=()
for name in "$@"; do
  host_name=$(echo "$name" | cut -d"." -f1)
  nodes+=("${host_name}")
done

for h in "${nodes[@]}"; do
  ${prov_cmd} ssh ${ssh_ops} \
    core@"${h}.${domain}" 'sudo journalctl --all --since \"4 hours ago\"' > "${log_dir}/journal-${h}.log"
done
