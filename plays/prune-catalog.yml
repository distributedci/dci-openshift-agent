---
- name: "Loop control for pruning"
  vars:
    index_tag: "v{{ ocp_major }}.{{ ocp_minor }}_{{ ansible_date_time.iso8601_basic }}"
  set_fact:
    fallback_counter: "{{ fallback_counter | int + 1 }}"
    dci_prune_index: "{{ dci_local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}"

- name: "Prune a catalog"
  include_role:
    name: redhatci.ocp.prune_catalog
  vars:
    pc_source_catalog: "{{ operators_index | default('registry.redhat.io/redhat/redhat-operator-index:v' + ocp_major + '.' + ocp_minor) }}"
    pc_destination_catalog: "{{ dci_prune_index }}"
    pc_operators: "{{ mirror_list }}"
    pc_expire: true
    pc_expire_time: 24h
    pc_ignore_pull_errors: true
    pc_opm_args: "--skip-tls-verify=true"

- name: "Check if the pruned catalog was built"
  podman_image_info:
    name: "{{ dci_prune_index }}"
  register: pruned_info

- name: "Set index found flag"
  set_fact:
    index_found: "{{ pruned_info.images | length == 1 }}"
    operators_count: 0

- block:
    - name: "Push the new index image to the local registry"
      shell:
        cmd: >
          podman push
          {{ dci_prune_index }}
          {% if dci_pullsecret_file is defined %}
          --authfile {{ dci_pullsecret_file }}
          {% endif %}
      register: cat_push
      retries: 3
      delay: 10
      until: cat_push.rc == 0

    - name: "Use the grpc API to explore the pruned catalog index"
      shell:
        cmd: >
          podman run
          --rm
          --detach
          --publish 50051
          {{ dci_prune_index }}
      register: grpc_container_id

    - name: "Get dynamic port assigned to grpc"
      shell:
        cmd: >
          podman inspect {{ grpc_container_id.stdout }} |
          jq '.[].NetworkSettings.Ports."50051/tcp"[].HostPort'
      register: grpc_port

    - name: "Get the operators available in the pruned catalog"
      shell:
        cmd: >
          grpcurl -plaintext
          localhost:{{ grpc_port.stdout }}
          api.Registry/ListPackages |
          jq ".name"
      register: packages_list

    - name: "List operators available in the pruned catalog"
      debug:
        msg: "{{ packages_list.stdout }}"

    - name: "Get the number of operators in the pruned catalog"
      shell:
        cmd: >
          grpcurl -plaintext
          localhost:{{ grpc_port.stdout }}
          api.Registry/ListPackages |
          jq -s length
      register: prune_count

    - name: "Set pruned operator count"
      set_fact:
        operators_count: "{{ prune_count.stdout }}"

    - name: "Remove grpc-api container"
      shell:
        cmd: >
          podman stop
          --ignore
          {{ grpc_container_id.stdout }}

    - name: "Remove local index image"
      shell:
        cmd: >
          podman rmi
          --force
          {{ dci_prune_index }}
  when:
    - index_found

- name: "Set new minor version when operators are missing"
  set_fact:
    ocp_minor: "{{ ocp_minor | int -1 }}"
  when: operators_count | int != mirror_list | length

- name: "Prune a catalog - Fallback"
  include_tasks: prune-catalog.yml
  when:
    - fallback_counter | int <= 3
    - operators_count | int != mirror_list | length
...
