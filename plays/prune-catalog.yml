---
- name: "Loop control for prunning"
  set_fact:
    fallback_counter: "{{ fallback_counter | int + 1 }}"

- name: "Define pruned index tag"
  set_fact:
    index_tag: "{{ ocp_major }}.{{ ocp_minor }}_{{ ansible_date_time.iso8601_basic }}"

- name: "Set operator source index"
  set_fact:
    source_index: "{{ operators_index | default('registry.redhat.io/redhat/redhat-operator-index:v' + ocp_major + '.' + ocp_minor) }}"

- name: "Create index working directory"
  file:
    path: "{{ tmp_prune.path }}/configs"
    state: directory
    mode: 0755

- name: "Copy configs.Dockerfile to temp directory"
  copy:
    content: |
      FROM quay.io/operator-framework/opm:latest
      ENTRYPOINT ["/bin/opm"]
      CMD ["serve", "/configs"]
      ADD configs /configs
      LABEL operators.operatorframework.io.index.configs.v1=/configs
      LABEL maintainer="Telco DCI team"{% if opm_expire %} quay.expires-after={{ opm_expire_time }}{% endif %}
    dest: "{{ tmp_prune.path }}/configs.Dockerfile"
    mode: 0644

- name: "Render the catalog index"
  shell:
    chdir: "{{ tmp_prune.path }}"
    cmd: >
      set -x;
      {{ dci_cluster_configs_dir }}/opm render {{ source_index }} >
      {{ tmp_prune.path }}/index-packages
  environment:
    - DOCKER_CONFIG: "{{ docker_conf.path }}"
  register: prune_result
  until: prune_result.rc == 0
  retries: 3
  delay: 10

- name: "Extract required operator's channel, and packages"
  shell:
    chdir: "{{ tmp_prune.path }}"
    cmd: >
      set -x;
      jq 'select( .package == "{{ operator_name }}" or .name == "{{ operator_name }}")'
      {{ tmp_prune.path }}/index-packages
      >> {{ tmp_prune.path }}/configs/index.json
  with_items: "{{ mirror_list }}"
  loop_control:
    loop_var: operator_name

- name: "Build the catalog index"
  shell:
    chdir: "{{ tmp_prune.path }}"
    cmd: >
      set -x;
      podman build
      -t {{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}
      -f {{ tmp_prune.path }}/configs.Dockerfile .

- name: "Validate the pruned index"
  shell: |
    {{ dci_cluster_configs_dir }}/opm validate configs/
  args:
    chdir: "{{ tmp_prune.path }}"

- name: "Push the new index image to the local registry"
  shell:
    cmd: >
      podman push
      {{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}
      {% if dci_pullsecret_file is defined %}
      --authfile {{ dci_pullsecret_file }}
      {% endif %}
  register: cat_push
  retries: 3
  delay: 10
  until: cat_push.rc == 0


- name: "Use the grpc API to explore the pruned catalog index"
  shell:
    cmd: >
      podman run
      --rm
      --detach
      --publish 50051
      {{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}
  register: grpc_container_id

- name: "Get dynamic port assigned to grpc"
  shell:
    cmd: >
      podman inspect {{ grpc_container_id.stdout }} |
      jq '.[].NetworkSettings.Ports."50051/tcp"[].HostPort'
  register: grpc_port

- name: "Get the operators available in the pruned catalog"
  shell:
    cmd: >
      grpcurl -plaintext
      localhost:{{ grpc_port.stdout }}
      api.Registry/ListPackages |
      jq ".name"
  register: packages_list

- name: "List operators available in the pruned catalog"
  debug:
    msg: "{{ packages_list.stdout }}"

- name: "Get the number of operators in the pruned catalog"
  shell:
    cmd: >
      grpcurl -plaintext
      localhost:{{ grpc_port.stdout }}
      api.Registry/ListPackages |
      jq -s length
  register: prune_count

- name: "Remove grpc-api container"
  shell:
    cmd: >
      podman stop
      --ignore
      {{ grpc_container_id.stdout }}

- name: "Remove local index image"
  shell:
    cmd: >
      podman rmi
      --force
      {{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}

- name: "Delete image config directory"
  file:
    state: absent
    path: "{{ tmp_prune.path }}/configs"

- name: "Set new minor version when operators are missing"
  set_fact:
    ocp_minor: "{{ ocp_minor | int -1 }}"
  when: prune_count.stdout | int != mirror_list | length

- name: "Fallback to previous OCP version"
  vars:
    opm_expire: "{{ hostsvars.localhost.opm_expire | default(true) }}"
    opm_expire_time: "{{ hostvars.localhost.opm_expire_time | default('24h') }}"
  include_tasks: prune-catalog.yml
  when:
    - fallback_counter | int <= 3
    - prune_count.stdout | int != mirror_list | length
...
