---
- name: "upgrader : Get current version"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc get clusterversion
  register: current_version

- name: "upgrader : Print current version"
  debug:
    var: current_version.stdout_lines

- name: "upgrader : Get target openshift version from job.components"
  set_fact:
    version: "{{ item['name'] }}"
  with_items: "{{ hostvars.localhost.job_info.job.components }}"
  when: item["type"] == "ocp"

- name: Set major openshift version from topic
  set_fact:
    major: "{{ hostvars.localhost.job_info.job.topic.name | upper | replace('OCP-', '') }}"

- block:
  - name: "upgrader : Fetch release digest"
    uri:
      url: "{{ webserver_url }}/{{ version }}/release.dig"
      return_content: true
    register: release_digest

  - name: "upgrader : Fetch signature for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/signature.yaml"
      dest: ~/clusterconfigs/signature-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Fetch imagecontentsourcepolicy for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/imagecontentsourcepolicy.yaml"
      dest: ~/clusterconfigs/imagecontentsourcepolicy-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Apply signatures to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../signature-{{ version }}.yaml

  - name: "upgrader : Apply imagecontentsourcepolicy to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../imagecontentsourcepolicy-{{ version }}.yaml

  - name: Pause for Machine Config to be created
    pause:
      seconds: 60

  - name: Wait for updated machine configs to be applied on the nodes
    k8s_info:
      api_version: machineconfiguration.openshift.io/v1
      kind: MachineConfigPool
    register: reg_mcpool_status
    vars:
      status_query: "resources[*].status.conditions[?type=='Updated'].status"
      update_status: "{{ reg_mcpool_status | json_query(status_query) | flatten | unique }}"
    until:
      - update_status == ['True']
    retries: 60
    delay: 60

  - name: "upgrader : Wait for nodes to become Ready"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: |
        for node in $(oc get nodes -o name); do
          oc wait --timeout=5m --for=condition=Ready ${node} &
        done
        wait -n
    register: wait_for_nodes
    retries: 4
    until: wait_for_nodes.rc == 0

  - name: "upgrader : Patch clusterversion to point to custom upstream graph"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: >
        oc patch clusterversion/version
        --patch '{"spec": {"upstream": "{{ webserver_url }}/graph-{{ major }}" } }'
        --type merge &&
        oc wait --timeout=10m --for=condition=RetrievedUpdates clusterversion/version

  when:
  - dci_disconnected | default(false) | bool

- name: "upgrader : Patch clusterversion pointing to fast channel and refresh"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc patch clusterversion/version
      --patch '{"spec": {"channel": "fast-{{ major }}"} }'
      --type=merge &&
      oc delete pod
      --namespace=openshift-cluster-version
      --selector=k8s-app=cluster-version-operator &&
      sleep 1 &&
      oc wait pod
      --for=condition=Ready
      --namespace=openshift-cluster-version
      --timeout=5m
      --selector=k8s-app=cluster-version-operator &&
      oc wait clusterversion/version
      --for=condition=RetrievedUpdates
      --timeout=10m

- name: "upgrader : Execute the upgrade"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc adm upgrade --to {{ version }}
  register: start_upgrade

- name: "upgrader : Wait for upgrade to start"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc wait --timeout=1m --for=condition=Progressing clusterversion/version
  register: wait_for_upgrade
  retries: 5
  until: wait_for_upgrade.rc == 0
  when:
    - start_upgrade.stdout.find("Cluster is already at version") == -1

- name: "upgrader : Monitor upgrade until complete"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc get clusterversion/version -o json
      | jq -r '.status.history[] | select(.version == "{{ version }}").state'
  register: upgrade_progress
  until: upgrade_progress.stdout.find("Completed") > -1
  retries: 120
  delay: 60

- name: "test_ upgrader : Wait for ALL nodes to be in a Done state"
  k8s_info:
    api: v1
    kind: Node
  register: cluster_nodes
  until:
    - '"Working" not in ((cluster_nodes.resources == None) | ternary([], cluster_nodes.resources)) | json_query("[].metadata.annotations.\"machineconfiguration.openshift.io/state\"")'
  retries: 240
  delay: 10
  failed_when:
    - '"Degraded" in ((cluster_nodes.resources == None) | ternary([], cluster_nodes.resources)) | json_query("[].metadata.annotations.\"machineconfiguration.openshift.io/state\"")'

- name: "test_ upgrader: check if all cluster-operators are running correctly"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc get clusteroperator -o json | jq -r '  { "op": [.items[].status.conditions[]] }'
  register: cluster_operators
  failed_when: "cluster_operators.stdout | from_json | json_query('length(op[?(type==\"Degraded\" && status==\"True\")])') > 0"
...
