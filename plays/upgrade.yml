---
- name: "upgrader : Get current version"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc get clusterversion
  register: current_version

- name: "upgrader : Print current version"
  debug:
    var: current_version.stdout_lines

- name: "upgrader : Get target openshift version from job.components"
  set_fact:
    version: "{{ item['name'] }}"
  with_items: "{{ hostvars.localhost.job_info.job.components }}"
  when: item["type"] == "ocp"

- name: Set major openshift version from topic
  set_fact:
    major: "{{ hostvars.localhost.job_info.job.topic.name | upper | replace('OCP-', '') }}"

- name: "Work-around for 4.7 -> 4.8 upgrade"
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: gateway-mode-config
        namespace: openshift-network-operator
      data:
        mode: "local"
      immutable: true
  when:
    - '"bz2064193" in dci_workarounds|default([])'
    - major is version("4.8", "==")

- name: "Acknowledge deprecated API removals for 4.9 upgrade"
  community.kubernetes.k8s:
    definition:
      kind: ConfigMap
      metadata:
        name: admin-acks
        namespace: openshift-config
      data:
        ack-4.8-kube-1.22-api-removals-in-4.9: "true"
  when:
    - major is version("4.9", "==")

- block:
  - name: "upgrader : Fetch release digest"
    uri:
      url: "{{ webserver_url }}/{{ version }}/release.dig"
      return_content: true
    register: release_digest

  - name: "upgrader : Fetch signature for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/signature.yaml"
      dest: ~/clusterconfigs/signature-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Fetch imagecontentsourcepolicy for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/imagecontentsourcepolicy.yaml"
      dest: ~/clusterconfigs/imagecontentsourcepolicy-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Apply signatures to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../signature-{{ version }}.yaml

  - name: "upgrader : Apply imagecontentsourcepolicy to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../imagecontentsourcepolicy-{{ version }}.yaml

  - name: "Wait for updated MCP after applying an ICSP"
    include_role:
      name: wait-mcp
    vars:
      mcp_wait_retries: 30
      mcp_wait_delay: 10
      mcp_reason: "Upgrade - after applying ICSP"

  - name: "upgrader : Wait for nodes to become Ready"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: |
        for node in $(oc get nodes -o name); do
          oc wait --timeout=5m --for=condition=Ready ${node} &
        done
        wait -n
    register: wait_for_nodes
    retries: 4
    until: wait_for_nodes.rc == 0

  - name: "upgrader : Patch clusterversion to point to custom upstream graph"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: >
        oc patch clusterversion/version
        --patch '{"spec": {"upstream": "{{ webserver_url }}/graph-{{ major }}" } }'
        --type merge &&
        oc wait --timeout=10m --for=condition=RetrievedUpdates clusterversion/version

  when:
  - dci_disconnected | default(false) | bool

- name: "upgrader : Patch clusterversion pointing to fast channel and refresh"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc patch clusterversion/version
      --patch '{"spec": {"channel": "fast-{{ major }}"} }'
      --type=merge &&
      oc delete pod
      --namespace=openshift-cluster-version
      --selector=k8s-app=cluster-version-operator &&
      sleep 1 &&
      oc wait pod
      --for=condition=Ready
      --namespace=openshift-cluster-version
      --timeout=5m
      --selector=k8s-app=cluster-version-operator &&
      oc wait clusterversion/version
      --for=condition=RetrievedUpdates
      --timeout=10m

- name: "upgrader : Execute the upgrade"
  vars:
    upgrade_options: >-
      {{ force_upgrade | default |
         ternary(
           '--to-image=quay.io/openshift-release-dev/ocp-release:'
             + version + '-x86_64 --force --allow-explicit-upgrade',
           '--to '+ version ) }}
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc adm upgrade {{ upgrade_options }}
  register: start_upgrade

- name: "upgrader : Wait for upgrade to start"
  k8s_info:
    kind: ClusterVersion
    name: version
  register: cluster_version_info
  vars:
    cluster_version_conditions: '{{ cluster_version_info.resources.0.status.conditions }}'
    condition_progressing: '{{ cluster_version_conditions | selectattr("type", "equalto", "Progressing") | first }}'
  until: ("Working towards " + version) in condition_progressing.message
  retries: 10
  delay: 30

- name: "upgrader : Monitor upgrade until complete"
  shell: |
    set -o pipefail

    FSM=progressing

    function log {
        if [ -n "$VERBOSE" ]
        then
            echo $(date +%Y-%m-%d_%M:%S): $1 > /dev/stderr
        fi
    }

    while true
    do
        OC=$(oc get clusterversion/version -o json)
        FAILING=$(echo ${OC} | jq -r '.status.conditions[] | select(.type == "Failing").message')
        FAILING_STATUS=$(echo ${OC} | jq -r '.status.conditions[] | select(.type == "Failing").status' | grep "True")
        IS_FAILING=$?

        AVAILABLE=$(echo ${OC} | jq -r '.status.conditions[] | select(.type == "Available").message' | grep "Done applying {{ version }}")
        IS_COMPLETE=$?

        if [ "$FSM" == "progressing" ]
        then
            log "Currently progressing"
            if [ "$IS_COMPLETE" == 0 ]
            then
                echo $AVAILABLE
                exit 0
            elif [ "$IS_FAILING" == 0 ]
            then
                log "Changing FSM to failing"
                FSM=failing
                FAILING_TS=$(date +%s)
            fi
        elif [ "$FSM" == "failing" ]
        then
            TS=$(date +%s)
            LAPSE=$(( TS - FAILING_TS ))
            log "Lapse: " ${LAPSE}
            if [ "$IS_FAILING" == 1 ]
            then
                log "Changing FSM to progressing"
                FSM=progressing
                FAILING_TS=0
            elif [ $LAPSE -ge 900 ]
            then
                echo $FAILING
                exit 1
            else
                echo log $FAILING
            fi
        fi

        sleep 15
    done
  args:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
  async: 7200
  poll: 15

# Tasks for operators that require configuration changes before upgrading them
- name: "upgrader : Apply SRIOV recommended settings before operator upgrade"
  block:
    - name: Make sure SRIOV operator webhook is disabled
      community.kubernetes.k8s:
        definition:
          apiVersion: sriovnetwork.openshift.io/v1
          kind: SriovOperatorConfig
          metadata:
            name: default
            namespace: openshift-sriov-network-operator
          spec:
            enableOperatorWebhook: false

    - name: Get list of SRIOV policies
      community.kubernetes.k8s_info:
        api: sriovnetwork.openshift.io/v1
        kind: SriovNetworkNodePolicy
        namespace: openshift-sriov-network-operator
      register: sriov_policies
      no_log: true

    - name: Make sure SRIOV policies are not using linkType eth
      community.kubernetes.k8s:
        definition:
          apiVersion: sriovnetwork.openshift.io/v1
          kind: SriovNetworkNodePolicy
          metadata:
            name: "{{ policy.metadata.name }}"
            namespace: openshift-sriov-network-operator
          spec:
            linkType: null
      when:
        - policy.spec.linkType is defined
        - policy.spec.linkType == 'eth'
      loop: "{{ sriov_policies.resources }}"
      loop_control:
        loop_var: policy
        label: "{{ policy.metadata.name }}"
  when:
    - enable_sriov | default(true) | bool
    - apply_sriov_upgrade_settings | default(true) | bool

- name: "upgrader : Update disconnected catalogSources"
  import_role:
    name: operators-catalog
  when:
  - dci_disconnected | default(false) | bool
  - opm_mirror_list is defined
  - opm_mirror_list | length
  - update_catalog_channel | default(true) | bool

- name: "test_ upgrader: check if all cluster-operators are running correctly"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc get clusteroperator -o json | jq -r '  { "op": [.items[].status.conditions[]] }'
  register: cluster_operators
  failed_when: "cluster_operators.stdout | from_json | json_query('length(op[?(type==\"Degraded\" && status==\"True\")])') > 0"

- name: "Validate that nodes are Ready and MCPs are up to date"
  include_role:
    name: wait-mcp
  vars:
    mcp_wait_retries: 100
    mcp_wait_delay: 10
    mcp_reason: "Upgrade - after having operators running"

- block:
  - name: Set release_url
    set_fact:
      release_url: "{{ (webserver_url|default|length) | ternary(webserver_url|default, 'https://mirror.openshift.com/pub/openshift-v4/clients/ocp') }}"

  - name: Get the ocp client tar gunzip file
    get_url:
      url: "{{ release_url }}/{{ version }}/openshift-client-linux-{{ version }}.tar.gz"
      dest: /tmp/
      mode: '0755'

  - name: "Untar the openshift-client-linux-{{ version }}.tar.gz"
    unarchive:
      src: "/tmp/openshift-client-linux-{{ version }}.tar.gz"
      dest: "{{ dci_cluster_configs_dir }}"
      mode: '0755'
      remote_src: yes

  - name: "Remove the openshift-client-linux-{{ version }}.tar.gz"
    file:
      path: "/tmp/openshift-client-linux-{{ version }}.tar.gz"
      state: absent
  delegate_to: localhost
  when: provision_cache_store is not defined

- name: "Copy new oc client after upgrade is finished"
  vars:
    pcs: "{{ provision_cache_store | default() }}"
    oc_path: >-
      {{ pcs | length |
         ternary(
           pcs + "/" + version + "/oc",
           dci_cluster_configs_dir + "/oc" ) }}
  copy:
    src: "{{ oc_path }}"
    dest: "/usr/local/bin/oc"
    mode: "0755"
  become: true
...
