---
- name: "upgrader : Get current version"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc get clusterversion
  register: current_version

- name: "upgrader : Print current version"
  debug:
    var: current_version.stdout_lines

- name: "upgrader : Get target openshift version from job.components"
  set_fact:
    version: "{{ item['name'] }}"
  with_items: "{{ hostvars.localhost.job_info.job.components }}"
  when: item["type"] == "ocp"

- name: Set major openshift version from topic
  set_fact:
    major: "{{ hostvars.localhost.job_info.job.topic.name | upper | replace('OCP-', '') }}"

- block:
  - name: "upgrader : Fetch release digest"
    uri:
      url: "{{ webserver_url }}/{{ version }}/release.dig"
      return_content: true
    register: release_digest

  - name: "upgrader : Fetch signature for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/signature.yaml"
      dest: ~/clusterconfigs/signature-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Fetch imagecontentsourcepolicy for target release"
    get_url:
      url: "{{ webserver_url }}/{{ version }}/imagecontentsourcepolicy.yaml"
      dest: ~/clusterconfigs/imagecontentsourcepolicy-{{ version }}.yaml
      mode: 0644

  - name: "upgrader : Apply signatures to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../signature-{{ version }}.yaml

  - name: "upgrader : Apply imagecontentsourcepolicy to cluster"
    command:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: oc apply -f ../imagecontentsourcepolicy-{{ version }}.yaml

  - name: "upgrader : Wait for machineconfigpools to update"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: |
        for mcp in $(oc get mcp -o name); do
          oc wait --timeout=1m --for=condition=Updated ${mcp} &
        done
        wait -n
    retries: 5

  - name: "upgrader : Wait for nodes to become Ready"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: |
        for node in $(oc get nodes -o name); do
          oc wait --timeout=5m --for=condition=Ready ${node} &
        done
        wait -n
    retries: 4

  - name: "upgrader : Patch clusterversion to point to custom upstream graph"
    shell:
      chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
      cmd: >
        oc patch clusterversion/version
        --patch '{"spec": {"upstream": "{{ webserver_url }}/graph-{{ major }}" } }'
        --type merge &&
        oc wait --timeout=10m --for=condition=RetrievedUpdates clusterversion/version

  when:
  - dci_disconnected | default(false) | bool

- name: "upgrader : Patch clusterversion pointing to fast channel and refresh"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc patch clusterversion/version
      --patch '{"spec": {"channel": "fast-{{ major }}"} }'
      --type=merge &&
      oc delete pod
      --namespace=openshift-cluster-version
      --selector=k8s-app=cluster-version-operator &&
      sleep 1 &&
      oc wait pod
      --for=condition=Ready
      --namespace=openshift-cluster-version
      --timeout=5m
      --selector=k8s-app=cluster-version-operator &&
      oc wait clusterversion/version
      --for=condition=RetrievedUpdates
      --timeout=10m

- name: "upgrader : Execute the upgrade"
  command:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: oc adm upgrade --to {{ version }}
  register: start_upgrade

- name: "upgrader : Wait for upgrade to start"
  k8s_info:
    kind: ClusterVersion
    name: version
  register: cluster_version_info
  vars:
    cluster_version_conditions: '{{ cluster_version_info.resources.0.status.conditions }}'
    condition_progressing: '{{ cluster_version_conditions | selectattr("type", "equalto", "Progressing") | first }}'
  until: ("Working towards " + version) in condition_progressing.message
  retries: 10
  delay: 30

- name: "upgrader : Monitor upgrade until complete"
  k8s_info:
    kind: ClusterVersion
    name: version
  register: cluster_version_info
  vars:
    cluster_version_conditions: '{{ cluster_version_info.resources.0.status.conditions }}'
    condition_available: '{{ cluster_version_conditions | selectattr("type", "equalto", "Available") | first }}'
    condition_failing: '{{ cluster_version_conditions | selectattr("type", "equalto", "Failing") | first }}'
  until:
  - '"resources" in cluster_version_info'
  - >
    ("Done applying " + version) in (condition_available.message | default("")) or
    ("Unable to apply " + version) in (condition_failing.message | default(""))
  retries: 120
  delay: 60
  failed_when:
  - '"resources" in cluster_version_info'
  - (condition_failing.status | bool) == True

- name: "test_ upgrader : Check the master nodes managed by MCP are updated and ready"
  k8s_info:
    kind: MachineConfigPool
    name: master
  register: mcp_master
  retries: 60
  delay: 10
  until:
  - "'resources' in mcp_master"
  - "mcp_master.resources|length == 1"
  - "'status' in mcp_master.resources[0]"
  - "mcp_master.resources[0].status.readyMachineCount == mcp_master.resources[0].status.machineCount"
  - "mcp_master.resources[0].status.updatedMachineCount == mcp_master.resources[0].status.machineCount"

- name: "test_ upgrader : Check the worker nodes managed by MCP are updated and ready"
  k8s_info:
    kind: MachineConfigPool
    name: worker
  register: mcp_worker
  retries: 90
  delay: 10
  until:
  - "'resources' in mcp_worker"
  - "mcp_worker.resources|length == 1"
  - "'status' in mcp_worker.resources[0]"
  - "mcp_worker.resources[0].status.readyMachineCount == mcp_worker.resources[0].status.machineCount"
  - "mcp_worker.resources[0].status.updatedMachineCount == mcp_worker.resources[0].status.machineCount"

- name: "test_ upgrader: check if all cluster-operators are running correctly"
  shell:
    chdir: "{{ '~' + ansible_user }}/clusterconfigs/auth"
    cmd: >
      oc get clusteroperator -o json | jq -r '  { "op": [.items[].status.conditions[]] }'
  register: cluster_operators
  failed_when: "cluster_operators.stdout | from_json | json_query('length(op[?(type==\"Degraded\" && status==\"True\")])') > 0"
...
