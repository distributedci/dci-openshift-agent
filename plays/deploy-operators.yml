---
# This playbook is executed in the provisioner host

# If not set by operators-mirror then we must not be in disconnected
# mode and should use the default entry for connected mode.
- name: "deploy-operators : Set default redhat-operators"
  set_fact:
    opm_catalog_source_name: "{{ opm_catalog_source_name | default('redhat-operators') }}"

- name: Get oc version output
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: |
    {{ oc_tool_path }} version
  register: oc_version_str
  delegate_to: localhost

- name: Get OCP version
  set_fact:
    ocp_version: "{{ '.'.join(item.split(':')[1].strip().split('.')[0:2]) }}"
    ocp_version_maj: "{{ item.split(':')[1].strip().split('.')[0] }}"
    ocp_version_min: "{{ item.split(':')[1].strip().split('.')[1] }}"
  when: "'Server Version' in item"
  loop: "{{ oc_version_str.stdout_lines }}"

# Generate disconnected catalogSources
- name: "deploy-operators : Generate disconnected catalogSources"
  import_role:
    name: operators-catalog
  when:
  - dci_disconnected | default(false) | bool
  - opm_mirror_list is defined
  - opm_mirror_list | length

- name: Disable default catalog sources for disconnected deployment
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: |
    {{ oc_tool_path }} patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
  delegate_to: localhost
  when:
  - dci_disconnected | default(false) | bool

### Begin CNF
- name: "Deploy operators required by CNFs"
  block:
  # Verify a minimum number of worker nodes are available
  - name: "deploy-operators : Get all nodes"
    k8s_info:
      kind: Node
    register: nodes
    no_log: true

  - name: "deploy-operators : Get worker node count"
    set_fact:
      worker_node_count: "{{ worker_node_count|default(0)|int + 1 }}"
    when: "'node-role.kubernetes.io/worker' in item.metadata.labels"
    loop: "{{ nodes.resources }}"
    no_log: true

  - name: "deploy-operators : test_ Check enough worker nodes availability"
    fail:
      msg: "Not enough worker nodes ({{ worker_node_count }}) to perform required tasks"
    when:
      - worker_node_count|int <= 1
      - install_type is undefined or install_type != 'sno'

  # Rendering the definition in a variable to avoid jinja templating type issues
  - name: "deploy-operators : Increase maxUnavailable count to n-1"
    vars:
      mcp_def: |
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
        metadata:
          name: worker
        spec:
          maxUnavailable: {{ hostvars.localhost.groups['workers'] | length - 1 }}
    k8s:
      state: present
      definition: "{{ mcp_def }}"
    when:
    - hostvars.localhost.groups['workers']|length > 1

  - name: "deploy-operators : Install Performace Addon Operator"
    include_role:
      name: olm-operator
    vars:
      operator: performance-addon-operator
      source: "{{ opm_catalog_source_name }}"
      namespace: openshift-performance-addon-operator
      ns_labels:
        openshift.io/cluster-monitoring: "true"
    when:
      - hostvars.localhost.enable_perf_addon|default(true)|bool
      - ocp_version_maj|int == 4
      - ocp_version_min|int <= 10

  - name: "deploy-operators : Apply Performace Profile"
    include_tasks: apply-pao-profile.yml
    when:
    - performance_definition is defined

  - name: "deploy-operators : Install SRIOV operator"
    include_role:
      name: operator-sriov
    when:
    - hostvars.localhost.enable_sriov|default(true)|bool

  - name: "deploy-operators : Reset maxUnavailable count to default value 1"
    k8s:
      definition:
        kind: MachineConfigPool
        metadata:
          name: worker
        spec:
          maxUnavailable: 1

  when: hostvars.localhost.dci_prepare_cnf|bool
### End CNF

### Begin CNV
- name: "deploy-operators : Setup cluster for Container Native Virtualization"
  include_role:
    name: cnv-setup
  when:
    - hostvars.localhost.enable_cnv|default(false)|bool
### End CNV

### Begin OCS
- block:
  - name: "deploy-operators : Define OCS CatalogSource"
    include_role:
      name: olm-catalog-source
    vars:
      catalog: ocs-catalog
      image: "{{ hostvars.localhost.ocs_operator_image }}"

  - name: "deploy-operators : Install OCS Operator"
    include_role:
      name: olm-operator
    vars:
      operator: ocs-operator
      channel: alpha
      source: ocs-catalog
      namespace: openshift-storage
      ns_labels:
        openshift.io/cluster-monitoring: "true"
      operator_group_spec:
        targetNamespaces:
          - openshift-storage
  when:
  - hostvars.localhost.ocs_operator_image is defined
### End OCS

### Begin LocalStorage
- block:
  - name: "deploy-operators : Define LocalStorage CatalogSource"
    include_role:
      name: olm-catalog-source
    vars:
      catalog: local-storage-catalog
      image: "{{ hostvars.localhost.local_storage_operator_image }}"

  - name: "deploy-operators : Install LocalStorage Operator"
    include_role:
      name: olm-operator
    vars:
      operator: local-storage-operator
      channel: "{{ hostvars.localhost.local_storage_operator_channel | default('preview') }}"
      source: local-storage-catalog
      namespace: openshift-local-storage
      operator_group_spec:
        targetNamespaces:
          - openshift-local-storage

  when:
  - hostvars.localhost.local_storage_operator_image is defined
### End LocalStorage


### Begin deploy all CRs
- name: "deploy-operators : Create all Custom Resources"
  include_role:
    name: deploy-cr
  vars:
    api_version: "{{ item.api_version }}"
    kind: "{{ item.kind }}"
    namespace: "{{ item.namespace }}"
    name: "{{ item.name }}"
    spec: "{{ item.spec }}"
  with_list: "{{ hostvars.localhost.dci_ocp_custom_resources }}"
  when:
  - hostvars.localhost.dci_ocp_custom_resources is defined
  - hostvars.localhost.dci_ocp_custom_resources is list
### End Deploy all CRs
...
