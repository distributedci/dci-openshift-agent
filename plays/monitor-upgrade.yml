- name: Get cluster version info (upgrade)
  kubernetes.core.k8s_info:
    kind: ClusterVersion
    name: version
  register: cluster_version_info
  until: "'resources' in cluster_version_info and cluster_version_info.resources != []"
  retries: "{{ upg_mon_retry }}"
  delay: "{{ upg_mon_wait }}"

- name: Get upgrade history
  ansible.builtin.set_fact:
    upgrade_version: "{{ cluster_version_info | json_query('resources[0].status.history[0].version') }}"
    upgrade_state: "{{ cluster_version_info | json_query('resources[0].status.history[0].state') }}"
    current_status: "{{ cluster_version_info | json_query('resources[0].status.conditions[0].message') }}"

- name: Get current time
  ansible.builtin.set_fact:
    current_time: "{{ lookup('pipe', 'date +%s') }}"

- name: Calculate elapsed time
  ansible.builtin.set_fact:
    elapsed_time: "{{ current_time | int - upg_start_time | int }}"

- name: Print upgrade status
  ansible.builtin.debug:
    msg:
      - "Upgrade history: {{ upgrade_version }} {{ upgrade_state }} {{ current_status }}"
      - "Approximated elapsed time: {{ elapsed_time | int / 60 }} mins"
      - "Maximum wait time defined: {{ max_upgrade_time | int / 60 }} mins"

- name: "Delay for minutes: {{ delay_minutes }}"
  vars:
    delay_minutes: "{{ ((upg_mon_retry | int) * (upg_mon_wait | int)) / 60 | int }}"
  ansible.builtin.pause:
    seconds: "{{ (upg_mon_retry | int) * (upg_mon_wait | int) }}"

- name: Wait for upgrade to complete
  when:
    - upgrade_state != "Completed"
  block:
    - name: Check if time is up
      ansible.builtin.fail:
        msg: "Failed due to timeout"
      when:
        - elapsed_time | int >= max_upgrade_time | int

    - name: Monitor upgrade
      ansible.builtin.include_tasks: monitor-upgrade.yml
      when:
        - elapsed_time | int < max_upgrade_time | int
...
