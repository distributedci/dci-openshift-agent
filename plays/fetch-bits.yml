- name: Set the components variable
  set_fact:
    components: '{{ job_info.job.components }}'

- name: Get openshift_version from job.components
  set_fact:
    version: "{{ item['name'] }}"
    tags: "{{ item['tags'] }}"
  with_items: "{{ job_info.job.components }}"
  when: item["type"] == "ocp"

- name: Set major openshift version from topic
  set_fact:
    major: "{{ job_info.job.topic.name | upper | replace('OCP-', '') }}"

- name: Get build from tag
  set_fact:
    build: "{{ item.split(':')[1] }}"
  with_items: "{{ tags }}"
  when: item.split(":")[0] == "build"

# Candidate builds are ga builds that haven't gone ga quite yet.
# The following changes the build and version vars to look like ga
# for the upstream install playbooks
- name: Set build:ga when build:candidate
  set_fact:
    build: "ga"
    version: "{{ version.split('-')[0] }}"
  when: build == "candidate"

- name: Set pullsecret from job_info
  set_fact:
    pullsecret: "{{ openshift_secret | default(job_info.job.topic.data.pull_secret) }}"
  no_log: true

- name: Ensure proper directories are created
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ ansible_user_id }}'
    group: '{{ ansible_user_gid }}'
  with_items:
    - '{{ dci_cache_dir }}'
    - '{{ dci_mirror_location }}/dci_repo'
  become: true

- name: Import remoteci SSL keys
  vars:
    dci_import_keys_remoteci_id: '{{ job_info.job.remoteci.id }}'
  include_role:
    name: dci-import-keys

- name: Clone baremetal-deploy
  git:
    version: "{{ baremetal_deploy_version }}"
    repo: "{{ baremetal_deploy_repo }}"
    dest: "{{ dci_cache_dir }}/baremetal_deploy_repo"
    force: yes
  # On RHEL8 git clone can sporadically fail with OpenSSL SSL_read:
  # SSL_ERROR_SYSCALL, errno 104. This is a workaround to try cloning the repo
  # multiple times.
  register: baremetal_deploy_clone
  retries: 3
  delay: 10

- block:
  - name: Set variables from registry_host vars
    set_fact:
      provision_cache_store: "{{ hostvars[groups['registry_host'][0]].provision_cache_store }}"
      local_registry: "{{ hostvars[groups['registry_host'][0]].local_registry }}"
      local_repo: "{{ hostvars[groups['registry_host'][0]].local_repo }}"
      disconnected_registry_auths_file: "{{ hostvars[groups['registry_host'][0]].disconnected_registry_auths_file }}"

  - name: Look if the mirroring has already been done
    stat:
      path: "{{ provision_cache_store }}/{{ version }}/mirror_done"
    register: mirror_done

  - name: Set facts
    set_fact:
      cmd: openshift-baremetal-install
      dci_pullsecret_file: "{{ provision_cache_store }}/{{ cluster }}-pull-secret.txt"

  - name: Set release_url for development envs
    set_fact:
      release_url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview"
    when: build == 'dev'

  - name: Set release_url for GA envs
    set_fact:
      release_url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp"
    when: build == 'ga'

  - name: Look if rhcos and clients have already been done
    stat:
      path: "{{ provision_cache_store }}/{{ version }}/clients_done"
    register: clients_done

  - name: Read Disconnected auths
    include_vars:
      file: "{{ disconnected_registry_auths_file }}"
      name: disconnected_registry_auths
    no_log: true

  - name: fix disconnected registry auths file
    set_fact:
      disconnected_registry_auths_fixed: "{'auths': {{ disconnected_registry_auths }} }"
    no_log: true

  - name: combined auths
    set_fact:
      combined_auth: "{{ disconnected_registry_auths_fixed | combine(pullsecret, recursive=True) }}"
    no_log: true

  - name: Copy PullSecret into cache
    copy:
      content: "{{ combined_auth | to_nice_json }}"
      dest: "{{ dci_pullsecret_file }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      force: yes

  - name: Create cache dir
    file:
      path: "{{ provision_cache_store }}/{{ version }}"
      mode: '0755'
      state: directory

  - name: Store Release.txt File
    get_url:
      url: "{{ release_url }}/{{ version }}/release.txt"
      dest: "{{ provision_cache_store }}/{{ version }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0644
      timeout: 300
    when:
      - not mirror_done.stat.exists

  - name: Get digest for release
    shell: >
      grep '^Digest:' {{ provision_cache_store }}/{{ version }}/release.txt
      | tr -s ' '
      | cut -d ' ' -f 2
    register: release_digest

  - name: Write release digest
    copy:
      dest: "{{ provision_cache_store }}/{{ version }}/release.dig"
      content: "{{ release_digest.stdout }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0644

  - name: Fetch release signature
    get_url:
      url: "https://mirror.openshift.com/pub/openshift-v4/signatures/openshift/release/{{ release_digest.stdout | replace(':', '=') }}/signature-1"
      dest: "{{ provision_cache_store }}/{{ version }}/signature.bin"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0644
      timeout: 300
    when:
      - not mirror_done.stat.exists

  - name: Fetch channel upgrade graph
    get_url:
      url: "https://api.openshift.com/api/upgrades_info/v1/graph?channel=fast-{{ major }}&arch=amd64"
      headers:
        Accept: "application/json"
      dest: "{{ provision_cache_store }}/graph-{{ major }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0644
      timeout: 300
    when:
      - not mirror_done.stat.exists

  - name: Base64 encode binary signature
    slurp:
      src: "{{ provision_cache_store }}/{{ version }}/signature.bin"
    register: signature_b64

  - name: Write release image content source policy
    copy:
      dest: "{{ provision_cache_store }}/{{ version }}/imagecontentsourcepolicy.yaml"
      mode: 0644
      content: |
        apiVersion: operator.openshift.io/v1alpha1
        kind: ImageContentSourcePolicy
        metadata:
          name: release-{{ version }}
        spec:
          repositoryDigestMirrors:
          - mirrors:
            - {{ local_registry }}/{{ local_repo }}
            source: quay.io/openshift-release-dev/ocp-release
          - mirrors:
            - {{ local_registry }}/{{ local_repo }}
            source: quay.io/openshift-release-dev/ocp-v4.0-art-dev
          - mirrors:
            - {{ local_registry }}/{{ local_repo }}
            source: registry.svc.ci.openshift.org/ocp/release

  - name: Write new signature config map
    copy:
      dest: "{{ provision_cache_store }}/{{ version }}/signature.yaml"
      mode: 0644
      content: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: signature-{{ version }}
          namespace: openshift-config-managed
          labels:
            release.openshift.io/verification-signatures: ""
        binaryData:
          {{ release_digest.stdout | replace(':', '-') }}-1 : {{ signature_b64.content }}

  - name: Set result variable
    set_fact:
      result: "{{ lookup('file', provision_cache_store + '/' + version + '/release.txt') }}"

  - name: Set Fact for Release Image
    set_fact:
      release_version: "{{ result | regex_search('Version:.*') | regex_replace('Version:\\s*(.*)', '\\1') }}"
      release_image: "{{ result | regex_search('Pull From:.*') | regex_replace('Pull From:\\s*(.*)', '\\1') }}"

  - block:
    - name: "Client tools"
      set_fact:
        client_tools:
          - openshift-client

    - name: "Client tools for 4.6.17 and above"
      set_fact:
        client_tools: "{{ client_tools + [ 'opm' ] }}"
      when:
        - version is version('4.6.17', ">=")

    - name: "Download and untar tools"
      include_tasks: extract-tools.yml
      loop: "{{ client_tools }}"

    - name: Extracting the installer
      command: |
        {{ provision_cache_store }}/{{ version }}/oc adm release extract \
        --registry-config {{ dci_pullsecret_file | quote }} --command={{ cmd | quote }} \
        --to {{ provision_cache_store }}/{{ version }} {{ release_image }}
      args:
        chdir: "{{ provision_cache_store }}/{{ version }}"
        executable: /bin/bash

    - name: Set executable permissions on installer
      file:
        path: "{{ provision_cache_store }}/{{ version }}/{{ cmd }}"
        mode: 0755

    - name: Get COMMIT_ID
      shell: |
        {{ provision_cache_store }}/{{ version }}/openshift-baremetal-install version | grep '^built from commit' | awk '{print $4}'
      register: commit_id

    - name: Store rhcos.json File
      get_url:
        url: "https://raw.githubusercontent.com/openshift/installer/{{ commit_id.stdout }}/data/data/rhcos.json"
        dest: "{{ provision_cache_store }}/{{ version }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
        timeout: 300

    when:
      - not clients_done.stat.exists

  - name: Create a clients done file
    file:
      path: "{{ provision_cache_store }}/{{ version }}/clients_done"
      state: touch

  - name: Load variables from rhcos.json
    include_vars:
      file: "{{ provision_cache_store }}/{{ version }}/rhcos.json"
      name: rhcos_json

  - name: Set Facts for RHCOS_URI and RHCOS_PATH
    set_fact:
      rhcos_qemu_uri: "{{ rhcos_json | json_query('images.qemu.path') }}"
      rhcos_uri: "{{ rhcos_json | json_query('images.openstack.path') }}"
      rhcos_path: "{{ rhcos_json | json_query('baseURI') }}"

  - name: Set facts for RHCOS_QEMU_SHA256 and RHCOS_SHA256
    set_fact:
      rhcos_qemu_sha256: "{{ rhcos_json | json_query('images.qemu.sha256') }}"
      rhcos_qemu_sha256_unzipped: '{{ rhcos_json | json_query(''images.qemu."uncompressed-sha256"'') }}'
      rhcos_sha256: "{{ rhcos_json | json_query('images.openstack.sha256') }}"

  - name: Set bootstrap and clusteros image URL override
    set_fact:
      bootstraposimage: "{{ webserver_url }}/{{ rhcos_qemu_uri }}?sha256={{ rhcos_qemu_sha256_unzipped }}"
      clusterosimage: "{{ webserver_url }}/{{ rhcos_uri }}?sha256={{ rhcos_sha256 }}"

  - name: Download {{ rhcos_qemu_uri }} for cache
    get_url:
      url: "{{ rhcos_path }}{{ rhcos_qemu_uri }}"
      dest: "{{ provision_cache_store }}/{{ rhcos_qemu_uri }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      setype: httpd_sys_content_t
      checksum: "sha256:{{ rhcos_qemu_sha256 }}"
      timeout: 3600
    when:
      - not mirror_done.stat.exists

  - name: Download {{ rhcos_uri }} for cache
    get_url:
      url: "{{ rhcos_path }}{{ rhcos_uri }}"
      dest: "{{ provision_cache_store }}/{{ rhcos_uri }}"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      setype: httpd_sys_content_t
      checksum: "sha256:{{ rhcos_sha256 }}"
      timeout: 3600
    when:
      - not mirror_done.stat.exists

  - name: Mirror remote registry to registry host
    command:
      '
      {{ provision_cache_store }}/{{ version }}/oc adm release mirror
        -a "{{ dci_pullsecret_file }}"
        --from="{{ release_image | quote }}"
        --to-release-image="{{ local_registry | quote }}/{{ local_repo | quote }}:{{ release_version | quote }}"
        --to="{{ local_registry | quote }}/{{ local_repo | quote }}"
      '
    when:
      - not mirror_done.stat.exists

  - name: Create a mirror done file
    file:
      path: "{{ provision_cache_store }}/{{ version }}/mirror_done"
      state: touch

  when:
    - "'registry_host' in groups"
    - groups['registry_host'] | length > 0
    - webserver_url is defined
    - hostvars[groups['registry_host'][0]].local_registry is defined
    - hostvars[groups['registry_host'][0]].local_repo is defined
    - hostvars[groups['registry_host'][0]].provision_cache_store is defined
  delegate_to: "{{ groups['registry_host'][0] }}"
