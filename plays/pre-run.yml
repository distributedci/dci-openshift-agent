---
- name: Validate we have all the pieces to run in disconnected mode
  assert:
    that:
      - webserver_url is defined
      - groups['registry_host'] is defined
      - groups['registry_host'] | length > 0
      - local_registry | length
      - provision_cache_store is defined
      - hostvars[groups['registry_host'][0]].local_repo is defined
  when:
    - dci_disconnected | default(false) | bool

- name: Set pullsecret from job_info - Connected
  set_fact:
    pullsecret: "{{ job_info.job.topic.data.pull_secret | default({}) | combine(openshift_secret | default({}), recursive=True) }}"
  no_log: true
  when:
    - not (dci_disconnected | default(false) | bool)

# Removing secret for cloud.openshift.com in order to disable the insights operator
- name: Set pullsecret from job_info - Disconnected
  vars:
    dci_pullsecret: "{{ job_info.job.topic.data.pull_secret | default({}) | combine(openshift_secret | default({}), recursive=True) }}"
  set_fact:
    pullsecret: |
      {
        "auths": {
        {% for repo in dci_pullsecret.auths | list %}
          {% if repo != "cloud.openshift.com" %}
            "{{ repo }}": {{ dci_pullsecret.auths[repo] | to_json }}{% if loop.last %}{% else %},{% endif %}
          {% endif %}
        {% endfor %}
        }
      }
  no_log: true
  when:
    - dci_disconnected | default(false) | bool

- name: Read Disconnected auths
  include_vars:
    file: "{{ hostvars[groups['registry_host'][0]].disconnected_registry_auths_file }}"
    name: disconnected_auths
  no_log: true
  when:
    - dci_disconnected | default(false) | bool

- name: "Check if {{ pullsecret_file }} exists"
  stat:
    path: "{{ pullsecret_file }}"
    get_checksum: false
  register: pullfile
  when:
    - pullsecret_file is defined

- name: "Set dci_pullsecret_file if pullsecret_file var exists"
  block:
    - name: "Copy pull secret file to cache directory"
      copy:
        src: "{{ pullsecret_file }}"
        dest: "{{ provision_cache_store }}/pull-secret.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0644"
        force: true

    - name: "Set dci_pullsecret_file fact"
      set_fact:
        dci_pullsecret_file: "{{ pullsecret_file }}"
      no_log: true
  when:
    - pullsecret_file is defined
    - pullfile.stat.exists | bool

- name: "Set auths fact if pullsecret_file var is not present"
  block:
    - name: "Combine pull secret and disconnected_auths vars"
      set_fact:
        auths: "{{ pullsecret | combine({'auths': hostvars.localhost.disconnected_auths}, recursive=True) }}"
      no_log: true

    - name: "Copy auths fact content to a file"
      copy:
        content: "{{ auths }}"
        dest: "{{ provision_cache_store }}/pull-secret.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0644"
        force: true

    - name: "Set dci_pullsecret_file fact if pullsecret_file is not present"
      set_fact:
        dci_pullsecret_file: "{{ provision_cache_store }}/pull-secret.txt"
      no_log: true
  when:
    - dci_disconnected | default(false) | bool
    - pullsecret_file is undefined

- name: "Create releases dir in home directory if needed"
  file:
    path: "{{ (ansible_env.HOME, 'releases') | join('/') }}"
    state: directory
    mode: "0775"
  when:
    - provision_cache_store is undefined

- name: "Set dci_pullsecret_file in connected environments"
  block:
    - name: "Copy pullsecret fact content to a file"
      copy:
        content: "{{ pullsecret }}"
        dest: "{{ hostvars.localhost.provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}/pull-secret.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0644"
        force: true

    - name: "Set dci_pullsecret_file fact if pullsecret_file is not present"
      set_fact:
        dci_pullsecret_file: "{{ hostvars.localhost.provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}/pull-secret.txt"
      no_log: true
  when:
    - not (dci_disconnected | default(false) | bool)
    - pullsecret_file is undefined

- name: "Configure auths for docker compatible tools"
  block:
    - name: "Create temp directory for docker auths"
      tempfile:
        state: directory
      register: docker_conf

    - name: "Copy dci_pull_secret as config.json"
      copy:
        src: "{{ dci_pullsecret_file }}"
        dest: "{{ docker_conf.path }}/config.json"
  when:
    - dci_pullsecret_file is defined

- name: Mirror release
  include_role:
    name: mirror-ocp-release
  vars:
    version: "{{ hostvars.localhost.version }}"
    release_url: "{{ hostvars.localhost.url }}"
    cache_dir: "{{ hostvars.localhost.provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}"
    webserver_url: "{{ hostvars.localhost.webserver_url | default(None) }}"
    registry_url: "docker://{{ local_registry }}/{{ hostvars[groups['registry_host'][0]].local_repo | default('') }}"
    auths_file: "{{ dci_pullsecret_file }}"
    force: "{{ (hostvars.localhost.dci_force_mirroring | default(false)) or (hostvars.localhost.build == 'candidate') | bool }}"
    install_type: "{{ hostvars.localhost.install_type | default('ipi') }}"
    sno_install_type: "{{ hostvars.localhost.sno_install_type | default('baremetal') }}"
    mirror_artifacts: "{{ dci_disconnected | default(False) | bool }}"
    unpack_artifacts: "{{ dci_disconnected | default(False) | bool }}"
    mirror_disk_images: "{{ dci_disconnected | default(False) | bool }}"
    mirror_container_images: "{{ dci_disconnected | default(False) | bool }}"
    write_custom_config: "{{ dci_disconnected | default(False) | bool }}"

- name: Mirror intermediate version for EUS Upgrade
  block:
  - name: Set major variable
    set_fact:
      major: "{{ hostvars.localhost.job_info.job.topic.name | upper | replace('OCP-', '') }}"

  - name: Set intermediate openshift version
    vars:
      ocp_major: "{{ major.split('.')[0] }}"
      ocp_minor: "{{ major.split('.')[1] }}"
    set_fact:
      major_inter: "{{ ocp_major }}.{{ ocp_minor | int - 1 }}"

  - name: "Get intermediate release from Graph"
    uri:
      url: https://api.openshift.com/api/upgrades_info/v1/graph?channel=eus-{{ major }}&arch=amd64
    register: version_inter_graph

  - name: "Set version_inter from Graph"
    vars:
      graph_versions: "{{ version_inter_graph.json | json_query('nodes[*].version') }}"
      filter_inter: "^{{ major_inter }}"
    set_fact:
      version_inter: "{{ graph_versions | select('match', filter_inter) | list | version_sort | last }}"
    when:
      - version_inter is undefined
      - version_inter_graph.json["nodes"] | length

  - name: "Fail when no intermediate version is provided in the graph"
    fail:
      msg: "No intermediate version found, try defining one with: version_inter={{ major_inter }}.X"
    when:
      - version_inter is undefined
      - not version_inter_graph.json["nodes"] | length

  - name: "Get intermediate component from DCI"
    environment:
      DCI_CLIENT_ID: "{{ dci_client_id }}"
      DCI_API_SECRET: "{{ dci_api_secret }}"
      DCI_CS_URL: "{{ dci_cs_url }}"
    block:
      - name: "Get intermediate topic"
        dci_topic:
          state: search
          name: "OCP-{{ major_inter }}"
        register: inter_topic

      - name: "Get intermediate component"
        dci_component:
          state: search
          topic_id: "{{ inter_topic.topics[0].id }}"
          type: "ocp"
          name: "{{ version_inter }}"
        register: inter_component

  - name: "Get image for intermediate version from DCI"
    set_fact:
      image_inter: "{{ inter_component.components[0].data.pull_url }}"
    when: inter_component.components | length

  - name: "Fail when the intermediate version is not found in DCI"
    fail:
      message: "Unable to find {{ version_inter }} in DCI"
    when: not inter_component.components | length

  - name: Mirror release
    include_role:
      name: mirror-ocp-release
    vars:
      version: "{{ version_inter }}"
      release_url: "{{ hostvars.localhost.url }}"
      cache_dir: "{{ hostvars.localhost.provision_cache_store | default((ansible_env.HOME, 'releases') | join('/')) }}"
      webserver_url: "{{ hostvars.localhost.webserver_url | default(None) }}"
      registry_url: "docker://{{ local_registry }}/{{ hostvars[groups['registry_host'][0]].local_repo | default('') }}"
      auths_file: "{{ dci_pullsecret_file }}"
      force: "{{ (hostvars.localhost.dci_force_mirroring | default(false)) or (hostvars.localhost.build == 'candidate') | bool }}"
      install_type: "{{ hostvars.localhost.install_type | default('ipi') }}"
      sno_install_type: "{{ hostvars.localhost.sno_install_type | default('baremetal') }}"
      mirror_artifacts: "{{ dci_disconnected | default(False) | bool }}"
      unpack_artifacts: "{{ dci_disconnected | default(False) | bool }}"
      mirror_disk_images: "{{ dci_disconnected | default(False) | bool }}"
      mirror_container_images: "{{ dci_disconnected | default(False) | bool }}"
      write_custom_config: "{{ dci_disconnected | default(False) | bool }}"
    when:
      - dci_disconnected | default(false) |  bool
  when:
    - upgrade_eus | default(false) | bool

- name: "Clone/update baremetal-deploy repo"
  vars:
    git_repo: "{{ hostvars.localhost.baremetal_deploy_repo }}"
    git_ref: "{{ hostvars.localhost.baremetal_deploy_version }}"
  git:
    version: "{{ git_ref }}"
    repo: "{{ git_repo }}"
    dest: "{{ dci_cache_dir }}/baremetal_deploy_repo"
    force: true
  # On RHEL8 git clone can sporadically fail with OpenSSL SSL_read:
  # SSL_ERROR_SYSCALL, errno 104.
  register: git_clone
  retries: 3
  delay: 10
  until: not git_clone.failed
  when:
    - install_type == 'ipi'

- name: Include installed software as components
  vars:
    mandatory_rpms:
      - ansible
      - dci-ansible
      - dci-openshift-agent
      - dci-pipeline
      - python3-dciclient
      - python3-kubernetes
      - python3-openshift
    rpms_to_components: "{{ (dci_rpms_to_components + mandatory_rpms)|flatten }}"
    gits_to_components: "{{ dci_gits_to_components|flatten }}"
    dev_gits_to_components: "{{ dev_gits_to_components|flatten }}"
  include_role:
    name: include-components

- name: "Build operators bundles from upstream for non-GA OCP versions"
  include_tasks: build-upstream-catalog.yml
  when:
    - (dci_disconnected | default(false) | bool) or (local_registry | length)
    - version.split("-")[0].split(".")[2] | int == 0
    - ("build:dev" in tags) or ("build:candidate" in tags)

- name: "Mirror custom catalogs"
  include_role:
    name: mirror-catalog
  vars:
    mc_oc_tool_path: "{{ oc_tool_path }}"
    mc_catalog: "{{ catalog }}"
    mc_registry: "{{ local_registry }}"
    mc_pullsecret: "{{ dci_pullsecret_file }}"
  loop: "{{ custom_catalogs }}"
  loop_control:
    loop_var: catalog
  when:
    - dci_disconnected | default(false) | bool
    - custom_catalogs | default([]) | length

- name: "Define a list of ImageContentSourcePolicy files"
  set_fact:
    icsp_files: "{{ icsp_files | default([]) + [mc_icsp_file.path] }}"
  when: mc_icsp_file is defined

- name: "Get the operators mirror-list"
  include_tasks: get-mirror-list.yml

- name: "Prune catalog and mirror the operator images"
  block:
    - name: "Build pruned catalog"
      include_tasks: build-catalog.yml

    - name: "Mirror pruned catalog"
      include_role:
        name: mirror-catalog
      vars:
        mc_oc_tool_path: "{{ oc_tool_path }}"
        mc_catalog: "{{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}"
        mc_registry: "{{ local_registry }}"
        mc_pullsecret: "{{ dci_pullsecret_file }}"

    - name: "Append the ImageContentSourcePolicy file"
      set_fact:
        icsp_files: "{{ icsp_files | default([]) + [mc_icsp_file.path] }}"
      when: mc_icsp_file is defined

  when:
    - dci_disconnected | default(false) |  bool
    - mirror_list | length

- name: Append mirrors to trust bundle
  block:
    - name: Copy initial trust bundle
      copy:
        src: "{{ hostvars[groups['registry_host'][0]].disconnected_registry_mirrors_file }}"
        dest: "{{ dci_cluster_configs_dir }}/trust-bundle.yml"

    - name: Add mirrors to trust bundle
      blockinfile:
        path: "{{ dci_cluster_configs_dir }}/trust-bundle.yml"
        block: >
          {{ lookup('file', icsp_file) |
             from_yaml |
             json_query('spec.repositoryDigestMirrors') |
             to_yaml
          }}
        marker: "# {{ (icsp_file | basename).split('.')[0] }}"
      loop: "{{ icsp_files | unique | select | list }}"
      loop_control:
        loop_var: icsp_file

    - name: Override disconnected_registry_mirrors_file
      set_fact:
        disconnected_registry_mirrors_file: "{{ dci_cluster_configs_dir }}/trust-bundle.yml"
      delegate_facts: true
      delegate_to: "{{ groups['registry_host'][0] if 'registry_host' in groups else 'registry_host' }}"

  when:
    - icsp_files is defined
    - icsp_files | length

- name: "Catalog and mirror operators for EUS upgrade"
  block:
    - name: "Build pruned catalog for EUS upgrade"
      vars:
        version: "{{ version_inter }}"
      include_tasks: "build-catalog.yml"

    - name: "Mirror pruned catalog"
      include_role:
        name: mirror-catalog
      vars:
        mc_oc_tool_path: "{{ oc_tool_path }}"
        mc_catalog: "{{ local_registry }}{{ opm_local_registry_path }}:{{ index_tag }}"
        mc_registry: "{{ local_registry }}"
        mc_pullsecret: "{{ dci_pullsecret_file }}"

  when:
    - dci_disconnected | default(false) | bool
    - mirror_list is defined
    - mirror_list | length
    - upgrade_eus | default(false) | bool

- name: "Mirror must gather images"
  include_role:
    name: mirror_images
  vars:
    images: "{{ dci_must_gather_images | default(['registry.redhat.io/openshift4/ose-must-gather']) }}"
    authfile: "{{ dci_pullsecret_file }}"
  when: >
    (dci_disconnected | default(false) | bool) or
    (dci_local_mirror | default(false) | bool)

- name: Get provisioner SSH identity
  delegate_to: "{{ groups['provisioner'][0] }}"
  fetch:
    src: "~{{ hostvars[groups['provisioner'][0]].ansible_user }}/.ssh/id_rsa"
    dest: "~/.ssh/{{ cluster }}-provisioner_rsa"
    flat: true

- name: Erase bootloader to prevent old OS to boot
  delegate_to: "{{ item }}"
  become: true
  shell: |
    if grep 'Red Hat Enterprise Linux CoreOS' /etc/os-release; then
      for disk in /dev/sd?; do
        dd if=/dev/zero of=$disk bs=512 count=1
      done
    fi
  when:
    - dci_erase_bootloader_on_disk|default(False)|bool
    - dci_main is not defined or dci_main == 'install'
  with_items: "{{ groups['masters'] + groups['workers'] }}"
  ignore_unreachable: true
  ignore_errors: true

- name: Empty Console log files if present
  command: dd if=/dev/null of="{{ item }}"
  with_fileglob:
    - "/var/consoles/{{ hostvars.localhost.cluster }}/{{ hostvars.localhost.cluster }}*"
  when: hostvars.localhost.cluster is defined
  become: true

- name: "Storage service test (during upgrade only)"
  include_role:
    name: storage-tester
    apply:
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
  vars:
    storage_class: "{{ tester_storage_class | default(omit) }}"
  when:
    - dci_main is defined
    - dci_main == 'upgrade'
    - storage_upgrade_tester | default(false) | bool
...
