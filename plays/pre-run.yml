---

- name: Validate we have all the pieces to run in disconnected mode
  assert:
    that:
      - webserver_url is defined
      - groups['registry_host'] is defined
      - groups['registry_host'] | length > 0
      - local_registry_host is defined
      - local_registry_port is defined
      - provision_cache_store is defined
      - hostvars[groups['registry_host'][0]].local_repo is defined
  when:
    - dci_disconnected | default(false) | bool

# Prepare host
- name: Configure jumpbox
  include_tasks: configure-jumpbox.yml

- name: Import remoteci SSL keys
  vars:
    dci_import_keys_remoteci_id: '{{ job_info.job.remoteci.id }}'
  include_role:
    name: dci-import-keys

- name: Set pullsecret from job_info
  set_fact:
    pullsecret: "{{ job_info.job.topic.data.pull_secret | default({}) | combine(openshift_secret | default({}), recursive=True) }}"
  no_log: true

- name: Read Disconnected auths
  include_vars:
    file: "{{ hostvars[groups['registry_host'][0]].disconnected_registry_auths_file }}"
    name: disconnected_auths
  no_log: true
  when:
    - dci_disconnected | default(false) | bool

- name: "Check if {{ pullsecret_file }} exists"
  stat:
    path: "{{ pullsecret_file }}"
    get_checksum: false
  register: pullfile
  when:
    - pullsecret_file is defined

- name: "Set dci_pullsecret_file if pullsecret_file var exists"
  block:
    - name: "Copy pull secret file to cache directory"
      copy:
        src: "{{ pullsecret_file }}"
        dest: "{{ provision_cache_store }}/pull-secret.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
        force: true

    - name: "Set dci_pullsecret_file fact"
      set_fact:
        dci_pullsecret_file: "{{ pullsecret_file }}"
      no_log: true
  when:
    - pullsecret_file is defined
    - pullfile.stat.exists | bool

- name: "Set auths fact if pullsecret_file var is not present"
  block:
    - name: "Combine pull secret and disconnected_auths vars"
      set_fact:
        auths: "{{ pullsecret | combine({'auths': hostvars.localhost.disconnected_auths}, recursive=True) }}"
      no_log: true

    - name: "Copy auths fact content to a file"
      copy:
        content: "{{ auths }}"
        dest: "{{ provision_cache_store }}/pull-secret.txt"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
        force: true

    - name: "Set dci_pullsecret_file fact if pullsecret_file is not present"
      set_fact:
        dci_pullsecret_file: "{{ provision_cache_store }}/pull-secret.txt"
      no_log: true
  when:
    - dci_disconnected | default(false) | bool
    - pullsecret_file is undefined

# Download Openshift from DCI
- name: Mirror release
  include_role:
    name: mirror-ocp-release
  vars:
    version: "{{ hostvars.localhost.version }}"
    url: "{{ hostvars.localhost.url }}"
    build: "{{ hostvars.localhost.build }}"
    cache_dir: "{{ hostvars.localhost.provision_cache_store }}"
    webserver_url: "{{ hostvars.localhost.webserver_url }}"
    registry_url: "docker://{{ local_registry_host }}:{{ local_registry_port }}/{{ hostvars[groups['registry_host'][0]].local_repo }}"
    force_mirroring: "{{ (hostvars.localhost.dci_force_mirroring | default(false)) or (hostvars.localhost.build == 'candidate') | bool }}"
    install_type: "{{ hostvars.localhost.install_type | default('ipi') }}"
    sno_install_type: "{{ hostvars.localhost.sno_install_type | default('baremetal') }}"
  when:
    - dci_disconnected | default(false) |  bool

- name: "Clone/update baremetal-deploy repo"
  vars:
    git_repo: "{{ hostvars.localhost.baremetal_deploy_repo }}"
    git_ref: "{{ hostvars.localhost.baremetal_deploy_version }}"
  git:
    version: "{{ git_ref }}"
    repo: "{{ git_repo }}"
    dest: "{{ dci_cache_dir }}/baremetal_deploy_repo"
    force: true
  # On RHEL8 git clone can sporadically fail with OpenSSL SSL_read:
  # SSL_ERROR_SYSCALL, errno 104.
  register: git_clone
  retries: 3
  delay: 10
  until: not git_clone.failed

- include_tasks: track_git_repo.yml
  with_items:
    - "{{ dci_gits_to_components }}"
    - "{{ dev_gits_to_components }}"

- name: Gather the package facts
  package_facts:
    manager: auto

- include_tasks: track_rpm.yml
  with_items: "{{ dci_rpms_to_components }}"
  when: |
    item is not in
    ((dci_gits_to_components | list + dev_gits_to_components | list) |
    map('regex_replace', '^(.*)/$', '\\1') |
    map('regex_replace', '^.*/(.*)$', '\\1') | list)

# Mirror Operators for offline mode
- name: "dci-openshift-agent : Mirror Operators"
  vars:
    version: "{{ hostvars.localhost.version }}"
    local_registry: "{{ local_registry_host }}:{{ local_registry_port }}"
  include_role:
    name: operators-mirror
  when:
    - dci_disconnected | default(false) | bool
    - opm_mirror_list is defined
    - opm_mirror_list | length

 ### Mirror must-gather images

- name: "dci-openshift-agent : Mirror must gather images"
  include_tasks: mirror-image.yml
  loop: "{{ dci_must_gather_images | default(['registry.redhat.io/openshift4/ose-must-gather']) }}"
  loop_control:
    loop_var: image
  when: >
    (dci_disconnected | default(false) | bool) or
    (dci_local_mirror | default(false) | bool)

- name: Get provisioner SSH identity
  delegate_to: "{{ groups['provisioner'][0] }}"
  fetch:
    src: "~{{ hostvars[groups['provisioner'][0]].ansible_user }}/.ssh/id_rsa"
    dest: "~/.ssh/{{ cluster }}-provisioner_rsa"
    flat: true

- name: Erase bootloader to prevent old OS to boot
  delegate_to: "{{ item }}"
  become: true
  shell: |
    if grep 'Red Hat Enterprise Linux CoreOS' /etc/os-release; then
      for disk in /dev/sd?; do
        dd if=/dev/zero of=$disk bs=512 count=1
      done
    fi
  when:
    - dci_erase_bootloader_on_disk|default(False)|bool
    - dci_main is not defined or dci_main == 'install'
  with_items: "{{ groups['masters'] + groups['workers'] }}"
  ignore_unreachable: true
  ignore_errors: true

- name: Empty Console log files if present
  command: dd if=/dev/null of="{{ item }}"
  with_fileglob:
    - "/var/consoles/{{ hostvars.localhost.cluster }}/{{ hostvars.localhost.cluster }}*"
  when: hostvars.localhost.cluster is defined
  become: true

...
