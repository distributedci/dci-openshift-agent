---

- name: Validate we have all the pieces to run in disconnected mode
  assert:
    that:
      - webserver_url is defined
      - groups['registry_host'] is defined
      - groups['registry_host'] | length > 0
      - local_registry_host is defined
      - local_registry_port is defined
      - provision_cache_store is defined
      - hostvars[groups['registry_host'][0]].local_repo is defined
  when:
    - dci_disconnected | default(false) | bool

# Prepare host
- name: Configure jumpbox
  include_tasks: configure-jumpbox.yml

- name: Import remoteci SSL keys
  vars:
    dci_import_keys_remoteci_id: '{{ job_info.job.remoteci.id }}'
  include_role:
    name: dci-import-keys

- name: Get openshift_version from job.components
  set_fact:
    tags: "{{ item['tags'] }}"
    url: "{{ item['url']|default('') }}"
    version: "{{ item['data']['version'] }}"
    ocp_product_id: "{{ item['id'] }}"
  with_items: "{{ job_info.job.components }}"
  when: item["type"] == "ocp"

- name: Export the OCP component id into a file
  delegate_to: "{{ groups['provisioner'][0] }}"
  copy:
    dest: "/tmp/{{ job_id }}.ocp_prod_id"
    content: "{{ ocp_product_id }}"
  when:
    - job_info is defined
    - "'outputs' in job_info"
    - "'ocp_comp' in job_info['outputs']"

- name: Get build from tag
  set_fact:
    build: "{{ item.split(':')[1] }}"
  with_items: "{{ tags }}"
  when: item.split(":")[0] == "build"

- name: Set pullsecret from job_info
  set_fact:
    pullsecret: "{{ job_info.job.topic.data.pull_secret | default({}) | combine(openshift_secret | default({}), recursive=True) }}"
  no_log: true

- name: Read Disconnected auths
  include_vars:
    file: "{{ hostvars[groups['registry_host'][0]].disconnected_registry_auths_file }}"
    name: disconnected_auths
  no_log: true
  when:
    - dci_disconnected | default(false) | bool

# Candidate builds are ga builds that haven't gone ga quite yet.
# The following changes the build and version vars to look like ga
# for the upstream install playbooks. The dci-feeder adds '-0.rc-$TIMESTAMP'
# to the version, we have to strip it here.
- name: Set build:ga when build:candidate
  set_fact:
    build: "ga"
  when: build == "candidate"

# Download Openshift from DCI
- name: Mirror release
  include_role:
    name: mirror-ocp-release
  vars:
    version: "{{ hostvars.localhost.version }}"
    url: "{{ hostvars.localhost.url }}"
    build: "{{ hostvars.localhost.build }}"
    cache_dir: "{{ hostvars.localhost.provision_cache_store }}"
    webserver_url: "{{ hostvars.localhost.webserver_url }}"
    registry_url: "docker://{{ local_registry_host }}:{{ local_registry_port }}/{{ hostvars[groups['registry_host'][0]].local_repo }}"
    auths: "{{ hostvars.localhost.pullsecret | combine({'auths': hostvars.localhost.disconnected_auths}, recursive=True) }}"
    force_mirroring: "{{ (hostvars.localhost.dci_force_mirroring | default(false)) or (build == 'candidate') | bool }}"
    install_type: "{{ hostvars.localhost.install_type | default('ipi') }}"
    sno_install_type: "{{ hostvars.localhost.sno_install_type | default('baremetal') }}"
  when:
    - dci_disconnected | default(false) |  bool

- name: "Clone/update baremetal-deploy repo"
  vars:
    git_repo: "{{ hostvars.localhost.baremetal_deploy_repo }}"
    git_ref: "{{ hostvars.localhost.baremetal_deploy_version }}"
  git:
    version: "{{ git_ref }}"
    repo: "{{ git_repo }}"
    dest: "{{ dci_cache_dir }}/baremetal_deploy_repo"
    force: true
  # On RHEL8 git clone can sporadically fail with OpenSSL SSL_read:
  # SSL_ERROR_SYSCALL, errno 104.
  register: git_clone
  retries: 3
  delay: 10
  until: not git_clone.failed

- include_tasks: track_git_repo.yml
  with_items:
    - "{{ dci_gits_to_components }}"
    - "{{ dev_gits_to_components }}"

- name: Gather the package facts
  package_facts:
    manager: auto

- include_tasks: track_rpm.yml
  with_items: "{{ dci_rpms_to_components }}"
  when: |
    item is not in
    ((dci_gits_to_components | list + dev_gits_to_components | list) |
    map('regex_replace', '^(.*)/$', '\\1') |
    map('regex_replace', '^.*/(.*)$', '\\1') | list)

# Mirror Operators for offline mode
- name: "dci-openshift-agent : Mirror Operators"
  vars:
    version: "{{ hostvars.localhost.version }}"
    dci_pullsecret_file: "{{ provision_cache_store }}/{{ cluster }}-pull-secret.txt"
    local_registry: "{{ local_registry_host }}:{{ local_registry_port }}"
  include_role:
    name: operators-mirror
  when:
    - dci_disconnected | default(false) | bool
    - opm_mirror_list is defined

# Mirror must-gather images for offline mode
- name: "dci-openshift-agent : Mirror must-gather images"
  command:
    cmd: >
      skopeo copy --remove-signatures --all --authfile {{ dci_pullsecret_file }}
      --dest-tls-verify=false docker://{{ item }}
      docker://{{ local_image_location }}
  vars:
    dci_pullsecret_file: "{{ provision_cache_store }}/{{ cluster }}-pull-secret.txt"
    local_registry: "{{ local_registry_host }}:{{ local_registry_port }}"
    local_image_location: "{{ local_registry }}/{{ item | regex_replace('^[^/]*/', '') }}"
  register: skopeo_copy
  retries: 5
  delay: 5
  until:
    - skopeo_copy is not failed
  loop: "{{ dci_must_gather_images | default(['registry.redhat.io/openshift4/ose-must-gather']) }}"
  when: >
    (dci_disconnected | default(false) | bool) or
    (dci_local_mirror | default(false) | bool)

- name: Get provisioner SSH identity
  delegate_to: "{{ groups['provisioner'][0] }}"
  fetch:
    src: "~{{ hostvars[groups['provisioner'][0]].ansible_user }}/.ssh/id_rsa"
    dest: "~/.ssh/{{ cluster }}-provisioner_rsa"
    flat: true

- name: Erase bootloader to prevent old OS to boot
  delegate_to: "{{ item }}"
  become: true
  shell: |
    if grep 'Red Hat Enterprise Linux CoreOS' /etc/os-release; then
      for disk in /dev/sd?; do
        dd if=/dev/zero of=$disk bs=512 count=1
      done
    fi
  when:
    - dci_erase_bootloader_on_disk|default(False)|bool
    - dci_main is not defined or dci_main == 'install'
  with_items: "{{ groups['masters'] + groups['workers'] }}"
  ignore_unreachable: true
  ignore_errors: true

- name: Empty Console log files if present
  command: dd if=/dev/null of="{{ item }}"
  with_fileglob:
    - "/var/consoles/{{ hostvars.localhost.cluster }}/{{ hostvars.localhost.cluster }}*"
  when: hostvars.localhost.cluster is defined
  become: true

...
