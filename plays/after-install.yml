---

- name: "Get cluster install-config"
  kubernetes.core.k8s_info:
    api: v1
    kind: ConfigMap
    name: cluster-config-v1
    namespace: kube-system
  register: ic
  until: "'resources' in ic and ic.resources != []"
  retries: 60
  delay: 5
  no_log: true

- name: "Add additional Registry CAs for Image Service"
  when:
    - dci_disconnected | default(false) | bool
    - dci_local_registry is defined
  block:
    - name: "Add additional Registry CAs for Image Service - Standard"
      vars:
        install_conf: "{{ ic.resources[0].data['install-config'] | from_yaml }}"
        additional_ca: "{{ install_conf | json_query('additionalTrustBundle') }}"
      ansible.builtin.include_tasks: add-additional-ca.yml
      when:
        - (install_type | default('ipi')) not in ['abi']
        - additional_ca | default("")| length > 0

    - name: "Add additional Registry CAs for Image Service - ABI"
      vars:
        additional_ca: "{{ mirror_certificate }}"
      ansible.builtin.include_tasks: add-additional-ca.yml
      when:
        - (install_type | default('ipi')) in ['abi']
        - mirror_certificate | default("")| length > 0

- name: "Save the install-config"
  vars:
    install_config: '{{ ic.resources[0].data["install-config"] }}'
  ansible.builtin.copy:
    content: "{{ install_config }}"
    dest: "{{ dci_cluster_configs_dir }}/cluster-install-config.yml"
    mode: "0600"

- name: "Upload cluster's files to DCI Control Server"
  tags:
    - dci
  environment:
    DCI_CLIENT_ID: "{{ dci_client_id }}"
    DCI_API_SECRET: "{{ dci_api_secret }}"
    DCI_CS_URL: "{{ dci_cs_url }}"
  dci_file:
    path: "{{ item }}"
    name: "{{ item | basename }}"
    job_id: "{{ job_id }}"
    mime: "text/plain"
  loop:
    - "{{ dci_cluster_configs_dir }}/kubeconfig"
    - "{{ dci_cluster_configs_dir }}/kubeadmin-password"
    - "{{ dci_cluster_configs_dir }}/cluster-install-config.yml"
  delegate_to: localhost

- name: "Check if all cluster-operators are running correctly"
  vars:
    co_available_count: "{{
      clusteroperator_info.resources
      | map(attribute='status.conditions')
      | list
      | flatten
      | selectattr('type', 'equalto', 'Available')
      | selectattr('status', 'equalto', 'True')
      | list
      | length
      }}"
    co_count: "{{ clusteroperator_info.resources | length }}"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterOperator
  register: clusteroperator_info
  until:
    - clusteroperator_info.resources is defined
    - clusteroperator_info.resources | length > 0
    - co_available_count == co_count
  retries: 15
  delay: 10
  no_log: true

- name: "Check all nodes have been provisioned"
  vars:
    install_config: "{{ ic.resources[0].data['install-config'] | from_yaml }}"
    requested_compute: "{{ install_config | json_query('compute[? name==`worker` ].replicas') | first }}"
    prov_query: "resources[*].status.provisioning.state"
    bmh_states: >
      {% for s in bmh_info | json_query(prov_query) | unique %}
        {{ s.split() | last }}
      {% endfor %}
    bmh_unique_states: "{{ bmh_states.split() | unique }}"
  kubernetes.core.k8s_info:
    kind: BareMetalHost
    api: metal3.io/v1alpha1
    namespace: openshift-machine-api
  register: bmh_info
  retries: "{{ (requested_compute | int + 4) * 10 }}"
  delay: 30
  until: bmh_unique_states == ['provisioned']
  when:
    - (install_type | default('ipi')) in ['ipi', 'upi']

- name: "Check cluster nodes match requested configuration"
  when:
    - acm_cluster_type | default('') not in ['hypershift', 'sno', "HostedControlPlane"]
  block:
    - name: "Check control plane nodes matches requested"
      vars:
        control_nodes_count: "{{ control_nodes.resources | length }}"
        install_config: "{{ ic.resources[0].data['install-config'] | from_yaml }}"
        requested_control: "{{ install_config | json_query('controlPlane.replicas') }}"
      kubernetes.core.k8s_info:
        kind: Node
        label_selectors:
          - "node-role.kubernetes.io/master"
      register: control_nodes
      retries: "{{ (requested_control | int + 1) * 10 }}"
      no_log: true
      delay: 10
      until:
        - ( control_nodes_count | int ) == ( requested_control | int )

    - name: "Check compute plane nodes matches requested"
      vars:
        compute_nodes_count: "{{ compute_nodes.resources | length }}"
        install_config: "{{ ic.resources[0].data['install-config'] | from_yaml }}"
        requested_compute: "{{ install_config | json_query('compute[? name==`worker` ].replicas') | first }}"
      kubernetes.core.k8s_info:
        kind: Node
        label_selectors:
          - "node-role.kubernetes.io/worker"
      register: compute_nodes
      no_log: true
      retries: "{{ (requested_compute | int + 1) * 10 }}"
      delay: 20
      until:
        - ( compute_nodes_count | int ) >= ( requested_compute | int )

    - name: "Patch clusterversion update channel"
      vars:
        base_version: "{{ version.split('.')[0] }}.{{ version.split('.')[1] }}"
      kubernetes.core.k8s:
        state: present
        name: version
        definition:
          kind: ClusterVersion
          spec:
            channel: "{{ dci_ocp_channel | default('fast') }}-{{ base_version }}"
      register: patch_channel_result
      until: patch_channel_result is not failed
      retries: 6
      delay: 10

    - name: "Disable provisioning"
      when:
        - dci_disable_provisioning | default(false) | bool
      block:
        - name: "Get provisioning"
          kubernetes.core.k8s_info:
            api_version: metal3.io/v1alpha1
            kind: Provisioning
            name: provisioning-configuration
          register: provisioning_cr

        - name: Disable provisioning
          kubernetes.core.k8s:
            definition:
              apiVersion: metal3.io/v1alpha1
              kind: Provisioning
              metadata:
                name: provisioning-configuration
              spec:
                provisioningNetwork: Disabled
          when:
            - provisioning_cr.resources | length

    - name: "Setup additional credentials to OCP"
      vars:
        oau_dir: "{{ dci_cluster_configs_dir }}"
        oau_users:
          - "admin:admin"
          - "nonadmin:none"
      ansible.builtin.include_role:
        name: redhatci.ocp.ocp_add_users

- name: "Create a DCI component for the rhcos_kernel"
  ignore_errors: true
  delegate_to: localhost
  tags:
    - dci
  block:
    - name: "Create component with the rhcos kernel in use"
      vars:
        kernel_version: "{{ control_nodes.resources[0].status.nodeInfo.kernelVersion }}"
      environment:
        DCI_CLIENT_ID: "{{ dci_client_id }}"
        DCI_API_SECRET: "{{ dci_api_secret }}"
        DCI_CS_URL: "{{ dci_cs_url }}"
      dci_component:
        display_name: "rhcos_kernel {{ kernel_version }}"
        version: "{{ kernel_version }}"
        team_id: "{{ job_info['job']['team_id'] }}"
        topic_id: "{{ job_info['job']['topic_id'] }}"
        type: kernel
        state: present
      register: kernel_component

    - name: "Attach kernel component to the job"
      dci_job_component:
        component_id: "{{ kernel_component.component.id }}"
        job_id: "{{ job_id }}"
      register: job_component_result
      until: job_component_result is not failed
      retries: 5
      delay: 20
      when:
        - "'component' in kernel_component"
        - "'id' in kernel_component.component"

- name: After install for IPI/UPI/SNO/ABI
  when:
    - (install_type | default('ipi')) in ['ipi', 'upi', 'sno', 'abi']
  block:
    - name: "Merge all inventory hosts"
      ansible.builtin.set_fact:
        all_hosts: "{{ all_hosts | default([]) + groups[item] }}"
      loop: "{{ groups.keys() | list }}"

    - name: "Apply node labels"
      ansible.builtin.include_role:
        name: redhatci.ocp.label_nodes
      vars:
        hosts_list: "{{ all_hosts | list | unique }}"

    - name: "Upload additional credentials to DCI Control Server"
      tags:
        - dci
      environment:
        DCI_CLIENT_ID: "{{ dci_client_id }}"
        DCI_API_SECRET: "{{ dci_api_secret }}"
        DCI_CS_URL: "{{ dci_cs_url }}"
      dci_file:
        path: "{{ item }}"
        name: "{{ item | basename }}"
        job_id: "{{ job_id }}"
        mime: "text/plain"
      loop:
        - "{{ dci_cluster_configs_dir }}/ocp_creds.txt"
      delegate_to: localhost

- name: Set override fact for ACM hubs
  ansible.builtin.set_fact:
    hub_os_images:
      - openshiftVersion: "{{ version }}"
        version: "{{ version.split('.')[:2] | join('.') }}"
        url: "{{ metalosimage }}" # From mirror_ocp_release
        cpuArchitecture: x86_64
  when:
    - enable_acm | bool
    - dci_disconnected | default(false) | bool

- name: Check for ICSPs that need to be migrated
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1alpha1
    kind: ImageContentSourcePolicy
  register: cluster_icsp

- name: "Migrate ICSP to IDMS"
  ansible.builtin.include_tasks: migrate-icsp.yml
  when:
    - cluster_icsp is defined
    - cluster_icsp.resources | length > 0
    - version is version("4.14", ">=")

- name: Encrypt etcd
  ansible.builtin.include_role:
    name: redhatci.ocp.etcd_data
  vars:
    ed_action: encrypt
    ed_enc: "{{ version is version('4.13', '>=') | ternary('aesgcm', 'aescbc') }}"
  when:
    - dci_encrypt_etcd | default(false) | bool

- name: Print etcd data result
  ansible.builtin.debug:
    var: ed_result
  when:
    - dci_encrypt_etcd | default(false) | bool

- name: Create defined Custom Resources
  when:
    - dci_ocp_custom_resources is defined
    - dci_ocp_custom_resources | default([]) | length > 0
  block:
    - name: Create defined Custom Resources
      ansible.builtin.include_role:
        name: redhatci.ocp.deploy_cr
      vars:
        dc_api_version: "{{ cr.api_version }}"
        dc_kind: "{{ cr.kind }}"
        dc_namespace: "{{ cr.namespace | default(omit) }}"
        dc_name: "{{ cr.name }}"
        dc_spec: "{{ cr.spec }}"
        dc_wait_condition: "{{ cr.wait_condition }}"
      loop: "{{ dci_ocp_custom_resources }}"
      loop_control:
        loop_var: cr

- name: Wipe devices used by ODF
  ansible.builtin.script:
    cmd: >
      plays/scripts/wipe-odf-disks.sh
      {{ local_storage_devices | join(' ') }}
  ignore_errors: false
  register: disk_wipe_result
  retries: 3
  delay: 10
  until: disk_wipe_result is not failed
  changed_when: false
  when:
    - dci_wipe_local_storage | default(true) | bool
    - ocs_install_type is defined
    - ocs_install_type == 'internal'
    - local_storage_devices | default([]) | length
...
