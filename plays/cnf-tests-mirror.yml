# Mirror images needed for running cnf-tests
---
  - name: Login as admin user for cnf-tests
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc login --insecure-skip-tls-verify=true -u admin -p admin https://api.{{ cluster }}.{{ domain }}:6443
    retries: 10
    delay: 10
    register: result
    until: result.rc == 0

  - name: Create images.json file
    shell: |
      echo '[
        {
            "registry": "quay.io/openshift-kni/",
            "image": "cnf-tests:{{ cnf_tests_image }}"
        },
        {
            "registry": "quay.io/openshift-kni/",
            "image": "dpdk:{{ cnf_tests_image }}"
        },
        {
            "registry": "quay.io/openshift-kni/",
            "image": "performance-addon-operator-registry:{{ cnf_operator_channel }}-snapshot"
        }

      ]' > {{ dci_cluster_configs_dir }}/images.json

  - name: Mirror cnf-tests and dpdk images to local repo
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: >
      set -o pipefail;
      podman run --rm -v {{ dci_cluster_configs_dir }}/:/kubeconfig:Z -e KUBECONFIG=/kubeconfig/kubeconfig quay.io/openshift-kni/cnf-tests:{{ cnf_tests_image }}
      /usr/bin/mirror -registry "{{ local_registry_host }}:{{ local_registry_port }}/" --images "/kubeconfig/images.json"
      |  {{ dci_cluster_configs_dir }}/oc image mirror -f - -a {{ pullsecret_file }} --insecure=true

  - name: Create catalog src
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc apply -f - << EOF
      apiVersion: operators.coreos.com/v1alpha1
      kind: CatalogSource
      metadata:
        name: mirrored-redhat-operators
        namespace: openshift-marketplace
      spec:
        sourceType: grpc
        image: "{{ local_registry_host }}:{{ local_registry_port }}/olm/redhat-operators:v1"
        displayName: Red Hat Operators
        publisher: grpc
      EOF
    register: create_catsource
    changed_when: "'catalogsource.operators.coreos.com/mirrored-redhat-operators' in create_catsource.stdout"

  - name: wait for master MCP to start updating
    environment:
      KUBECONFIG:  "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc wait --for=condition=Updating --timeout=300s mcp master
    changed_when: false

  - name: wait for worker MCP to start updating
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc wait --for=condition=Updating --timeout=300s mcp worker
    changed_when: false

  - name: Check if master nodes are ready with the new image content source policy. Waiting till they are ready...
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc wait --for=condition=updated machineconfigpool.machineconfiguration.openshift.io/master --timeout=45m
    retries: 10
    delay: 10
    register: result
    until: result.rc == 0

  - name: Wait for worker nodes to be ready with the new image content source policy. Please be patient, this can take a while..
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc wait --for=condition=updated machineconfigpool.machineconfiguration.openshift.io/worker --timeout=45m
    retries: 10
    delay: 10
    register: result
    until: result.rc == 0

  - name: Configure registry
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{} } } }'
      {{ dci_cluster_configs_dir }}/oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"} }'
