---
- name: Setup job_logs directory
  ansible.builtin.include_tasks: log-dir.yml
  when: job_logs is undefined

- name: "Find the scripts directory"
  ansible.builtin.find:
    paths:
      - "{{ playbook_dir }}"
      - "{{ playbook_dir }}/.."
    file_type: directory
    patterns: "scripts"
    recurse: true
  register: scripts_dir

- name: "Get logs from IPI/UPI deployment"
  vars:
    provisioner_user: "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}"
    provisioner_host: >-
      {{ hostvars[groups.provisioner.0].ansible_host |
        default(groups['provisioner'][0]) }}
  ansible.builtin.shell:
    cmd: >
      {{ scripts_dir.files[0].path }}/get-ipi-logs
      {{ provisioner_user }}@{{ provisioner_host }}
      {{ job_logs.path }}
      {{ groups['masters'] | union(groups['workers']) | join(' ') }}
  ignore_errors: true
  when:
    - (install_type | default('ipi')) in ['ipi', 'upi']

- name: Get logs from ABI deployment
  ansible.builtin.include_tasks: abi-get-logs.yml
  when: (install_type | default('ipi')) in ['abi']

- name: "Get logs from OCP deployment"
  environment:
    DCI_MUST_GATHER_IMAGES: >-
      {{ dci_must_gather_images |
        default(["registry.redhat.io/openshift4/ose-must-gather"]) |
        join(" ") }}
    REGISTRY: "{{ dci_local_registry }}"
    PATH: "{{ ansible_env.PATH }}:{{ dci_cluster_configs_dir }}:/sbin:/usr/sbin:/usr/local/bin/"
  ansible.builtin.shell:
    cmd: >
      timeout -v 20m
      {{ scripts_dir.files[0].path }}/get-ocp-logs
      {% if (install_type | default('ipi')) == 'acm' %}
      -p {{ acm_cluster_type }}
      {% endif %}
      {{ job_logs.path }}
  ignore_errors: true
  delegate_to: localhost

- name: "Remove the must-gather directory"
  vars:
    dir_prefix: "{{ acm_cluster_type | default('', True) }}"
    dir_name: "{{ ((install_type | default('ipi')) == 'acm') | ternary(dir_prefix+'_must_gather', 'must_gather') }}"
  file:
    path: "{{ job_logs.path }}/{{ dir_name }}"
    state: absent

- name: Get list of nodes from cluster
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: nodes_info
  ignore_errors: true

- name: Get kernel information for all nodes
  vars:
    node_name: "{{ item.metadata.name }}"
  ansible.builtin.shell:
    cmd: >
      {{ oc_tool_path }} debug node/{{ node_name }}
      -- chroot /host sh -c 'echo "{\"version\": \"$(uname -r)\", \"params\": \"$(cat /proc/cmdline)\"}"'
  register: kernel_info
  ignore_errors: true
  loop: "{{ nodes_info.resources | default([]) }}"
  when:
    - nodes_info.resources is defined
    - item.status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0

- name: Save kernel information to files
  ansible.builtin.copy:
    content: >-
      {{ {
        'version': (item.stdout | from_json).version,
        'params': (((item.stdout | from_json).params | default('') | cmdline_to_json | from_json))
      } | to_json }}
    dest: "{{ job_logs.path }}/dci-extra.kernel.{{ item.item.metadata.name }}.json"
    mode: '0644'
  ignore_errors: true
  loop: "{{ kernel_info.results | default([]) }}"
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0
    - item.stdout is defined
    - (item.stdout | length) > 0

- name: "Get logs from ACM-Hub"
  environment:
    DCI_MUST_GATHER_IMAGES: >-
      {{ dci_must_gather_images |
        default(["registry.redhat.io/openshift4/ose-must-gather"]) |
        join(" ") }}
    REGISTRY: "{{ dci_local_registry }}"
    KUBECONFIG: "{{ hub_kubeconfig_path }}"
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin:/usr/local/bin/"
  ansible.builtin.shell:
    cmd: >
      {{ scripts_dir.files[0].path }}/get-ocp-logs
      {{ job_logs.path }}
  ignore_errors: true
  when:
    - (install_type | default('ipi')) in ['acm']

- name: Generate SOS reports
  ansible.builtin.include_role:
    name: redhatci.ocp.sos_report
  vars:
    sos_report_nodes: "{{ dci_sos_report_nodes }}"
    sos_report_dir: "{{ job_logs.path }}"
    sos_report_image: "{{ dci_local_registry | default('registry.redhat.io', true) }}/rhel9/support-tools"
    sos_report_oc_path: "{{ oc_tool_path }}"
  when:
    - dci_sos_report_nodes is defined
    - dci_sos_report_nodes | length

- name: Gathering results for storage service tester
  ansible.builtin.include_role:
    name: redhatci.ocp.storage_tester
    tasks_from: gathering-logs.yml
    apply:
      environment:
        REGISTRY: "{% if dci_local_registry is defined %}{{ dci_local_registry }}{% else %}registry.redhat.io{% endif %}"
        OC_PATH: "{{ oc_tool_path }}"
  when:
    - dci_main is defined
    - dci_main == 'upgrade'
    - storage_upgrade_tester | default(false) | bool

- name: Find test Junit files
  ansible.builtin.find:
    paths: "{{ job_logs.path }}"
    recurse: true
    patterns: "*.xml"
  register: junit_matched

- name: "Upload Junit files to DCI Control Server"
  environment:
    DCI_CLIENT_ID: "{{ dci_client_id }}"
    DCI_API_SECRET: "{{ dci_api_secret }}"
    DCI_CS_URL: "{{ dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename | regex_replace('^(.*).xml$','\\1') }}"
    job_id: "{{ job_id }}"
    mime: "application/junit"
  with_items: "{{ junit_matched.files }}"

- name: Find console logs
  ansible.builtin.find:
    paths: "/var/consoles/{{ cluster }}/"
    patterns: '{{ cluster }}*'
    size: 1k
    recurse: false
  register: console_log_files

- name: Copy console logs into tmp directory
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}/{{ item | basename }}-console.log"
    flat: true
    validate_checksum: false
  loop: "{{ console_log_files.files | map(attribute='path') | list }}"

- name: Find deployment logs (text)
  ansible.builtin.find:
    paths: "{{ job_logs.path }}"
    patterns: "*.log,*.txt,*.html,*.yaml,*.trace,*.pcap,*.json"
  register: logs_matched

- name: "Upload text logs"
  vars:
    mime_type: "text/plain"
  ansible.builtin.include_tasks: upload-log.yml
  when: not (item.path | regex_search(".*_sig-storage.*|dci-extra\..*\.json$"))
  with_items: "{{ logs_matched.files }}"

- name: Find DCI analytics files
  ansible.builtin.find:
    paths: "{{ job_logs.path }}"
    patterns: "dci-extra.*.json"
  register: dci_analytics_matched

- name: "Upload DCI analytics files"
  vars:
    mime_type: "application/dci-analytics+json"
  ansible.builtin.include_tasks: upload-log.yml
  with_items: "{{ dci_analytics_matched.files }}"

- name: Find deployment logs (compressed)
  ansible.builtin.find:
    paths: "{{ job_logs.path }}"
    recurse: true
    patterns: "*.gz"
  register: logs_matched

- name: "Upload compressed logs"
  vars:
    mime_type: "application/x-gzip"
  ansible.builtin.include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Find SOS reports (compressed)
  ansible.builtin.find:
    paths: "{{ job_logs.path }}"
    recurse: true
    patterns: "*.tar.xz"
  register: logs_matched

- name: Upload more compressed logs
  vars:
    mime_type: "application/x-xz"
  ansible.builtin.include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Clean up Temp dir
  ansible.builtin.file:
    path: "{{ job_logs.path }}"
    state: absent
