---
- name: Block for console logs when job exists
  block:
  - name: Find console logs
    find:
      paths: "/var/consoles/{{ hostvars.localhost.cluster }}/"
      patterns: '{{ hostvars.localhost.cluster }}*'
      size: 1k
      recurse: no
    register: console_log_files

  - name: Create tmp directory for console logs
    tempfile:
      state: directory
    register: consoles_log_dir

  - name: Copy console logs into tmp directory
    fetch:
      src: "{{ item }}"
      dest: "{{ consoles_log_dir.path }}/{{ item | basename }}-console.log"
      flat: yes
      validate_checksum: no
    loop: "{{ console_log_files.files | map(attribute='path') | list }}"

  - name: Upload iLo logs to DCI Control Server
    environment:
      - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
      - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
      - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
    dci_file:
      path: "{{ item }}"
      name: "{{ item | basename }}"
      mime: 'text/plain'
      job_id: "{{ hostvars.localhost.job_id }}"
    with_fileglob:
      - "{{ consoles_log_dir.path }}/*"

  - name: Delete tmp directory
    file:
      state: absent
      path: "{{ consoles_log_dir.path }}"
  when:
    - hostvars.localhost.job_id
    - hostvars.localhost.dci_client_id
    - hostvars.localhost.dci_api_secret
    - hostvars.localhost.dci_cs_url

- name: "Setup job_logs directory"
  include_tasks: plays/log-dir.yml
  when: job_logs is undefined

- name: Get logs from OCP deployment
  environment:
    - DCI_MUST_GATHER_IMAGES: '{{ dci_must_gather_images | default(["registry.redhat.io/openshift4/ose-must-gather"]) | join(" ") }}'
  script: ./scripts/get-logs "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}@{{ groups['provisioner'][0] }}" "{{ job_logs.path }}" "{{ groups['masters'] }}"
  ignore_errors: true

- name: "Find test Junit files"
  find:
    paths: "{{ job_logs.path }}"
    recurse: true
    patterns: "*junit,*.xml"
  register: junit_matched

- name: "Upload Junit files to DCI Control Server"
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename | regex_replace('^(.*).xml$','\\1') }}"
    job_id: "{{ hostvars.localhost.job_id }}"
    mime: "application/junit"
  with_items: "{{ junit_matched.files }}"

- name: Find deployment logs (text)
  find:
    paths: "{{ job_logs.path }}"
    recurse: yes
    patterns: "*.log,*.txt,*.html,*.yaml,*.trace,*.pcap"
  register: logs_matched

- name: "Upload text logs"
  vars:
    mime_type: "text/plain"
  include_tasks: upload-log.yml
  when: not (item.path | regex_search(".*_sig-storage.*"))
  with_items: "{{ logs_matched.files }}"

- name: Find deployment logs (compressed)
  find:
    paths: "{{ job_logs.path }}"
    recurse: yes
    patterns: "*.gz"
  register: logs_matched

- name: "Upload compressed logs"
  vars:
    mime_type: "application/x-gzip"
  include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Clean up Temp dir
  file:
    path: "{{ job_logs.path }}"
    state: absent

...
