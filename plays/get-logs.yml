---

- name: "Setup job_logs directory"
  include_tasks: log-dir.yml
  when: job_logs is undefined

- name: "Get logs from IPI/UPI deployment"
  vars:
    provisioner_user: "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}"
    provisioner_host: >-
      {{ hostvars[groups.provisioner.0].ansible_host |
        default(groups['provisioner'][0]) }}
  shell:
    cmd: >
      plays/scripts/get-ipi-logs
      {{ provisioner_user }}@{{ provisioner_host }}
      {{ job_logs.path }}
      {{ groups['masters'] | union(groups['workers']) | join(' ') }}
  ignore_errors: true
  when:
    - install_type in ['ipi', 'upi']

- name: "Get logs from Assisted deployment"
  include_tasks: assisted-get-logs.yml
  when: install_type in ['assisted']

- name: "Get logs from OCP deployment"
  environment:
    DCI_MUST_GATHER_IMAGES: >-
      {{ dci_must_gather_images |
        default(["registry.redhat.io/openshift4/ose-must-gather"]) |
        join(" ") }}
    REGISTRY: "{{ dci_local_registry }}"
    PATH: "{{ ansible_env.PATH }}:{{ dci_cluster_configs_dir }}:/sbin:/usr/sbin:/usr/local/bin/"
  shell:
    cmd: >
      timeout -v 20m
      plays/scripts/get-ocp-logs
      {% if install_type == 'acm' %}
      -p {{ acm_cluster_type }}
      {% endif %}
      {{ job_logs.path }}
  ignore_errors: true

- name: "Remove the must-gather directory"
  vars:
    dir_prefix: "{{ acm_cluster_type | default('', True) }}"
    dir_name: "{{ (install_type == 'acm') | ternary(dir_prefix+'_must_gather', 'must_gather') }}"
  file:
    path: "{{ job_logs.path }}/{{ dir_name }}"
    state: absent

- name: Kernel parameters
  vars:
    kernel_params: "{{ job_logs.path }}/worker-kernel-params"
  block:
    - name: Read plain kernel params
      slurp:
        src: "{{ kernel_params }}.txt"
      register: slurp_cmdline
      ignore_errors: true

    - name: Generate kernel params json
      copy:
        content: "{{ slurp_cmdline['content'] | b64decode | cmdline_to_json }}"
        dest: "{{ kernel_params }}.json"
      when: slurp_cmdline['content'] is defined

    - name: Delete plan kernel params
      file:
        path: "{{ kernel_params }}.txt"
        state: absent

- name: "Get logs from ACM-Hub"
  environment:
    DCI_MUST_GATHER_IMAGES: >-
      {{ dci_must_gather_images |
        default(["registry.redhat.io/openshift4/ose-must-gather"]) |
        join(" ") }}
    REGISTRY: "{{ dci_local_registry }}"
    KUBECONFIG: "{{ hub_kubeconfig_path }}"
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin:/usr/local/bin/"
  shell:
    cmd: >
      plays/scripts/get-ocp-logs
      {{ job_logs.path }}
  ignore_errors: true
  when:
    - install_type in ['acm']

- name: "Find test Junit files"
  find:
    paths: "{{ job_logs.path }}"
    recurse: true
    patterns: "*junit,*.xml"
  register: junit_matched

- name: "Upload Junit files to DCI Control Server"
  environment:
    - DCI_CLIENT_ID: "{{ dci_client_id }}"
    - DCI_API_SECRET: "{{ dci_api_secret }}"
    - DCI_CS_URL: "{{ dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename | regex_replace('^(.*).xml$','\\1') }}"
    job_id: "{{ job_id }}"
    mime: "application/junit"
  with_items: "{{ junit_matched.files }}"

- name: Find console logs
  find:
    paths: "/var/consoles/{{ cluster }}/"
    patterns: '{{ cluster }}*'
    size: 1k
    recurse: no
  register: console_log_files

- name: Copy console logs into tmp directory
  fetch:
    src: "{{ item }}"
    dest: "{{ job_logs.path }}/{{ item | basename }}-console.log"
    flat: yes
    validate_checksum: no
  loop: "{{ console_log_files.files | map(attribute='path') | list }}"

- name: Find deployment logs (text)
  find:
    paths: "{{ job_logs.path }}"
    patterns: "*.log,*.txt,*.html,*.yaml,*.trace,*.pcap,*.json"
  register: logs_matched

- name: "Upload text logs"
  vars:
    mime_type: "text/plain"
  include_tasks: upload-log.yml
  when: not (item.path | regex_search(".*_sig-storage.*"))
  with_items: "{{ logs_matched.files }}"

- name: Find deployment logs (compressed)
  find:
    paths: "{{ job_logs.path }}"
    recurse: yes
    patterns: "*.gz"
  register: logs_matched

- name: "Upload compressed logs"
  vars:
    mime_type: "application/x-gzip"
  include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Clean up Temp dir
  file:
    path: "{{ job_logs.path }}"
    state: absent

...
