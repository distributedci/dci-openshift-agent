---

- name: Generate temp dir for logs
  tempfile:
    state: directory
    suffix: logdir
  register: logdir
  delegate_to: localhost

- name: Get logs from OCP deployment
  script: ./scripts/get-logs "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}@{{ groups['provisioner'][0] }}" "{{ logdir.path }}"
  delegate_to: localhost
  ignore_errors: true

- name: Find deployment logs (text)
  find:
    paths: "{{ logdir.path }}"
    recurse: yes
    patterns: "*.log,*.txt,*.html"
  register: logs_matched
  delegate_to: localhost

- block:
  - name: Upload text logs directory to DCI Control Server
    environment:
      - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
      - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
      - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
    dci_file:
      path: "{{ item.path }}"
      name: "{{ item.path | basename }}"
      job_id: "{{ hostvars.localhost.job_id }}"
      mime: "text/plain"
    delegate_to: localhost

  rescue:
    - name: Create a local log directory
      file:
        path: "{{ dci_local_log_dir }}/{{ hostvars.localhost.job_id }}"
        state: directory
      when: dci_local_log_dir is defined
      delegate_to: localhost

    - name: Copy log
      copy:
        src: "{{ item.path }}"
        dest: "{{ dci_local_log_dir }}/{{ hostvars.localhost.job_id }}/"
      when: dci_local_log_dir is defined
      delegate_to: localhost

  with_items: "{{ logs_matched.files }}"

- name: Find deployment logs (compressed)
  find:
    paths: "{{ logdir.path }}"
    recurse: yes
    patterns: "*.gz"
  register: logs_matched
  delegate_to: localhost

- block:
  - name: Upload compressed logs to DCI Control Server
    environment:
      - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
      - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
      - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
    dci_file:
      path: "{{ item.path }}"
      name: "{{ item.path | basename }}"
      job_id: "{{ hostvars.localhost.job_id }}"
      mime: "application/x-gzip"
    delegate_to: localhost

  rescue:
    - name: Create a local log directory
      file:
        path: "{{ dci_local_log_dir }}/{{ hostvars.localhost.job_id }}"
        state: directory
      when: dci_local_log_dir is defined
      delegate_to: localhost

    - name: Copy log
      copy:
        src: "{{ item.path }}"
        dest: "{{ dci_local_log_dir }}/{{ hostvars.localhost.job_id }}/"
      when: dci_local_log_dir is defined
      delegate_to: localhost

  with_items: "{{ logs_matched.files }}"

- name: Clean up Temp dir
  file:
    path: "{{ logdir.path }}"
    state: absent
  delegate_to: localhost

...
