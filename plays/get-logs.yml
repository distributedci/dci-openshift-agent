---

- name: Generate temp dir for logs
  tempfile:
    state: directory
    suffix: logdir
  register: logdir
  delegate_to: localhost

- name: Get logs from OCP deployment
  script: ./scripts/get-logs "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}@{{ groups['provisioner'][0] }}" "{{ logdir.path }}"
  delegate_to: localhost
  ignore_errors: true

- name: Find deployment logs (text)
  find:
    paths: "{{ logdir.path }}"
    recurse: yes
    patterns: "*.log,*.txt,*.html"
  register: logs_matched
  delegate_to: localhost

- name: Upload text logs directory to DCI Control Server
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename }}"
    job_id: "{{ hostvars.localhost.job_id }}"
    mime: "text/plain"
  with_items: "{{ logs_matched.files }}"
  delegate_to: localhost

- name: Find deployment logs (binary)
  find:
    paths: "{{ logdir.path }}"
    recurse: yes
    patterns: "*.gz"
  register: logs_matched
  delegate_to: localhost

- name: Upload binary logs directory to DCI Control Server
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename }}"
    job_id: "{{ hostvars.localhost.job_id }}"
    mime: "application/octet-stream"
  with_items: "{{ logs_matched.files }}"
  delegate_to: localhost

- name: Clean up Temp dir
  file:
    path: "{{ logdir.path }}"
    state: absent
  delegate_to: localhost

...
