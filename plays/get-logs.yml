---

- name: "Setup job_logs directory"
  include_tasks: log-dir.yml

- name: "Find test text files"
  find:
    paths:
      - "{{ dci_cluster_configs_dir }}"
      - "{{ job_logs }}"
    recurse: true
    patterns: "*.txt,*.html"
  register: logs_matched

- name: "Upload test text files results to DCI Control Server"
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename }}"
    job_id: "{{ hostvars.localhost.job_id }}"
  with_items: "{{ logs_matched.files }}"

- name: "Find test Junit files"
  find:
    paths: "{{ job_logs }}"
    recurse: true
    patterns: "*junit,*.xml,*.log"
  register: junit_matched

- name: "Upload Junit files to DCI Control Server"
  environment:
    - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
    - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
    - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
  dci_file:
    path: "{{ item.path }}"
    name: "{{ item.path | basename | regex_replace('^(.*).xml$','\\1') }}"
    job_id: "{{ hostvars.localhost.job_id }}"
    mime: "application/junit"
  with_items: "{{ junit_matched.files }}"

- name: Get logs from OCP deployment
  environment:
    - DCI_MUST_GATHER_IMAGES: '{{ dci_must_gather_images | default(["registry.redhat.io/openshift4/ose-must-gather"]) | join(" ") }}'
  script: ./scripts/get-logs "{{ hostvars[groups['provisioner'][0]]['ansible_user'] }}@{{ groups['provisioner'][0] }}" "{{ job_logs }}" "{{ groups['masters'] }}"
  ignore_errors: true

- name: Find deployment logs (text)
  find:
    paths: "{{ job_logs }}"
    recurse: yes
    patterns: "*.log,*.txt,*.html"
  register: logs_matched

- name: "Upload text logs"
  vars:
    mime_type: "text/plain"
  include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Find deployment logs (compressed)
  find:
    paths: "{{ job_logs }}"
    recurse: yes
    patterns: "*.gz"
  register: logs_matched

- name: "Upload compressed logs"
  vars:
    mime_type: "application/x-gzip"
  include_tasks: upload-log.yml
  with_items: "{{ logs_matched.files }}"

- name: Clean up Temp dir
  file:
    path: "{{ job_logs }}"
    state: absent

...
