---
- block:
  - name: Login with non-admin user to create the nonadmin_kubeconfig file
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir }}/nonadmin_kubeconfig"
    shell: |
      # It can take a few moments for the user to be created...
      {{ dci_cluster_configs_dir }}/oc login --insecure-skip-tls-verify=true -u nonadmin -p nonadmin https://api.{{ cluster }}.{{ domain }}:6443
    retries: 10
    delay: 10
    register: result
    until: result.rc == 0

  - name: Get cluster role definition from github
    get_url:
      url: "https://raw.githubusercontent.com/e-minguez/ose-tests/master/rbac/osetests-{{ dci_openshift_agent_conformance }}.yaml"
      dest: "{{ dci_cluster_configs_dir | expanduser }}/osetests-{{ dci_openshift_agent_conformance }}.yaml"

  - name: Create cluster role with the minimum set of permissions needed for tests
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      {{ dci_cluster_configs_dir }}/oc auth reconcile -f {{ dci_cluster_configs_dir }}/osetests-{{ dci_openshift_agent_conformance }}.yaml
      # It can take a while for the user to be given the permissions

  - name: Wait for the clusterrole to appear in openshift
    environment:
      KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    shell: |
      # probe for up to 2 minutes (t*sleep time)
      for t in {1..60}; do
        {{ dci_cluster_configs_dir }}/oc get clusterrole/osetests-{{ dci_openshift_agent_conformance }} && exit 0
        echo "waiting..."
        sleep 2;
      done
      exit 1

  - name: openshift conformance minimal tests
    command: |
      podman run --pull=always --rm -e TESTS="{{ dci_openshift_agent_conformance }}" -v {{ dci_cluster_configs_dir }}:/tests:Z {{ dci_ose_tests_image }}

  - name: Find test logs
    find:
      paths: "{{ dci_cluster_configs_dir }}"
      recurse: yes
      patterns: "*.txt,*.html"
    register: logs_matched

  - name: Find test Junit files
    find:
      paths: "{{ dci_cluster_configs_dir }}"
      recurse: yes
      patterns: "junit_*.xml"
    register: junit_matched

  - name: Upload logs directory to DCI Control Server
    environment:
      - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
      - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
      - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
    dci_file:
      path: "{{ item.path }}"
      name: "{{ item.path | basename }}"
      job_id: "{{ hostvars.localhost.job_id }}"
    with_items: "{{ logs_matched.files }}"

  - name: Upload Junit files to DCI Control Server
    environment:
      - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
      - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
      - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
    dci_file:
      path: "{{ item.path }}"
      name: "{{ item.path | basename | regex_replace('^(.*).xml$','\\1') }}"
      job_id: "{{ hostvars.localhost.job_id }}"
      mime: "application/junit"
    with_items: "{{ junit_matched.files }}"
