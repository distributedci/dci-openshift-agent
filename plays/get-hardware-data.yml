---
- name: Get list of nodes from cluster
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: nodes_info
  no_log: true
  ignore_errors: true

- name: Filter ready nodes
  ansible.builtin.set_fact:
    ready_node_names: >-
      {{ ready_node_names | default([]) + [item.metadata.name] }}
  loop: "{{ nodes_info.resources | default([]) }}"
  when:
    - item.status.conditions is defined
    - item.status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0
  no_log: true
  ignore_errors: true

- name: Debug ready_node_names
  ansible.builtin.debug:
    var: ready_node_names
  when: ready_node_names is defined

- name: Get kernel information for all nodes
  ansible.builtin.shell:
    cmd: >
      {{ oc_tool_path }} debug node/{{ node_name }}
      -- chroot /host sh -c 'echo "{\"node\": \"{{ node_name }}\", \"version\": \"$(uname -r)\", \"params\": \"$(cat /proc/cmdline)\"}"'
  register: kernel_info
  ignore_errors: true
  loop: "{{ ready_node_names | default([]) }}"
  loop_control:
    loop_var: node_name
  when: ready_node_names is defined

- name: Save kernel information to files
  ansible.builtin.copy:
    content: >-
      {{ { 'kernel': {
        'node': (item.stdout | from_json).node,
        'version': (item.stdout | from_json).version,
        'params': (((item.stdout | from_json).params | default('') | cmdline_to_json | from_json))
      } } | to_json }}
    dest: "{{ job_logs.path }}/dci-extra.kernel.{{ item.node_name }}.json"
    mode: '0644'
  ignore_errors: true
  loop: "{{ kernel_info.results | default([]) }}"
  when:
    - item is defined
    - item.rc is defined
    - item.rc == 0
    - item.stdout is defined
    - (item.stdout | length) > 0

- name: Disconnected image
  when:
    - dci_disconnected | default(false) | bool
    - dci_local_registry | length > 0
  block:
    - name: Create temporary build directory for container
      ansible.builtin.tempfile:
        state: directory
        prefix: lshw-build.
      register: build_dir

    - name: Copy Containerfile to a temporary location
      ansible.builtin.copy:
        src: "files/Containerfile"
        dest: "{{ build_dir.path }}/Containerfile"
        mode: '0644'

    - name: Build lshw image (disconnected)
      containers.podman.podman_image:
        name: "{{ dci_local_registry }}/dci/lshw"
        path: "{{ build_dir.path }}"
        state: build
        tag: "latest"
        force: true
        push: true
        auth_file: "{{ dci_pullsecret_file }}"
        build:
          file: "{{ build_dir.path }}/Containerfile"
      register: build_img
      retries: 3
      delay: 30
      until: build_img is succeeded

    - name: Clean up build directory
      ansible.builtin.file:
        path: "{{ build_dir.path }}"
        state: absent

- name: Extract hw details
  vars:
    hw_img: >-
      {{
        (dci_disconnected | default(false) | bool) |
        ternary(dci_local_registry ~ '/dci/lshw:latest', 'registry.access.redhat.com/ubi10/ubi-minimal:latest')
      }}
  environment:
    preinstall: >-
      {{
        (dci_disconnected | default(false) | bool) |
        ternary('', 'microdnf install -y lshw &> /dev/null &&')
      }}
  ansible.builtin.shell:
    cmd: >
      {{ oc_tool_path }} debug node/{{ node_name }}
      --image={{ hw_img }}
      --
      bash -c "${preinstall} lshw -json -sanitize -numeric"
  register: hardware_info
  ignore_errors: true
  loop: "{{ ready_node_names | default([]) }}"
  loop_control:
    loop_var: node_name
  when:
    - ready_node_names is defined
  no_log: true

- name: Debug hardware_info
  ansible.builtin.debug:
    msg: "{{ hardware_info.results }}"
  when:
    - hardware_info is defined
    - hardware_info.results is defined

- name: Save hardware information to files
  ansible.builtin.copy:
    content: >-
      {{ { 'hardware': {
        'node': item.node_name,
        'data': (item.stdout | from_json | dot_to_underscore) if (item.stdout is defined and item.rc == 0) else (null | default({})),
        'error': item.stderr if (item.rc is defined and item.rc != 0) else (null | default(''))
      } } | to_json }}
    dest: "{{ job_logs.path }}/dci-extra.hardware.{{ item.node_name }}.json"
    mode: '0644'
  ignore_errors: true
  loop: "{{ hardware_info.results | default([]) }}"

...
