---
- name: "installer : set EXTERNAL_SUBNET"
  set_fact:
    extcidrnet: "{{ ip | ipaddr('network') }}/{{ ip | ipaddr('prefix') }}"
  vars:
    ip: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"
  when:
  - (extcidrnet is not defined or extcidrnet|length < 1)

- name: "installer : Get version and build from localhost vars"
  set_fact:
    version: "{{ hostvars.localhost.version }}"
    build: "{{ hostvars.localhost.build }}"

- name: "installer : Get pullsecret from localhost vars"
  set_fact:
    pullsecret: "{{ hostvars.localhost.pullsecret | to_json }}"
  no_log: true

- name: IPI Installer tasks
  block:
  - name: "installer: Check if .cache directory exists"
    stat:
      path: "{{ ansible_user_dir }}/.cache"
    register: cache_directory

  - name: "installer: Cleanup old images"
    block:
      - name: "installer: Retrieve images older than max_images_age"
        find:
          paths: "{{ ansible_user_dir }}/.cache/openshift-installer/image_cache"
          file_type: file
          age: "{{ max_images_age | default('26w') | string }}"
          recurse: no
          use_regex: yes
        register: old_images_to_delete

      - name: "installer: Delete images older than max_images_age"
        file:
          path: "{{ item.path }}"
          state: absent
        loop: "{{ old_images_to_delete.files }}"
    when:
      - cleanup_old_images | default(false) | bool
      - cache_directory.stat.exists

  - name: "installer : Populate clusterosimage"
    set_fact:
      clusterosimage: "{{ hostvars.localhost.clusterosimage }}"
    when: hostvars.localhost.clusterosimage is defined

  - name: "installer : Populate bootstraposimage"
    set_fact:
      bootstraposimage: "{{ hostvars.localhost.bootstraposimage }}"
    when: hostvars.localhost.bootstraposimage is defined

  - name: "installer : Node preparation"
    import_role:
      name: node-prep

  - name: "installer : Run IPI installer"
    import_role:
      name: installer
  when: install_type is undefined or install_type == 'ipi'

- name: SNO Installer tasks
  block:
  - name: "installer : SNO Node preparation"
    import_role:
      name: sno-node-prep

  - name: "installer : SNO Run IPI installer"
    import_role:
      name: sno-installer
  when:
    - install_type is defined 
    - install_type == 'sno'

- name: "installer : Setup openshift access in jumphost"
  include_role:
    name: oc-setup
    apply:
      delegate_to: localhost

- name: "installer : Apply node labels"
  include_role:
    name: label-nodes
  vars:
    label_loop: "{{ groups['masters'] + groups['workers'] }}"
    label_item: "{{ hostvars }}"
...
