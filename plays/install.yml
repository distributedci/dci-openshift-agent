---
- name: "installer : set EXTERNAL_SUBNET"
  set_fact:
    extcidrnet: "{{ ip | ipaddr('network') }}/{{ ip | ipaddr('prefix') }}"
  vars:
    ip: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"
  when:
    - (extcidrnet is not defined or extcidrnet|length < 1)

- name: "installer : Get version and build from localhost vars"
  set_fact:
    version: "{{ hostvars.localhost.version }}"
    build: "{{ hostvars.localhost.build }}"

- name: "installer : Get pullsecret from localhost vars"
  set_fact:
    pullsecret: "{{ hostvars.localhost.pullsecret | to_json }}"
  no_log: true

- name: IPI Installer tasks
  block:
  - name: "installer: Check if .cache directory exists"
    stat:
      path: "{{ ansible_user_dir }}/.cache"
    register: cache_directory

  - name: "installer: Cleanup old images"
    block:
      - name: "installer: Retrieve images older than max_images_age"
        find:
          paths: "{{ ansible_user_dir }}/.cache/openshift-installer/image_cache"
          file_type: file
          age: "{{ max_images_age | default('4w') | string }}"
          recurse: no
          use_regex: yes
        register: old_images_to_delete

      - name: "installer: Delete images older than max_images_age"
        file:
          path: "{{ item.path }}"
          state: absent
        loop: "{{ old_images_to_delete.files }}"
    when:
      - cleanup_old_images | default(false) | bool
      - cache_directory.stat.exists

  - name: "installer : Populate clusterosimage"
    set_fact:
      clusterosimage: "{{ hostvars.localhost.clusterosimage }}"
    when: hostvars.localhost.clusterosimage is defined

  - name: "installer : Populate bootstraposimage"
    set_fact:
      bootstraposimage: "{{ hostvars.localhost.bootstraposimage }}"
    when: hostvars.localhost.bootstraposimage is defined

  - name: "installer : Node preparation"
    import_role:
      name: node-prep

  - name: "installer : Run IPI installer"
    import_role:
      name: installer
  when: install_type is undefined or install_type == 'ipi'

- name: SNO Installer tasks
  block:
  - name: "installer : SNO Node preparation"
    import_role:
      name: sno-node-prep

  - name: "installer : SNO Run IPI installer"
    import_role:
      name: sno-installer
  when:
    - install_type is defined
    - install_type == 'sno'

- name: UPI Installer tasks
  block:
  - name: "installer : Run UPI installer"
    import_role:
      name: upi-installer
  when:
    - install_type is defined
    - install_type == 'upi'

- name: "installer : Patch clusterversion pointing to fast channel"
  vars:
    base_version: "{{ version.split('.')[0] }}.{{ version.split('.')[1] }}"
  community.kubernetes.k8s:
    state: present
    name: version
    definition:
      kind: ClusterVersion
      spec:
        channel: "fast-{{ base_version }}"
  retries: 6
  delay: 10

- name: "installer : Setup openshift access in jumphost"
  include_role:
    name: oc-setup
    apply:
      delegate_to: localhost
      environment:
        - KUBECONFIG: "{{ kubeconfig_path }}"

- name: "installer : Apply node labels"
  include_role:
    name: label-nodes
  vars:
    label_loop: "{{ groups['masters'] + groups['workers'] }}"
    label_item: "{{ hostvars }}"

- name: Upload the rhcos_kernel component if possible
  block:
    - name: Get nodes information
      community.kubernetes.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Node
      register: nodes_info

    - name: Create component with the rhcos kernel used
      vars:
        - kernel_version: "{{ nodes_info.resources[0].status.nodeInfo.kernelVersion }}"
      environment:
        - DCI_CLIENT_ID: "{{ hostvars.localhost.dci_client_id }}"
        - DCI_API_SECRET: "{{ hostvars.localhost.dci_api_secret }}"
        - DCI_CS_URL: "{{ hostvars.localhost.dci_cs_url }}"
      dci_component:
        name: "{{ kernel_version }}"
        canonical_project_name: "rhcos_kernel {{ kernel_version }}"
        team_id: "{{ hostvars.localhost.job_info['job']['team_id'] }}"
        topic_id: "{{ hostvars.localhost.job_info['job']['topic_id'] }}"
        type: kernel
        state: present
      register: kernel_component

    - name: Attach kernel component to the job
      dci_job_component:
        component_id: "{{ kernel_component.component.id }}"
        job_id: "{{ hostvars.localhost.job_id }}"
      register: job_component_result
      until: job_component_result is not failed
      retries: 5
      delay: 20
      when:
        - "'component' in kernel_component"
        - "'id' in kernel_component.component"
  ignore_errors: yes
  delegate_to: localhost

- name: Disable provisioning
  block:
    - name: Get provisioning
      community.kubernetes.k8s_info:
        api_version: metal3.io/v1alpha1
        kind: Provisioning
        name: provisioning-configuration
      register: provisioning_cr

    - name: Disable provisioning
      community.kubernetes.k8s:
        definition:
          apiVersion: metal3.io/v1alpha1
          kind: Provisioning
          metadata:
            name: provisioning-configuration
          spec:
            provisioningNetwork: Disabled
      when:
        - provisioning_cr.resources | length
  when:
    - dci_disable_provisioning | default(false) | bool
