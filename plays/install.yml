---
- name: "installer : set EXTERNAL_SUBNET"
  set_fact:
    extcidrnet: "{{ ip | ipaddr('network') }}/{{ ip | ipaddr('prefix') }}"
  vars:
    ip: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.netmask }}"
  when:
  - (extcidrnet is not defined or extcidrnet|length < 1)

- name: "installer : Get version and build from localhost vars"
  set_fact:
    version: "{{ hostvars.localhost.version }}"
    build: "{{ hostvars.localhost.build }}"

- name: "installer : Get pullsecret from localhost vars"
  set_fact:
    pullsecret: "{{ hostvars.localhost.pullsecret | to_json }}"
  no_log: true

- name: "installer: Retrieve gcow2 images older than 26 weeks"
  find:
    paths: "{{ ansible_user_dir }}/.cache/openshift-installer/image_cache"
    file_type: file
    age: 26w
    recurse: no
    use_regex: yes
    patterns: ['^[\S]+\.qcow2$']
  register: old_images_to_delete

- name: "installer: Delete gcow2 images older than 26 weeks"
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ old_images_to_delete.files }}"

- name: "installer: Retrieve gcow2 images older than 26 weeks-2"
  find:
    paths: "{{ ansible_user_dir }}/.cache/openshift-installer/image_cache"
    file_type: file
    age: 26w
    recurse: no
    use_regex: yes
    patterns: ['^[\S]+\.qcow2$']
  register: old_images_to_delete

- name: "installer: Ensure that old images were correctly deleted"
  fail:
    msg: "Some .gcow2 images were not deleted from .cache:
    {{ old_images_to_delete.files | map(attribute='path') | list }}"
  when: old_images_to_delete.matched > 0
  ignore_errors: True

- name: "installer : Populate clusterosimage"
  set_fact:
    clusterosimage: "{{ hostvars.localhost.clusterosimage }}"
  when: hostvars.localhost.clusterosimage is defined

- name: "installer : Populate bootstraposimage"
  set_fact:
    bootstraposimage: "{{ hostvars.localhost.bootstraposimage }}"
  when: hostvars.localhost.bootstraposimage is defined

- name: "installer : Node preparation"
  import_role:
    name: node-prep

- name: "installer : Run IPI installer"
  import_role:
    name: installer

- name: "installer : Setup openshift access in jumphost"
  include_role:
    name: oc-setup
    apply:
      delegate_to: localhost

- name: "installer : Apply node labels"
  include_role:
    name: label-nodes
  vars:
    label_loop: "{{ groups['masters'] + groups['workers'] }}"
    label_item: "{{ hostvars }}"
...
