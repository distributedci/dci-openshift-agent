---
- name: Set facts
  set_fact:
    pull_secret: "{{ hostvars['localhost']['pull_secret'] }}"

- name: Set registry_repository fact for install playbooks in disconnected mode
  set_fact:
    registry_repository: >
      {{ hostvars[groups['registry_host'][0]].local_repo |
      default('ocp-'+ hostvars['localhost']['version'].split('.')[:2] |
      join('.') +'/'+ hostvars['localhost']['version'], true) }}
  when: dci_disconnected | default(False) | bool

- name: Deploy cluster Agent Based Installer
  include_tasks: crucible/deploy_cluster_agent_based_installer.yml
  when: (use_agent_based_installer | default(true)) | bool

- name: Deploy cluster Assisted Installer
  include_tasks: crucible/deploy_cluster_assisted_installer.yml
  when: not ((use_agent_based_installer | default(true)) | bool)

- name: Set auths facts
  set_fact:
    secure: false
    ASSISTED_INSTALLER_BASE_URL:  # noqa var-naming[pattern]
      "{{ secure | ternary('https', 'http') }}://\
      {{ hostvars['assisted_installer']['host'] }}:\
      {{ hostvars['assisted_installer']['port'] }}\
      /api/assisted-install/v2"
    CLUSTER_ID: "{{ cluster_id | default(hostvars['bastion']['cluster_id']) }}" # noqa var-naming[pattern]
    URL_ASSISTED_INSTALLER_CLUSTER: "{{ ASSISTED_INSTALLER_BASE_URL }}/clusters/{{ CLUSTER_ID }}" # noqa var-naming[pattern]
    kube_filename: "kubeconfig"
    dest_dir: "{{ kubeconfig_dest_dir | default(ansible_env.HOME) }}"
    kubeconfig_path: "{{ dest_dir }}/{{ kube_filename }}"
    kubeadmin_vault_name: "kubeadmin-password"

- name: Get kubeconfig
  block:
    - name: Download kubeconfig (onprem)
      get_url:
        url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}/downloads/credentials?file_name=kubeconfig"
        dest: "{{ kubeconfig_path }}"
        mode: "0664"
      when: not (use_agent_based_installer | default(true)) | bool

    - name: Copy generated kubeconfig (ABI)
      copy:
        src: "{{ repo_root_path }}/generated/{{ cluster_name }}/auth/kubeconfig"
        dest: "{{ kubeconfig_path }}"
        mode: '0664'
      when: (use_agent_based_installer | default(true)) | bool

    - name: Store admin credentials (onprem)
      when: not (use_agent_based_installer | default(true)) | bool
      block:
        - name: Get credentials
          uri:
            url: "{{ URL_ASSISTED_INSTALLER_CLUSTER }}/credentials"
            return_content: true
          register: credentials

        - name: Save credentials to file
          copy:
            content: "{{ credentials.json | to_yaml }}"
            dest: "{{ dest_dir }}/{{ kubeadmin_vault_name }}"
            mode: "0600"

    - name: Store admin credentials (ABI)
      when: (use_agent_based_installer | default(true)) | bool
      block:
        - name: Read credentials
          slurp:
            src: "{{ repo_root_path }}/generated/{{ cluster_name }}/auth/kubeadmin-password"
          register: kubeadmin_password

        - name: Set credentials map
          set_fact:
            kubeadmin_credentials:
              username: kubeadmin
              password: "{{ kubeadmin_password.content | b64decode }}"
              console_url: "https://console-openshift-console.apps.{{ cluster_name }}.{{ base_dns_domain }}"

        - name: Save credentials to file
          copy:
            content: "{{ kubeadmin_credentials | to_yaml }}"
            dest: "{{ dest_dir }}/{{ kubeadmin_vault_name }}"
            mode: "0600"

    - name: Save credentials to vault
      shell:
        cmd: "ansible-vault encrypt --vault-password-file {{ kubeadmin_vault_password_file_path }} {{ dest_dir }}/{{ kubeadmin_vault_name }}"
      when: (kubeadmin_vault_password_file_path is defined) and (kubeadmin_vault_password_file_path is file)

    - name: Set kubeconfig_path for provisioner
      set_fact:
        kubeconfig_path: "{{ kubeconfig_path }}"
      delegate_to: "{{ groups['provisioner'] | first }}"
      delegate_facts: true

    - name: Check if ClusterVersion is Complete
      community.kubernetes.k8s_info:
        api: config.openshift.io/v1
        kind: ClusterVersion
        name: version
      register: cluster_version
      vars:
        status_query: "resources[*].status.history[?state=='Completed'].state"
        cluster_version_available: "{{ cluster_version | json_query(status_query) | flatten | unique }}"
      retries: 60
      delay: 10
      until: cluster_version_available == ['Completed']

- name: Assisted installer Cleanup
  hosts: localhost
  vars_files:
    - ../group_vars/all
  tasks:
    - name: Run Assisted installer cleanup
      vars:
        repo_root_path: "{{ dci_cluster_configs_dir }}"
      include_role:
        name: redhatci.ocp.populate_mirror_registry
        tasks_from: cleanup.yml
...
