#!/bin/bash
#
# Copyright (C) 2020-2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

ANSIBLE_PID=
JOB_ID_FILE=
OUTPUT_DIR=
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
start=0
params="$(getopt -o hsdp:c:v -l help,start,dev,prefix:,config:,verbose --name "$(basename -- "$0")" -- "$@")"
DCI_VAULT_CLIENT=${DCI_VAULT_CLIENT:=/usr/bin/dci-vault-client}
# Capture CONFIG_DIR from the env as it should take precedence from
# test-runner for example
INIT_CONFIG_DIR="${CONFIG_DIR:-}"

function usage ()
{
    name=$(basename -- "$0")
    cat << EOF
Usage: $name [-h] [-s] [-d] [-v] [-p PREFIX] [-c CONFIG] -- [ansible-playbook args]

arguments:
    -h, --help        Display this help message.
    -s, --start       Start the dci-openshift-agent.
    -p PREFIX, --prefix PREFIX
                      Specify prefix for Inventory and settings (use to specify different
                      clusters for example)
    -d, --dev         Use script directory to find dcirc.sh and dci-openshift-agent.yml (for dev usage)
    -c CONFIG, --config CONFIG
                      Path to config file. default is /etc/dci-openshift-agent/settings.yml
    -v, --verbose     Display commands
EOF
    exit $1
}

function finish ()
{
    echo "finish $*"

    if [ -n "${ANSIBLE_PID}" ]; then
        PGID=$(ps -o pgid= ${ANSIBLE_PID} | grep -o [0-9]*)

        if [ -n "${ANSIBLE_PID}" ]; then
            kill -KILL -$PGID
        else
            echo "Unable to find process group for ${ANSIBLE_PID}"
            kill ${ANSIBLE_PID}
        fi

        wait ${ANSIBLE_PID}
        RET=$?
    fi

    if [ -n "${JOB_ID_FILE}" -a -n "${OUTPUT_DIR}" ]; then
        JOB_ID=$(cat ${JOB_ID_FILE})
        if [ -n "$JOB_ID" ]; then
            for junit_file in $(ls ${OUTPUT_DIR}/*.xml); do
                junit_filename=$(basename ${junit_file} .xml)
                dcictl job-upload-file --name ${junit_filename} --path ${junit_file} --mime application/junit ${JOB_ID}
            done
            if [ -r ${OUTPUT_DIR}/ansible.log ]; then
                dcictl job-upload-file --name ansible.log --path ${OUTPUT_DIR}/ansible.log --mime text/plain ${JOB_ID}
            fi
            # Keep job id in /var/tmp/$CLUSTER.dci.job_id to survive
            # execution and be in a known location for test-runner to find
            # it. Keep in sync with test-runner.
            CLUSTER=$(sed -n -e 's@.*changed:.*/clusterconfigs-\([^\"/]*\)/kubeconfig.*@\1@p' "$ANSIBLE_LOG_PATH" | head -1)
            mv -f "$JOB_ID_FILE" "/var/tmp/$CLUSTER.dci.job_id"
        fi

        echo "removing output dir: ${OUTPUT_DIR}"
        rm -rf "${OUTPUT_DIR}"
    fi
    exit $RET
}

trap finish 0

function interrupt() {
    if [ -r "${JOB_ID_FILE}" ]; then
        JOB_ID=$(cat ${JOB_ID_FILE})
        dcictl jobstate-create --job-id ${JOB_ID} --comment "doa was interrupted" --status killed
        exit 1
    fi
}

trap interrupt INT TERM

if [ -r /etc/dci-openshift-agent/config ]; then
    . /etc/dci-openshift-agent/config
fi

# If nothing from the env, take the value from config
INIT_CONFIG_DIR="${INIT_CONFIG_DIR:-$CONFIG_DIR}"

config_dir=${INIT_CONFIG_DIR:-/etc/dci-openshift-agent}
config=$config_dir/settings.yml

eval set -- "$params"
unset params

while true
do
    case $1 in
        -h|--help)
            usage 0
        ;;
        -s|--start)
            start=1
            shift
        ;;
        -d|--dev)
            dev=1
            shift
        ;;
        -c|--config)
            shift
            config=$1
            shift
        ;;
        -p|--prefix)
            shift
            prefix=$1
            shift
        ;;
        -v|--verbose)
            set -x
            shift
            ;;
        --)
            shift
            break
        ;;
        *)
            usage 1
        ;;
    esac
done

if [ -n "$prefix" ]; then
    settings="$config_dir/${prefix}-settings.yml"
    if [ -r "$settings" ]; then
        settings_args="-e @$settings"
    else
        echo "Missing $settings, will only use $config."
        settings_args="-e @$config"
    fi

    hosts="$config_dir/${prefix}-hosts"
    if [ -r "$hosts" ]; then
        hosts_args="-i $hosts"
    elif [ -r "${hosts}.yml" ]; then
        hosts_args="-i $hosts.yml"
    elif [ -r "${config_dir}/hosts" ]; then
        hosts_args="-i ${config_dir}/hosts"
    elif [ -r "${config_dir}/hosts.yml" ]; then
        hosts_args="-i ${config_dir}/hosts.yml"
    else
        echo "Missing $hosts(.yml) or ${config_dir}/hosts(.yml)"
    fi
else
    if [ -r "${config_dir}/hosts" ]; then
        hosts_args="-i ${config_dir}/hosts"
    elif [ -r "${config_dir}/hosts.yml" ]; then
        hosts_args="-i ${config_dir}/hosts.yml"
    else
        echo "Missing ${config_dir}/hosts(.yml)"
    fi
    settings_args="-e @$config"
fi

if [ "$start" -eq 1 ]; then
    if [ -z "$dev" ]; then
        [ -e /etc/dci-openshift-agent/dcirc.sh ] && . /etc/dci-openshift-agent/dcirc.sh
        DCI_OPENSHIFT_AGENT_DIR=${DCI_OPENSHIFT_AGENT_DIR:-/usr/share/dci-openshift-agent}
        export ANSIBLE_CONFIG=${ANSIBLE_CONFIG:-$DCI_OPENSHIFT_AGENT_DIR/ansible.cfg}
    else
        [ -e $DIR/dcirc.sh ] && . $DIR/dcirc.sh
        export ANSIBLE_CONFIG=$DIR/dev-ansible.cfg
        DCI_OPENSHIFT_AGENT_DIR=${DCI_OPENSHIFT_AGENT_DIR:-$DIR}
    fi

    OUTPUT_DIR="$(mktemp -d /tmp/dci-openshift-agent.XXXXX)"
    cd "${OUTPUT_DIR}" || exit 1
    JOB_ID_FILE="$OUTPUT_DIR/dci-openshift-agent.job"
    export ANSIBLE_LOG_PATH=${OUTPUT_DIR}/ansible.log
    export JUNIT_OUTPUT_DIR=${OUTPUT_DIR}
    export JUNIT_TEST_CASE_PREFIX=test_
    export JUNIT_TASK_CLASS=yes
    cat ${ANSIBLE_CONFIG}
    setsid ansible-playbook --vault-id "$DCI_VAULT_CLIENT" -v ${DCI_OPENSHIFT_AGENT_DIR}/dci-openshift-agent.yml -e JOB_ID_FILE="${JOB_ID_FILE}" ${settings_args} ${hosts_args} "$@" &
    ANSIBLE_PID=$!

    wait ${ANSIBLE_PID}
    RET=$?
    ANSIBLE_PID=
    exit $RET
else
    echo "Dry-Run: pass -s or --start to actually execute"
    if [ -z "$dev" ]; then
        echo ". /etc/dci-openshift-agent/dcirc.sh"
        echo "cd /usr/share/dci-openshift-agent"
    else
        echo ". $DIR/dcirc.sh"
        echo "ANSIBLE_CONFIG=$DIR/dev-ansible.cfg"
    fi
    if [ -z "${OUTPUT_DIR}" ]; then
        echo "setsid ansible-playbook --vault-id $DCI_VAULT_CLIENT dci-openshift-agent.yml -e @$config ${prefix_args} ${hosts_args} $@ &"
    else
        JOB_ID_FILE="$(mktemp /tmp/job.XXXXX)"
        echo "setsid ansible-playbook --vault-id $DCI_VAULT_CLIENT dci-openshift-agent.yml -e JOB_ID_FILE=${JOB_ID_FILE} -e @$config ${prefix_args} ${hosts_args} $@ &"
    fi
fi
