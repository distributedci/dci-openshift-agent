#!/bin/bash
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

PID2=
RET=1

finish() {
    echo "finish $*"

    if [ -n "$PID" ]; then
        PGID=$(ps -o pgid= $PID | grep -o [0-9]*)

        if [ -n "$PGID" ]; then
            kill -KILL -$PGID
        else
            echo "Unable to find process group for $PID"
            kill $PID
        fi

        wait $PID
        RET=$?
    fi

    if [ -r output ]; then
        # Keep in sync with UI URL task in dci-openshift-agent.yml
        LOCATION=$(sed -n -e 's@^.*Follow the log at: \(.*/jobs/.*/jobStates\).*@\1@p' < output|tail -1)

        # It could have failed before the information step
        if [ -z "$LOCATION" ]; then
            [ $RET -ne 0 ] || RET=1
            LOCATION="pre-run"
        fi
    else
        # Script failed before launching the agent
        [ $RET -ne 0 ] || RET=1
        LOCATION="preparation"
    fi

    if [ $RET = 0 ]; then
        VOTE="+1"
    else
        VOTE="-1"
    fi

    if [ $RET = 0 ]; then
        VOTE_RESULT="SUCCESS"
    elif [ $RET -gt 128 ]; then
        VOTE_RESULT="KILLED"
    else
        VOTE_RESULT="FAILURE"
    fi

    if [ -n "$VIRT" ]; then
        HWTYPE=libvirt
    else
        HWTYPE=baremetal
    fi

    VOTE_RESULT="- dci-check-change $LOCATION : $VOTE_RESULT tested on $HWTYPE"

    $BASEDIR/send-feedback $DIR "$VOTE_RESULT" --tag autogenerated:dci-check-change --verified $VOTE

    if [ -n "$PID2" ]; then
        kill $PID2
    fi

    cd

    if [ -n "$GERRIT_SSH_ID" ]; then
        ssh-agent -k
    fi

    # Workaround to delete any temporary directory created without u+w
    find "${DIR}" -type d -not -perm -u=w -exec chmod u+w {} \;
    rm -rf $DIR

    exit $RET
}

do_wait() {
    PID=$!

    wait $PID

    RET=$?
    unset PID

    if [ $RET != 0 ]; then
        exit $RET
    fi
}

BASEDIR=$(cd $(dirname $0); pwd)

if [ $# -lt 1 ]; then
    echo "Usage: $0 (--virt) <change directory> [<dci-openshift-agent-ctl options>]" 1>&2
    exit 1
fi

VIRT=
DCI_NAME=

if [ -r /etc/dci-openshift-agent/config ]; then
    . /etc/dci-openshift-agent/config
fi

# needed by send-feddback
export GERRIT_USER

if [ $1 = --virt ]; then
    VIRT=1
    DCI_NAME=${DCI_NAME:-"libvirt"}
    shift
fi

DIR=$1
shift

if [ -n "$DCI_NAME" ]; then
    OPTS="-e dci_name=$DCI_NAME"
else
    OPTS=
fi

if [ -n "$DCI_QUEUE" ] && type -p dci-queue >& /dev/null; then
    OPTS="$OPTS -e dci_configuration=$DCI_QUEUE"
fi

if [ ! -d $DIR ]; then
    echo "No such directory $DIR" 1>&2
    exit 1
fi

if [ ! -x $BASEDIR/extract-dependencies ]; then
    BASEDIR=/usr/share/dci-openshift-agent
fi

if [ -n "$GERRIT_SSH_ID" ]; then
    eval $(ssh-agent)
    ssh-add ~/.ssh/"$GERRIT_SSH_ID"
fi

trap finish 0

set -x

CHANGEID=$(basename $DIR)
CHANGEID=${CHANGEID%%-*}

# extract github or gerrit from the path
KIND=$(basename $(dirname $DIR))
cd $DIR

if [ $KIND = gerrit ]; then
    PROJECT=$(jq -r .project $CHANGEID.json)
    CURREV=$(jq -r .current_revision $CHANGEID.json)
    PATCHSET=$(jq -r ".revisions[\"$CURREV\"]._number" $CHANGEID.json)
    TAG="gerrit:$PROJECT-$CHANGEID"
    URL="https://softwarefactory-project.io/r/#/c/$CHANGEID/"
else
    PR=${CHANGEID##*-pr}
    # Strip generated name
    PR=${PR%-*}
    TAG="github:$CHANGEID"
    REPO=$(jq -r .head.repo.full_name github.json)
    URL="https://github.com/$REPO/pull/$PR"
fi

# compute the command line arguments according to the extracted
# directories

if [ -d dci-openshift-agent ]; then
    ln -s $PWD/dci-openshift-agent/* .
    rm -f ansible.cfg dci-openshift-agent.yml
    cp dci-openshift-agent/ansible.cfg .
    sed -e "s@include_tasks:\s*plays/@include_tasks: $PWD/dci-openshift-agent/plays/@" < $PWD/dci-openshift-agent/dci-openshift-agent.yml > $PWD/dci-openshift-agent.yml
    # force to use the roles from the change
    sed -i -e "s@\(^\s*roles_path\s*=\s*\)@\1$PWD/dci-openshift-agent/roles/:@" ansible.cfg
    CMD=$PWD/dci-openshift-agent/dci-openshift-agent-ctl
    VIRTDIR=$PWD/dci-openshift-agent/samples/ocp_on_libvirt
else
    ln -s /usr/share/dci-openshift-agent/* .
    rm -f ansible.cfg
    cp /usr/share/dci-openshift-agent/ansible.cfg /usr/share/dci-openshift-agent/dci-openshift-agent.yml .
    CMD=dci-openshift-agent-ctl
    VIRTDIR=/var/lib/dci-openshift-agent/samples/ocp_on_libvirt
fi

if [ -d baremetal-deploy ]; then
    sed -i -e "s@/var/lib/dci-openshift-agent/baremetal_deploy_repo/@$PWD/baremetal-deploy/@g" ansible.cfg
fi

for conf in $(ls -d *config 2> /dev/null); do
    sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" ansible.cfg
    if [ -r $conf/settings.yml ]; then
        sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" $conf/settings.yml
        export CONFIG_DIR=$PWD/$conf
    fi
    if [ -r $conf/hosts ]; then
        sed -i -e "s@/etc/dci-openshift-agent/hosts@$PWD/$conf/hosts@g" ansible.cfg
    fi
done

if [ -d dci-ansible ]; then
    sed -i -e "s@/usr/share/dci/\(modules\|module_utils\|action_plugins\)@$PWD/dci-ansible/\1@g" -e "s@/usr/share/dci/callback/@$PWD/dci-ansible/callback/@" ansible.cfg
fi

for d in $(ls -d ansible-role-dci-* 2> /dev/null); do
    if [ -r $d/tasks/main.yml ]; then
        sed -i -e "s@\(roles_path\s*=\s*\)@\1${PWD}:@" ansible.cfg
    fi
done

# create a python virtualenv if there is any project with a
# requirements.txt into the changes
REQS=$(ls */requirements.txt 2> /dev/null)

if [ -n "$REQS" ]; then
    rm -rf .venv
    virtualenv .venv
    . .venv/bin/activate

    # substitute dependencies from the changes into requirements.txt
    for req in $REQS; do
        reqdir=$(dirname $req)
        if [ -r $reqdir/setup.py ]; then
            module=$(sed -n -e 's/\s*name="\(.*\)",/\1/p' $reqdir/setup.py)
            if [ -n "$module" ]; then
                sed -i -e "s@$module.*@-e $PWD/$reqdir/@" */requirements.txt
            fi
        fi
    done

    # install python dependencies into the virtualenv
    for req in $REQS; do
        pip install -r $req
        cd $(dirname $req)
        python setup.py develop || :
        cd -
    done
fi

FEEDBACK="Starting dci-check-change job."

$BASEDIR/send-feedback $DIR "$FEEDBACK" --tag autogenerated:dci-check-change --verified 0

if [ -n "$VIRT" ]; then
    cd $VIRTDIR
    setsid ansible-playbook -v libvirt_destroy.yml &
    do_wait
    setsid ansible-playbook -v libvirt_up.yml &
    do_wait
    sudo cp hosts /etc/dci-openshift-agent/
    cd $DIR
fi

# needed for dci-openshift-agent-ctl
export DCI_OPENSHIFT_AGENT_DIR=$PWD
export ANSIBLE_CONFIG=$PWD/ansible.cfg

setsid $CMD -vvv -s "$@" -- $OPTS -e "{\"dci_url\": \"$URL\", \"dci_tags\": [\"debug\", \"$TAG\"]}" >& output &
PID=$!

# make everything read-only to mimic what is delivered as rpm or in
# the system
chmod -R a-w $DIR || :

tail -f output&
PID2=$!

wait $PID
RET=$?
PID=

exit $RET

# test-runner ends here
