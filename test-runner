#!/bin/bash
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

cleanup() {
    rm -rf $DIR
}

BASEDIR=$(cd $(dirname $0); pwd)

if [ $# -lt 1 ]; then
    echo "Usage: $0 <change directory> [<dci-openshift-agent-ctl options>]" 1>&2
    exit 1
fi

DIR=$1
shift

if [ ! -d $DIR ]; then
    echo "No such directory $DIR" 1>&2
    exit 1
fi

if [ ! -x $BASEDIR/extract-dependencies ]; then
    BASEDIR=/usr/share/dci-openshift-agent
fi

# trap cleanup 0

set -x

CHANGEID=$(basename $DIR)

# extract github or gerrit from the path
KIND=$(basename $(dirname $DIR))
cd $DIR

if [ $KIND = gerrit ]; then
    PROJECT=$(jq -r .project $CHANGEID.json)
    CURREV=$(jq -r .current_revision $CHANGEID.json)
    PATCHSET=$(jq -r ".revisions[\"$CURREV\"]._number" $CHANGEID.json)
    TAGS="ansible_extravars=dci_tags:debug,gerrit:$PROJECT-$CHANGEID"
    COMMENT="dci_comment=https://softwarefactory-project.io/r/#/c/$CHANGEID/"
    URL="https://softwarefactory-project.io/r/#/c/$CHANGEID/"
else
    PR=${CHANGEID##*-pr}
    # Strip generated name
    PR=${PR%-*}
    TAGS="ansible_extravars=dci_tags:debug,github:$CHANGEID"
    REPO=$(jq -r .head.repo.full_name github.json)
    COMMENT="dci_comment=https://github.com/$REPO/pull/$PR"
    URL=$(jq -r .html_url github.json)
fi

# compute the command line arguments according to the extracted
# directories

if [ -d dci-openshift-agent ]; then
    cp dci-openshift-agent/ansible.cfg .
    sed -e "s@include_tasks:\s*plays/@include_tasks: $PWD/dci-openshift-agent/plays/@" < $PWD/dci-openshift-agent/dci-openshift-agent.yml > $PWD/dci-openshift-agent.yml
    # force to use the roles from the change
    sed -i -e "s@\(^\s*roles_path\s*=\s*\)@\1$PWD/dci-openshift-agent/roles/:@" ansible.cfg
    CMD=$PWD/dci-openshift-agent/dci-openshift-agent-ctl
    ln -s $PWD/dci-openshift-agent/group_vars .
else
    cp /usr/share/dci-openshift-agent/ansible.cfg /usr/share/dci-openshift-agent/dci-openshift-agent.yml .
    CMD=dci-openshift-agent-ctl
    ln -s /usr/share/dci-openshift-agent/group_vars .
fi

export DCI_OPENSHIFT_AGENT_DIR=$PWD

if [ -d baremetal-deploy ]; then
    sed -i -e "s@/var/lib/dci-openshift-agent/baremetal_deploy_repo/@$PWD/baremetal-deploy/@g" ansible.cfg
fi

for conf in $(ls -d *config 2> /dev/null); do
    sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" ansible.cfg
    if [ -r $conf/settings.yml ]; then
        sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" $conf/settings.yml
        export CONFIG_DIR=$PWD/$conf
    fi
    if [ -r $conf/hosts ]; then
        sed -i -e "s@/etc/dci-openshift-agent/hosts@$PWD/$conf/hosts@g" ansible.cfg
    fi
done

if [ -d dci-ansible ]; then
    sed -i -e "s@/usr/share/dci/\(modules\|module_utils\|action_plugins\)@$PWD/dci-ansible/\1@g" ansible.cfg
    export DCI_ANSIBLE_DIR=$PWD/dci-ansible
fi

for d in $(ls -d ansible-role-dci-* 2> /dev/null); do
    if [ -r $d/tasks/main.yml ]; then
        sed -i -e "s@\(roles_path\s*=\s*\)@\1${PWD}:@" ansible.cfg
    fi
done

$CMD -v -s "$@" -- -e "$COMMENT" -e dci_tags=debug 2>&1 | tee output

RET=${PIPESTATUS[0]}
JOBIDS=$(sed -n -e 's/^.*Scheduled DCI job //p' < output)

if [ $RET = 0 ]; then
    RESULT="dci-check-change $URL $@ SUCCESS"
else
    RESULT="dci-check-change $URL $@ FAILURE"
fi

for ID in $JOBIDS; do
    RESULT="$RESULT https://www.distributed-ci.io/jobs/$ID/jobStates"
done

$BASEDIR/send-feedback $DIR "$RESULT"

cd

exit $RET

# test-runner ends here
