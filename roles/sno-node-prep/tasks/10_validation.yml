---
- name: Check ansible version
  fail:
    msg: Use Ansible version 2.9 or greater to run this playbook
  when: ansible_version.full is version('2.9.0', '<')
  delegate_to: localhost
  tags:
  - always
  - validation
  - fully_disconnected

- name: Ensure Python libraries are installed
  python_requirements_info:
    dependencies:
    - netaddr
  register: _py_facts
  delegate_to: localhost
  tags:
  - always
  - validation

- name: Fail if version is undefined, empty, or not valid.
  assert:
    fail_msg: "The version is undefined or not valid. Use a value such as 'latest-4.8' or an explicit version i.e.: '4.8.2'."
    that:
      - ver is defined
      - ver is version("4.8", ">=")
  vars:
    ver: "{{ version.split('latest-')[1]|default(version) }}"
  tags:
  - always
  - validation

- name: Fail if build is undefined, empty or not valid.
  assert:
    fail_msg: "The build is undefined, empty or not valid. Use a value such as 'dev' or 'ga'."
    that: 
      - build is defined
      - (build == "dev") or (build == "ga")
  tags:
  - always
  - validation

- name: Fail if a required install-config variable is undefined or empty.
  assert:
    fail_msg: "A variable regarding install-config.yml is undefined or empty."
    that:
      - domain is defined
      - domain|length != 0
      - cluster is defined
      - cluster|length != 0
      - extcidrnet is defined
      - extcidrnet|length != 0
      - pullsecret is defined
      - pullsecret|length != 0
  tags:
  - always
  - validation

- name: Set release_url for development envs
  set_fact:
    release_url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview"
  when: build == 'dev'
  tags:
  - always
  - validation

- name: Set release_url for GA envs
  set_fact:
    release_url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp"
  when: build == 'ga'
  tags:
  - always
  - validation

- name: Confirm whether or not internet connectivity on provisioner host
  uri:
    url: https://www.redhat.com
    status_code: [-1,200]
    timeout: 1
  register: check_url
  tags:
  - validation

- name: Fail when provision host no online access (can't assume access)
  fail:
    msg: |
         A host with online access is required. Support for disconnected install is not added yet.
  when:
    - check_url.status == -1
  tags:
  - validation

- name: Fail if dualstack_baremetal and ipv4_baremetal are both true
  fail:
    msg: Only one of ipv4_baremetal and dualstack_baremetal variables can be true
  when: ipv4_baremetal and dualstack_baremetal
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv4)
  fail:
    msg: extcidrnet should be a valid IPv4 CIDR
  when: not ipv6_enabled|bool and not extcidrnet|ipv4
  tags:
  - always
  - validation

- name: Check for valid extcidrnet (IPv6)
  fail:
    msg: extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and not (ipv4_baremetal or dualstack_baremetal) and not extcidrnet6|ipv6
  tags:
  - always
  - validation

- name: Check for valid extcidrnet and extcidrnet6 (Dual-Stack)
  fail:
    msg: extcidrnet should be a valid IPv4 address and extcidrnet6 should be a valid IPv6 address
  when: ipv6_enabled|bool and dualstack_baremetal|bool and not (extcidrnet|ipv4 and extcidrnet6|ipv6)
  tags:
  - always
  - validation

- name:  Gather the rpm package facts
  package_facts:
    manager: auto
  tags:
  - always
  - validation
  when: (ansible_facts.packages is undefined) or (ansible_facts.packages | length == 0)

- name: Set Fact for firewall variable
  set_fact:
    firewall: "iptables"
  when: "'iptables-services' in ansible_facts.packages"
  tags:
  - always
  - validation

- name: Get BMC firmware version and set fact
  block:
  - name: "Get the chassis information of baremetal node"
    redfish_info:
      category: Chassis
      command: GetChassisInventory
      baseuri: "{{ hostvars[item]['ipmi_address']|ipwrap }}"
      username: "{{ hostvars[item]['ipmi_user'] }}"
      password: "{{ hostvars[item]['ipmi_password'] }}"
    register: chassis_result
    until: chassis_result is succeeded
    retries: 3
    delay: 10
    loop: "{{ groups.masters }}"
  
  - name: "Get the firmware information of the baremetal node"
    redfish_info:
      category: Update
      command: GetFirmwareInventory
      baseuri: "{{ hostvars[item]['ipmi_address']|ipwrap }}"
      username: "{{ hostvars[item]['ipmi_user'] }}"
      password: "{{ hostvars[item]['ipmi_password'] }}"
    register: firmware_result
    until: firmware_result is succeeded
    retries: 3
    delay: 10
    loop: "{{ groups.masters }}"

  rescue:
  - debug:
      msg: "Verify BMC credentials or if Redfish is enabled"
  when:
    - sno_install_type is defined
    - sno_install_type == 'baremetal'
    - hostvars.localhost.groups['masters']|length == 1
  tags:
  - always
  - validation
  - baremetal

- name: "Validate and add fact for Dell iDRAC firmware"
  block:
  - name: "Set BMC firmware fact with iDRAC firmware higher or equal than 4.20.20.20"
    set_fact:
      bmc_firmware: "{{ firmware_result.results[0].redfish_facts.firmware.entries | json_query(query) }}"
    when:
      - not chassis_result.results[0].failed|bool
      - not firmware_result.results[0].failed|bool
      - "'Dell' in chassis_result.results[0].redfish_facts.chassis.entries[0].Manufacturer"
      - firmware_result.results[0].redfish_facts.firmware.entries | json_query(query) | max >= "4.20.20.20"
    vars:
      query: "[?Name=='Integrated Dell Remote Access Controller'].Version"
    register: dell_host_redfish_result
    retries: 6 # 1 minute (10 * 6)
    delay: 10 # Every 10 seconds
  rescue:
  - name: "Attempt to set Dell iDRAC Firmware failed"
    debug:
      msg: 'Dell iDRAC firmware missing or older than 4.20.20.20, installer would not mount virtual ISO'
  when:
    - sno_install_type is defined
    - sno_install_type == 'baremetal'
    - chassis_result is succeeded
    - firmware_result is succeeded
  tags:
  - always
  - validation
  - baremetal

- name: "Validate and add fact for HPE iLO firmware"
  block:
  - name: "Set BMC firmware fact with iLO firmware higher or equal than 2.14"
    set_fact:
      bmc_firmware: "{{ firmware_result.results[0].redfish_facts.firmware.entries | json_query(query) }}"
    when:
      - not chassis_result.results[0].failed|bool
      - not firmware_result.results[0].failed|bool
      - "'HPE' in chassis_result.results[0].redfish_facts.chassis.entries[0].Manufacturer"
      - firmware_result.results[0].redfish_facts.firmware.entries | json_query(query) | max >= "2.14"
    vars:
      query: "[?Name=='iLO 5'].Version"
    register: hp_host_redfish_result
    retries: 6 # 1 minute (10 * 6)
    delay: 10 # Every 10 seconds
  rescue:
  - name: "Attempt to set HP iLO Firmware failed"
    debug:
      msg: 'HPE iLO firmware missing or older than 2.14, installer would not mount virtual ISO'
  when:
    - sno_install_type is defined
    - sno_install_type == 'baremetal'
    - hostvars.localhost.groups['masters']|length == 1
    - chassis_result is succeeded
    - firmware_result is succeeded
  tags:
  - always
  - validation
  - baremetal

- name: "Print BMC firmware version"
  debug:
    msg: "{{ bmc_firmware }}"
  when:
    - bmc_firmware is defined
    - sno_install_type is defined
    - sno_install_type == 'baremetal'
  tags:
  - always
  - validation
  - baremetal
...
