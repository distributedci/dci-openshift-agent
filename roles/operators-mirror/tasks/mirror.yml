- name: Install skopeo
  package:
    name:
      - skopeo
    state: present
  become: true

# This should come from inventory or settings
- name: Containers to mirror
  set_fact:
     mirror_list:
        - container-native-virtualization
        - sriov
        - performance
        - ptp

- name: Base version
  set_fact:
     base_version: "{{ version.split('.')[0] }}.{{ version.split('.')[1] }}"

- name: Build catalog
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell:
    cmd: >
      set -x;
      {{ dci_cluster_configs_dir }}/oc adm catalog build
      --appregistry-org redhat-operators
      --from={{ from_registry }}:v{{ base_version }}
      --filter-by-os="linux/amd64"
      --to={{ local_registry_host }}:{{ local_registry_port }}{{ local_registry_path }}:v{{ base_version }}
      -a {{ dci_pullsecret_file }} --insecure

- name: Mirror catalog manifests
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell:
    cmd: >
      set -x;
      cd {{ dci_cluster_configs_dir }} &&
      {{ dci_cluster_configs_dir }}/oc adm catalog mirror
      {{ local_registry_host }}:{{ local_registry_port }}{{ local_registry_path }}:v{{ base_version }}
      {{ local_registry_host }}:{{ local_registry_port }} -a {{ dci_pullsecret_file }} --insecure
      --filter-by-os="linux/amd64" --manifests-only

- name: Copy Containers from mirror_list
  shell:
    cmd: >
      skopeo copy --authfile {{ dci_pullsecret_file }}
      --dest-tls-verify=false --all docker://{{ item.split('=')[0] }}
      docker://{{ item.split('=')[1] }}
  loop: "{{ lookup('file', dci_cluster_configs_dir + '/redhat-operators-manifests/mapping.txt').splitlines() }}"
  when:
    - "{{ item | regex_findall(mirror_list | join('|')) }}"

- name: Apply image content source policy
  k8s:
    kubeconfig: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
    src: "{{ dci_cluster_configs_dir }}/redhat-operators-manifests/imageContentSourcePolicy.yaml"

- name: Create catalog source
  k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: CatalogSource
      metadata:
        name: "{{ catalog_source_name }}"
        namespace: "{{ catalog_source_namespace }}"
      spec:
        sourceType: grpc
        image: "{{ local_registry_host }}:{{ local_registry_port }}{{ local_registry_path }}:v{{ base_version }}"
        displayName: "{{ catalog_source_displayname }}"
        publisher: grpc

    # Convert this to k8s_info
- name: wait for master MCP to start updating
  environment:
    KUBECONFIG:  "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell: |
    {{ dci_cluster_configs_dir }}/oc wait --for=condition=Updating --timeout=300s mcp master
  changed_when: false

    # Convert this to k8s_info
- name: wait for worker MCP to start updating
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell: |
    {{ dci_cluster_configs_dir }}/oc wait --for=condition=Updating --timeout=300s mcp worker
  changed_when: false

    # Convert this to k8s_info
- name: Check if master nodes are ready with the new image content source policy. Waiting till they are ready...
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell: |
    {{ dci_cluster_configs_dir }}/oc wait --for=condition=updated machineconfigpool.machineconfiguration.openshift.io/master --timeout=45m
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0

    # Convert this to k8s_info
- name: Wait for worker nodes to be ready with the new image content source policy. Please be patient, this can take a while..
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell: |
    {{ dci_cluster_configs_dir }}/oc wait --for=condition=updated machineconfigpool.machineconfiguration.openshift.io/worker --timeout=45m
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0

    # Convert this to k8s
- name: Configure registry
  environment:
    KUBECONFIG: "{{ dci_cluster_configs_dir | expanduser }}/kubeconfig"
  shell: |
    {{ dci_cluster_configs_dir }}/oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{} } } }'
    {{ dci_cluster_configs_dir }}/oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"} }'
