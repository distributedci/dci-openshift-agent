---
- name: "Create config dir"
  file:
    path: "{{ dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: extract

- name: "Check if commands were extracted"
  stat:
    path: "{{ cache_dir }}/{{ version }}/{{ installer_binary }}"
    get_checksum: false
  loop: "{{ installer_extract_cmds }}"
  loop_control:
    loop_var: installer_binary
  register: extracted_cmds  # we register this loop object to re-use
  delegate_to: "{{ cache_provisioner | ternary(groups['provisioner'][0], groups['registry_host'][0]) }}"

- name: "Copy PullSecret and extract installer in connected mode"
  block:
    - name: "Copy PullSecret into {{ pullsecret_file }}"
      copy:
        content: "{{ pullsecret }}"
        dest: "{{ pullsecret_file }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        force: true

    - name: "Extract installer commands"
      command: >
        {{ cache_dir }}/{{ version }}/oc adm release extract
        --registry-config={{ pullsecret_file | quote }}
        --command={{ item.installer_binary }}
        --to={{ cache_dir }}/{{ version }}
        {{ release_image.stdout }}
      when:
        - not item.stat.exists
      loop: "{{ extracted_cmds.results }}"  # loop over the results registered previously
      loop_control:
        label: "{{ item.installer_binary }}"  # installer_binary already exists in this loop object
      become: true

    - name: "Copy openshift-install binary to {{ ocp_binary_path }}"
      copy:
        src: "{{ cache_dir }}/{{ version }}/{{ item.installer_binary }}"
        dest: "{{ ocp_binary_path }}/{{ item.installer_binary }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0755'
        remote_src: true
      loop: "{{ extracted_cmds.results }}"  # loop over the results registered previously
      loop_control:
        label: "{{ item.installer_binary }}"  # installer_binary already exists in this loop object
      become: true
  when:
    - cache_provisioner | bool
  tags:
    - pullsecret
    - extract

# If the registry host got the installer, lets just copy it to the prov host
- name: "Copy pull secret and extract/copy openshit install in disconnected mode"
  block:
    - name: "Check if commands were extracted"
      stat:
        path: "{{ cache_dir }}/{{ version }}/pull-secret.txt"
        get_checksum: false
      register: pullfile
      delegate_to: "{{ groups['registry_host'][0] }}"

    - name: "Copy PullSecret to registry dir"
      copy:
        content: "{{ pullsecret }}"
        dest: "{{ cache_dir }}/{{ version }}/pull-secret.txt"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      delegate_to: "{{ groups['registry_host'][0] }}"
      when:
        - not pullfile.stat.exists

    - name: "Extract installer commands"
      command: >
        {{ cache_dir }}/{{ version }}/oc adm release extract
        --registry-config={{ cache_dir }}/{{ version }}/pull-secret.txt
        --command={{ item.installer_binary }}
        --to={{ cache_dir }}/{{ version }}
        {{ release_image.stdout }}
      when:
        - not item.stat.exists
      loop: "{{ extracted_cmds.results }}"  # loop over the results registered previously
      loop_control:
        label: "{{ item.installer_binary }}"  # installer_binary already exists in this loop object
      become: true
      delegate_to: "{{ groups['registry_host'][0] }}"

    - name: "Get the openshift install from registry host into temp file on control machine"
      fetch:
        dest: /tmp/
        flat: true
        src: "{{ cache_dir }}/{{ version }}/{{ installer_binary }}"
      loop: "{{ installer_extract_cmds }}"
      loop_control:
        loop_var: installer_binary
      delegate_to: "{{ groups['registry_host'][0] }}"

    - name: "Copy the openshift client tools from control machine to the provisioner host"
      copy:
        src: "/tmp/openshift-install"
        dest: "{{ dir }}/{{ installer_binary }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: 0755
      loop: "{{ installer_extract_cmds }}"
      loop_control:
        loop_var: installer_binary
      become: true

    - name: "Remove the temporary copy of the openshift install on control machine"
      file:
        path: "/tmp/{{ installer_binary }}"
        state: absent
      loop: "{{ installer_extract_cmds }}"
      loop_control:
        loop_var: installer_binary
      delegate_to: localhost

    - name: "Copy openshift install binary to {{ ocp_binary_path }} provisioner"
      copy:
        src: "{{ dir }}/openshift-install"
        dest: "{{ ocp_binary_path }}/{{ installer_binary }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: "0755"
        remote_src: true
      loop: "{{ installer_extract_cmds }}"
      loop_control:
        loop_var: installer_binary
      become: true
  when:
    - not cache_provisioner | bool
  tags:
    - extract
...
