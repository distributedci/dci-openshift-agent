---
- name: "Check if rhcos.json exists"
  stat:
    path: "{{ cache_dir }}/{{ version }}/rhcos.json"
    get_checksum: false
  register: rhcos_json

- name: "Get git SHA from installer"
  shell: >
    {{ cache_dir }}/{{ version }}/openshift-baremetal-install version |
    grep "^built from" |
    awk '{ print $NF }'
  register: commit_id
  changed_when: false
  when:
    - not rhcos_json.stat.exists or force_mirroring

- name: "Fetch rhcos.json File"
  shell: >
    {{ cache_dir }}/{{ version }}/openshift-baremetal-install coreos print-stream-json >>
    {{ cache_dir }}/{{ version }}/rhcos.json
  register: rhcos_json_file
  retries: 3
  delay: 10
  until: rhcos_json_file is not failed
  when:
    - not rhcos_json.stat.exists or force_mirroring

- name: "Load variables from rhcos.json"
  include_vars:
    file: "{{ cache_dir }}/{{ version }}/rhcos.json"
    name: rhcos_json_vars

- name: "Check if QEMU image exists"
  stat:
    path: "{{ cache_dir }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}"
    get_checksum: false
  register: qemu_img

- name: "Download QEMU image"
  get_url:
    url: "{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.location') | replace('\"', '') }}"
    dest: "{{ cache_dir }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: httpd_sys_content_t
    checksum: "sha256:{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.sha256') | replace('\"', '') }}"
    timeout: 3600
  register: qemu_img_file
  become: true
  retries: 3
  delay: 10
  until: qemu_img_file is not failed
  when:
    - not qemu_img.stat.exists or force_mirroring

- name: "Check if OpenStack image exists"
  stat:
    path: "{{ cache_dir }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}"
    get_checksum: false
  register: openstack_img

- name: "Download OpenStack image"
  get_url:
    url: "{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.location') | replace('\"', '') }}"
    dest: "{{ cache_dir }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
    setype: httpd_sys_content_t
    checksum: "sha256:{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.sha256') | replace('\"', '') }}"
    timeout: 3600
  become: true
  register: openstack_img_file
  retries: 3
  delay: 10
  until: openstack_img_file is not failed
  when:
    - not openstack_img.stat.exists or force_mirroring

- name: "Set facts for *osimage URL overrides"
  set_fact:
    # for some reason, the checksum used in the bootstraposimage is uncompressed-sha256 instead of play sha256. Without having tested it, this does not sound correct, so for now we will use sha256.
    bootstraposimage: "{{ webserver_url }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}?sha256={{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.qemu.formats.\"qcow2.gz\".disk.sha256') | replace('\"', '') }}"
    clusterosimage: "{{ webserver_url }}/{{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.location') | replace('\"', '') | basename }}?sha256={{ rhcos_json_vars | json_query('architectures.x86_64.artifacts.openstack.formats.\"qcow2.gz\".disk.sha256') | replace('\"', '') }}"

- name: "Check if container_images.done exists"
  stat:
    path: "{{ cache_dir }}/{{ version }}/container_images.done"
    get_checksum: false
  register: container_images_done

- name: "Mirror release images to local registry"
  command: >
    {{ cache_dir }}/{{ version }}/oc adm release mirror
    --registry-config={{ cache_dir }}/{{ version }}/registry-auths.json
    --from={{ release_image.stdout | quote }}
    --to-release-image={{ registry_url | urlsplit('netloc') }}{{ registry_url | urlsplit('path') }}:{{ release_version.stdout }}
    --to={{ registry_url | urlsplit('netloc') | quote }}{{ registry_url | urlsplit('path') | quote }}
  retries: 3
  delay: 10
  register: result
  until: result.rc == 0
  when:
    - not container_images_done.stat.exists or force_mirroring

- name: "Marker for container images mirrored"
  file:
    dest: "{{ cache_dir }}/{{ version }}/container_images.done"
    state: touch
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: "0644"
  when:
    - not container_images_done.stat.exists or force_mirroring
...
